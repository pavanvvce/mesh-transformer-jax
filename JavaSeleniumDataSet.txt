{"text": "import java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.WebDriver;\n\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class SeleniumClass {\n\n\tpublic static void main(String[] args) {\n\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \".\\\\Driver\\\\chromedriver.exe\");\n\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\tdriver.manage().window().maximize();\n\n\t\tdriver.get(\"https://www.facebook.com\");\n\n\t\tdriver.close();\n\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Random;\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.logging.LogEntry;\nimport org.openqa.selenium.logging.LogType;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.ITestResult;\nimport com.vandebron.base.TestBase;\npublic class TestUtil extends TestBase {\n\tpublic static long PAGE_LOAD_TIMEOUT = 20;\n\tpublic static int randomNumbers(int min, int max) {\n\t\tRandom r = new Random();\n\t\tint Low = min;\n\t\tint High = max;\n\t\tint Result = r.nextInt(High - Low) + Low;\n\t\treturn Result;\n\t}\n\tpublic static void takeScreenshotAtEndOfTest() throws IOException {\n\t\tFile scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n\t\tFileUtils.copyFile(scrFile, new File(\"AutoReport/\" + System.currentTimeMillis() + \".png\"));\n\t}\n\tpublic static void clickByJS(WebElement element) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"arguments[0].click();\", element);\n\t}\n\tpublic static String TakeSnapshot(WebDriver driver, String pictureName) throws IOException {\n\t\tFile src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n\t\tString Destination = pictureName + \".png\";\n\t\tFile FinalDestination = new File(\"AutoReport/\" + Destination);\n\t\tFileUtils.copyFile(src, FinalDestination);\n\t\treturn Destination;\n\t}\n\tpublic static void getConsoleLogs(WebDriver driver1, ITestResult result) throws Throwable, Throwable {\n\t\tlogs = driver1.manage().logs();\n\t\tlogEntries = logs.get(LogType.BROWSER);\n\t\twriter = new PrintWriter(\"AutoReport/\" + result.getName() + \".txt\", \"UTF-8\");\n\t\tfor (LogEntry logEntry : logEntries) {\n\t\t\twriter.println(\"Console log found in Test- \" + result.getName());\n\t\t\twriter.println(\"__________________________________________________________\");\n\t\t\tif (logEntry.getMessage().toLowerCase().contains(\"error\")) {\n\t\t\t\twriter.println(\"Error Message in Console:\" + logEntry.getMessage());\n\t\t\t} else if (logEntry.getMessage().toLowerCase().contains(\"warning\")) {\n\t\t\t\twriter.println(\"Warning Message in Console:\" + logEntry.getMessage());\n\t\t\t} else {\n\t\t\t\twriter.println(\"Information Message in Console:\" + logEntry.getMessage());\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n\tpublic static void clickOn(WebDriver driver, WebElement locator, int timeout) {\n\t\tnew WebDriverWait(driver, timeout).ignoring(StaleElementReferenceException.class).until(ExpectedConditions.elementToBeClickable(locator));\n\t\tlocator.click();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.NoAlertPresentException;\nimport org.openqa.selenium.TimeoutException;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day4HP {\n\tpublic static ChromeDriver driver;\n\n//Reusable method to handle random pop-up\n\tpublic void handlePopup() throws InterruptedException {\n\t\tSystem.out.println(\"Pop handling initiated\");\n\t\tif (driver.findElementByXPath(\"//div[contains(@class,'closeButton')]\").isDisplayed()) {\n\t\t\tdriver.findElementByXPath(\"//div[contains(@class,'closeButton')]\").click();\n\t\t\tSystem.out.println(\"Pop up closed\");\n\t\t} else\n\t\t\tSystem.out.println(\"Pop up did not occur\");\n\t}\n\n//Launch HP site in Chrome Browser and get Title\n\tpublic void launchBrowser() {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://store.hp.com/in-en/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"HP\")) {\n\t\t\tSystem.out.println(\"HP launched successfully: \" + title);\n\t\t} else\n\t\t\tfail(\"HP launch failed\");\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tDay4HP hp = new Day4HP();\n\t\thp.launchBrowser();\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\t\tActions builder = new Actions(driver);\n\n//Mouse over on Laptops menu and click on Pavilion\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//span[text()='Laptops']\")).perform();\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//span[text()='Pavilion']\")).click().build().perform();\n\t\tif (driver.findElementByXPath(\"//h1[text()='Pavilion Laptops']\").isDisplayed()) {\n\t\t\tSystem.out.println(\"Navigated to Pavilion laptop products screen\");\n\t\t}\n\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//button[@aria-label='Close']\")));\n\t\tdriver.findElementByXPath(\"//button[@aria-label='Close']\").click();\n\n//Under SHOPPING OPTIONS -->Processor -->Select Intel Core i7\n\t\tdriver.findElementByXPath(\"(//span[text()='Processor'])[2]\").click();\n\t\tdriver.findElementByXPath(\"//span[text()='Intel Core i7']\").click();\n\t\tif (driver.findElementByXPath(\"//div[@class='filter-current']//span[2]\").isDisplayed()) {\n\t\t\tSystem.out.println(\"Intel Core i7 Processor selected\");\n\t\t}\n\n//Call popup handle method\n\t\thp.handlePopup();\n\n//Hard Drive Capacity -->More than 1TB\n\t\tdriver.findElementByXPath(\"//span[text()='More than 1 TB']\").click();\n\t\tif (driver.findElementByXPath(\"//div[@class='filter-current']//span[text()='More than 1 TB']\").isDisplayed()) {\n\t\t\tSystem.out.println(\"More than 1 TB is selected\");\n\t\t}\n\n//Call popup handle method\n\t\thp.handlePopup();\n\n//Select Sort By: Price: Low to High\n\t\tWebElement eleSelect = driver.findElementById(\"sorter\");\n\t\tSelect sortByPrice = new Select(eleSelect);\n\t\tsortByPrice.selectByValue(\"price_asc\");\n\t\tif (driver.findElementByXPath(\"//option[@value='price_asc' and @selected='selected']\").isSelected()) {\n\t\t\tSystem.out.println(\"Sorted by price low to high\");\n\t\t}\n\t\tThread.sleep(500);\n\n//Print the First resulting Product Name and Price\n\t\tString productName = driver.findElementByXPath(\"//div[contains(@class,'product-item-details')]//a\").getText();\n\t\tSystem.out.println(\"Product name: \" + productName);\n\t\tString productPrice = driver.findElementByXPath(\"//span[contains(@class,'final_price')]//span/span\").getText();\n\t\tSystem.out.println(\"Price: \" + productPrice);\n\n//Add to Cart\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//span[text()='Add To Cart']/parent::button\")));\n\t\tdriver.findElementByXPath(\"//span[text()='Add To Cart']/parent::button\").click();\n\n//Click on Shopping cart icon and view cart\n\t\tWebElement eleClickCart = driver.findElementByXPath(\"//a[contains(@class,'showcart')]\");\n\t\tJavascriptExecutor click = (JavascriptExecutor) driver;\n\t\tclick.executeScript(\"arguments[0].click();\", eleClickCart);\n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//a[contains(@class,'viewcart')]\").click();\n\t\tif ((driver.getTitle()).contains(\"Shopping Cart\")) {\n\t\t\tSystem.out.println(\"Landed on shopping cart screen\");\n\t\t}\n\n//Check the Shipping Option --> Check availability at Pincode\n\t\tdriver.findElementByName(\"pincode\").sendKeys(\"600078\");\n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//button[text()='check']\").click();\n\t\tThread.sleep(500);\n\n//If dispatch mode is available at valid pincode\n\t\ttry {\n\t\t\tif (driver.findElementByXPath(\"//span[@class='available']\").isDisplayed()) {\n\t\t\t\tSystem.out.println(\"Product available for delivery at selected pincode\");\n\n\t\t\t\t// Verify the order Total against the product price\n\t\t\t\tif ((driver.findElementByXPath(\"//tr[@class='grand totals']/td//span\").getText())\n\t\t\t\t\t\t.equalsIgnoreCase(productPrice)) {\n\t\t\t\t\tSystem.out.println(\"Product and price in cart matches with the one selected\");\n\t\t\t\t\tSystem.out.println(\"Grand total: \" + productPrice);\n\t\t\t\t}\n\t\t\t\t// Proceed to Checkout if Order Total and Product Price matches\n\t\t\t\tdriver.findElementByXPath(\"//span[text()='Proceed to Checkout']/parent::button\").click();\n\t\t\t\tThread.sleep(500);\n\n\t\t\t\t// Click on Place Order\n\t\t\t\tdriver.findElementByXPath(\"(//span[text()='Place Order'])[4]/parent::button\").click();\n\n\t\t\t\t// Capture error message\n\t\t\t\tString errorMsg = driver.findElementByXPath(\"//div[@class='message notice']/span\").getText();\n\t\t\t\tSystem.err.println(\"Mandatory details are not filled in: \" + errorMsg);\n\t\t\t}\n\t\t}\n\n//Dispatch mode not available at valid pincode (676523)\n\t\tcatch (Exception e) {\n\t\t\tSystem.err.println(\"Dispatch cannot happen at the pincode specified\");\n\t\t}\n\n//Close browser\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.time.format.TextStyle;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.swing.ToolTipManager;\nimport javax.swing.plaf.ToolTipUI;\n\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day15Airbnb {\n\tpublic static ChromeDriver driver;\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tDay15Airbnb obj = new Day15Airbnb();\n//Launch Zalando site\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tSystem.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.airbnb.co.in/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"Airbnb\"))\n\t\t\tSystem.out.println(\"Airbnb launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"Airbnb Study Abroad launch failed\");\n\n\t\tActions build = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 20);\n\n//Type Coorg in location and Select Coorg, Karnataka\n\t\tdriver.findElementByXPath(\"//div[text()='Location']/following-sibling::input\").sendKeys(\"Coorg\");\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//div[text()='Coorg, Karnataka']\").click();\n\t\tSystem.out.println(\n\t\t\t\t\"Location selected as: \" + driver.findElementByXPath(\"//div[text()='Coorg, Karnataka']\").getText());\n\n//Select the Start Date as June 1st and End Date as June 5th \n\t\tLocalDate date = LocalDate.now();\n\t\tLocalDate plusMonths = date.plusMonths(1);\n\t\tString month = plusMonths.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//div[text()='\" + month\n\t\t\t\t+ \" 2020']/parent::div/following-sibling::table//td[contains(@aria-label,'1')]\").click();\n\t\tdriver.findElementByXPath(\"//div[text()='\" + month\n\t\t\t\t+ \" 2020']/parent::div/following-sibling::table//td[contains(@aria-label,'5')]\").click();\n\t\tThread.sleep(1000);\n\t\tString dateSelected = driver.findElementByXPath(\"//div[contains(text(),'Check in')]/following-sibling::div\")\n\t\t\t\t.getText();\n\t\tSystem.out.println(\"Check-in and out date selected as :\" + dateSelected);\n\n//Select guests as 6 adults, 3 child and Click Search\n\t\tint adults = 6;\n\t\tint children = 3;\n\t\tdriver.findElementByXPath(\"//div[text()='Add guests']/parent::button\").click();\n\t\tfor (int i = 0; i < adults; i++) {\n\t\t\tdriver.findElementByXPath(\"//div[@id='stepper-adults']/button[@aria-label='increase value']\").click();\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tfor (int i = 0; i < children; i++) {\n\t\t\tdriver.findElementByXPath(\"//div[@id='stepper-children']/button[@aria-label='increase value']\").click();\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tif (driver.findElementByXPath(\"//div[text()='Guests']/following-sibling::div\").getText()\n\t\t\t\t.contains(Integer.toString(adults + children))) {\n\t\t\tSystem.out.println(\"Total guests inclusive of children: \" + Integer.toString(adults + children));\n\t\t}\n\t\tdriver.findElementByXPath(\"//button[@type='submit']\").click();\n\n//Click Cancellation flexibility and enable the filter and Save \n\t\tdriver.findElementByXPath(\"//span[text()='Cancellation flexibility']/ancestor::button[1]\").click();\n\t\tdriver.findElementByXPath(\"//button[contains(@aria-labelledby,'flexible_cancellation')]\").click();\n\t\tdriver.findElementByXPath(\"//button[text()='Save']\").click();\n\t\tif (driver\n\t\t\t\t.findElementByXPath(\n\t\t\t\t\t\t\"//span[@aria-label='Cancellation flexibility']/parent::button[@aria-pressed='true']\")\n\t\t\t\t.isDisplayed()) {\n\t\t\tSystem.out.println(\"Cancellation fexibility is enabled\");\n\t\t}\n\n//Select Type of Place as Entire Place and Save\n\t\tdriver.findElementByXPath(\"//span[@aria-label='Type of place']/parent::button\").click();\n\t\tdriver.findElementByXPath(\"//label[contains(@for,'Entire_home')]/span\").click();\n\t\tdriver.findElementByXPath(\"//button[text()='Save']\").click();\n\t\tif (driver.findElementByXPath(\"//span[@aria-label='Entire place']/parent::button[@aria-pressed='true']\")\n\t\t\t\t.isDisplayed()) {\n\t\t\tSystem.out.println(\"Entire place is selected\");\n\t\t}\n\n//Set Min price as 3000 and  max price as 5000 \n\t\tdriver.findElementByXPath(\"//span[@aria-label='Price']/parent::button\").click();\n\t\tThread.sleep(1000);\n\t\tdriver.findElementById(\"price_filter_min\").sendKeys(Keys.chord(Keys.CONTROL, \"a\"), \"3000\");\n\t\tdriver.findElementById(\"price_filter_max\").sendKeys(Keys.chord(Keys.CONTROL, \"a\"), \"5000\");\n\t\tdriver.findElementByXPath(\"//button[text()='Save']\").click();\n\t\tif (driver.findElementByXPath(\"//span[contains(@aria-label,'3,000')]/parent::button[@aria-pressed='true']\")\n\t\t\t\t.isDisplayed()) {\n\t\t\tSystem.out.println(\"Price range 3000-5000 is selected\");\n\t\t}\n\n//Click More Filters and set 3 Bedrooms and 3 Bathrooms\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//span[text()='More filters']/parent::button\").click();\n\t\tThread.sleep(1000);\n\t\tint beds = 3, baths = 3;\n\t\tfor (int i = 0; i < beds; i++) {\n\t\t\tdriver.findElementByXPath(\n\t\t\t\t\t\"//div[@id='filterItem-stepper-min_bedrooms-0']/button[@aria-label='increase value']\").click();\n\t\t\tThread.sleep(250);\n\t\t}\n\t\tfor (int i = 0; i < baths; i++) {\n\t\t\tdriver.findElementByXPath(\n\t\t\t\t\t\"//div[@id='filterItem-stepper-min_bathrooms-0']/button[@aria-label='increase value']\").click();\n\t\t\tThread.sleep(250);\n\t\t}\n\t\tdriver.findElementByXPath(\"//div[contains(@class,'accept-cookie')]/button[@aria-label='OK']\").click();\n\n//Check the Amenities with Kitchen, Facilities with Free parking on premises, Property as House and Host Language as English and click on Stays only when stays available \n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//div[text()='Kitchen']\").click();\n\t\tdriver.findElementByXPath(\"//div[text()='Free parking on premises']\").click();\n\t\tdriver.findElementByXPath(\"//div[text()='House']\").click();\n\t\tdriver.findElementByXPath(\"//div[text()='English']\").click();\n\t\tThread.sleep(1000);\n\t\tString staysDisplayed = driver.findElementByXPath(\"//button[@type='button' and contains(text(),'Show')]\")\n\t\t\t\t.getText();\n\t\tint staysAvailable = Integer.parseInt(staysDisplayed.replaceAll(\"\\\\D\", \"\"));\n\t\tif (staysAvailable > 0) {\n\t\t\tSystem.out.println(staysAvailable + \" stay(s) available for the filtered criteria\");\n\t\t\tdriver.findElementByXPath(\"//button[@type='button' and contains(text(),'Show')]\").click();\n\t\t} else\n\t\t\tSystem.err.println(\"No stays available\");\n\n//Click Prahari Nivas, the complete house\n\t\twait.until(ExpectedConditions.elementToBeClickable(\n\t\t\t\tdriver.findElementByXPath(\"//a[@aria-label='Prahari Nivas, the complete house']\")));\n\t\tdriver.findElementByXPath(\"//a[@aria-label='Prahari Nivas, the complete house']\").click();\n\t\tSet<String> setHandle = driver.getWindowHandles();\n\t\tList<String> listHandle = new ArrayList<String>(setHandle);\n\t\tdriver.switchTo().window(listHandle.get(1));\n\n//Click on \"Show all * amenities\" \n\t\tThread.sleep(5000);\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//*[contains(text(),'amenities')]\")));\n\t\t// JavascriptExecutor executor =(JavascriptExecutor) driver;\n\t\t// executor.executeScript(\"arguments[0].click();\",driver.findElementByXPath(\"//*[contains(text(),'amenities')]\"));\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//*[contains(text(),'amenities')]\")).click().build().perform();\n\t\tThread.sleep(2000);\n\t\tList<WebElement> eleNAamenities = driver\n\t\t\t\t.findElementsByXPath(\"//*[text()='Not included']/parent::*/following-sibling::div//del\");\n\t\tSystem.out.println(\"Amenities not included are as follows:\");\n\t\tfor (int i = 0; i < eleNAamenities.size(); i++) {\n\t\t\tSystem.out.println(eleNAamenities.get(i).getText());\n\t\t}\n\t\tThread.sleep(2000);\n\t\tdriver.findElementByXPath(\"//*[@aria-label='Amenities']//button\").click();\n\n//Verify the Check-in date, Check-out date and Guests \n\t\tString checkIn = \"\";\n\t\tString checkOut = \"\";\n\t\tString guests = \"\";\n\t\ttry {\n\t\t\tcheckIn = driver.findElementByXPath(\"//*[text()='Check-in']/following-sibling::*\").getText();\n\t\t\tcheckOut = driver.findElementByXPath(\"//*[text()='Checkout']/following-sibling::*\").getText();\n\t\t\tSystem.out.println(\"Check-in date: \" + checkIn);\n\t\t\tSystem.out.println(\"Check-out date: \" + checkOut);\n\t\t\tguests = driver.findElementByXPath(\"//label[@for='GuestPicker-book_it-trigger']//span\").getText();\n\t\t\tSystem.out.println(\"No. of guests: \" + guests);\n\t\t} catch (Exception e) {\n\t\t\tcheckIn = driver\n\t\t\t\t\t.findElementByXPath(\"//span[@id='DateInput__screen-reader-message-checkin']/following-sibling::div\")\n\t\t\t\t\t.getText();\n\t\t\tcheckOut = driver.findElementByXPath(\n\t\t\t\t\t\"//span[@id='DateInput__screen-reader-message-checkout']/following-sibling::div\").getText();\n\t\t\tSystem.out.println(\"Check-in date: \" + checkIn);\n\t\t\tSystem.out.println(\"Check-out date: \" + checkOut);\n\t\t\tguests = driver.findElementByXPath(\"//span[@class='guest-label__text guest-label__text-guests']\").getText();\n\t\t\tSystem.out.println(\"No. of guests: \" + guests);\n\t\t}\n\n//Read all the Sleeping arrangements and Print \n\t\tList<WebElement> eleBedrooms = driver.findElementsByXPath(\"//div[contains(text(),'Bedroom')]\");\n\t\tList<WebElement> eleBeds = driver.findElementsByXPath(\"//div[contains(text(),'bed')]\");\n\t\tMap<String, String> map = new LinkedHashMap<String, String>();\n\t\tThread.sleep(1000);\n\t\tWebElement eleNext = driver.findElementByXPath(\n\t\t\t\t\"//div[@data-plugin-in-point-id='SLEEPING_ARRANGEMENT_DEFAULT']//*[contains(@style,'right')]//button\");\n\t\tint j = 0;\n\t\ttry {\n\t\t\twhile (j == 0) {\n\t\t\t\tif (eleNext.isDisplayed()) {\n\t\t\t\t\tfor (int i = 0; i < eleBedrooms.size(); i++) {\n\t\t\t\t\t\tif (eleBedrooms.get(i).getText() != \"\" && eleBeds.get(i).getText() != \"\") {\n\t\t\t\t\t\t\tmap.put(eleBedrooms.get(i).getText(), eleBeds.get(i).getText());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\teleNext.click();\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tfor (int i = 0; i < eleBedrooms.size(); i++) {\n\t\t\t\tmap.put(eleBedrooms.get(i).getText(), eleBeds.get(i).getText());\n\t\t\t}\n\t\t}\n\t\tfor (Entry<String, String> eachEntry : map.entrySet()) {\n\t\t\tSystem.out.println(eachEntry.getKey() + \"-->\" + eachEntry.getValue());\n\t\t}\n\n//Close browser\n\t\tdriver.quit();\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.time.format.TextStyle;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.swing.ToolTipManager;\nimport javax.swing.plaf.ToolTipUI;\n\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day16Ajio {\n\tpublic static ChromeDriver driver;\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tDay16Ajio obj = new Day16Ajio();\n//1) Launch Ajio site\n\t\tChromeOptions options = new ChromeOptions();\n\t\toptions.addArguments(\"--disable-notifications\");\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tSystem.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\n\t\tdriver = new ChromeDriver(options);\n\t\tdriver.get(\"https://www.ajio.com/shop/sale\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"AJIO\"))\n\t\t\tSystem.out.println(\"AJIO launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"AJIO Study Abroad launch failed\");\n\n\t\tActions build = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 20);\n\n//2) Enter Bags in the Search field and Select Bags in Women Handbags\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//input[@placeholder='Search AJIO']\")));\n\t\tdriver.findElementByXPath(\"//input[@placeholder='Search AJIO']\").sendKeys(\"Bags\");\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//span[text()='Women Handbags']/parent::a\").click();\n\t\tString pageHeader = driver.findElementByXPath(\"//h1/div[2]\").getText();\n\t\tSystem.out.println(pageHeader);\n\n//3) Click on five grid and Select SORT BY as \"What's New\"\n\t\tdriver.findElementByXPath(\"//div[@class='five-grid']/parent::div\").click();\n\t\tWebElement eleSort = driver.findElementByXPath(\"//div[@class='filter-dropdown']/select\");\n\t\tSelect sortFilter = new Select(eleSort);\n\t\tsortFilter.selectByVisibleText(\"What's New\");\n\t\tSystem.out.println(\"Grid selected as Five and Sorted by What's New\");\n\n//4) Enter Price Range Min as 2000 and Max as 5000\n\t\tdriver.findElementByXPath(\"//span[text()='price']\").click();\n\t\tdriver.findElementById(\"minPrice\").sendKeys(\"2000\");\n\t\tdriver.findElementById(\"maxPrice\").sendKeys(\"5000\");\n\t\tdriver.findElementByXPath(\"//div[@class='facet-min-price-filter']/button\").click();\n\t\tSystem.out.println(\"Price range set between 2000 and 5000\");\n\n//5) Click on the product \"Puma Ferrari LS Shoulder Bag\"\n\t\tThread.sleep(2000);\n\t\twait.until(ExpectedConditions.elementToBeClickable(\n\t\t\t\tdriver.findElementByXPath(\"//div[text()='Ferrari LS Shoulder Bag']/ancestor::div[2]\")));\n\t\tJavascriptExecutor executor = (JavascriptExecutor) driver;\n\t\texecutor.executeScript(\"arguments[0].click();\",\n\t\t\t\tdriver.findElementByXPath(\"//div[text()='Ferrari LS Shoulder Bag']/ancestor::div[2]\"));\n\t\t// build.moveToElement(driver.findElementByXPath(\"//div[text()='Ferrari LS\n\t\t// Shoulder Bag']/ancestor::div[2]\")).click().build().perform();\n\t\t// driver.findElementByXPath(\"//div[text()='Ferrari LS Shoulder\n\t\t// Bag']/ancestor::div[2]\").click();\n\t\tSet<String> setHandle = driver.getWindowHandles();\n\t\tList<String> listHandle = new ArrayList<String>(setHandle);\n\t\tdriver.switchTo().window(listHandle.get(1));\n\n//6) Verify the Coupon code for the price above 2690 is applicable for your product, if applicable the get the Coupon Code and Calculate the discount price for the coupon\n\t\tString brandName = driver.findElementByXPath(\"//div[@class='prod-content']/h2\").getText();\n\t\tString prodName = driver.findElementByXPath(\"//div[@class='prod-content']/h1\").getText();\n\t\tSystem.out.println(\"Brand: \" + brandName);\n\t\tSystem.out.println(\"Product: \" + prodName);\n\t\tString rawPrice = driver.findElementByXPath(\"//div[@class='prod-price-section']/div[@class='prod-sp']\")\n\t\t\t\t.getText();\n\t\tint prodPrice = Integer.parseInt(rawPrice.replaceAll(\"\\\\D\", \"\"));\n\t\tSystem.out.println(\"Product price: \" + prodPrice);\n\t\tif (prodPrice > 2690) {\n\t\t\tThread.sleep(500);\n\t\t\tif (driver.findElementByXPath(\"//div[@class='promo-desc']\").getText()\n\t\t\t\t\t.contains(\"Extra Upto 28% Off on 2690 and Above \")) {\n\t\t\t\tString couponCode = driver.findElementByXPath(\"//div[@class='promo-title']\").getText();\n\t\t\t\tSystem.out.println(\"Coupon code applicable for product price available above 2690 is: \" + couponCode);\n\t\t\t} else\n\t\t\t\tSystem.err.println(\"Coupon code not displayed for product price available above 2690\");\n\t\t} else\n\t\t\tSystem.out.println(\"Coupon code not applicable for product price above 2690\");\n\t\tString discountedPrice = driver.findElementByXPath(\"//div[text()='Get it for ']/span\").getText();\n\t\tint discPrice = Integer.parseInt(discountedPrice.replaceAll(\"\\\\D\", \"\"));\n\t\tSystem.out.println(\"Discounted price: \" + discPrice);\n\t\tint couponAmount = prodPrice - discPrice;\n\t\tSystem.out.println(\"Coupon Amount: \" + couponAmount);\n\n//7) Check the availability of the product for pincode 560043, print the expected delivery date if it is available\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//span[contains(text(),'Enter pin-code')]\").click();\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//input[@name='pincode']\")));\n\t\tdriver.findElementByXPath(\"//input[@name='pincode']\").sendKeys(\"682001\");\n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//button[text()='CONFIRM PINCODE']\").click();\n\t\tThread.sleep(2000);\n\t\tString pincodeMsg = driver.findElementByXPath(\"//ul[@class='edd-message-success-details']/li\").getText();\n\t\tif (pincodeMsg.contains(\"Expected Delivery\")) {\n\t\t\tSystem.out.println(\"Product available for pincode specified\");\n\t\t} else\n\t\t\tSystem.err.println(\"Product not available for pincode specified\");\n\n//8) Click on Other Informations under Product Details and Print the Customer Care address, phone and email\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//div[text()='Other information']\")).click().build().perform();\n\t\tThread.sleep(500);\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//span[text()='Customer Care Address']\")));\n\t\tString customerCareDetails = driver\n\t\t\t\t.findElementByXPath(\"//span[text()='Customer Care Address']/parent::li/span[@class='other-info']\")\n\t\t\t\t.getText();\n\t\tSystem.out.println(\"Customer care address, phone and email: \" + customerCareDetails);\n\n//9) Click on ADD TO BAG and then GO TO BAG\n\t\tdriver.findElementByXPath(\"//span[text()='ADD TO BAG']/ancestor::div[1]\").click();\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//span[text()='GO TO BAG']/ancestor::div[1]\")));\n\t\texecutor.executeScript(\"arguments[0].click();\",\n\t\t\t\tdriver.findElementByXPath(\"//span[text()='GO TO BAG']/ancestor::div[1]\"));\n\t\tThread.sleep(1000);\n\t\tif (driver.getTitle().contains(\"Shopping Bag\")) {\n\t\t\tSystem.out.println(\"Navigated to Shopping bag\");\n\t\t}\n\n//10) Check the Order Total before apply coupon\n\t\tThread.sleep(2000);\n\t\tString strOrderTotal = driver.findElementByXPath(\"//span[text()='Order Total']/following-sibling::span\")\n\t\t\t\t.getText();\n\t\tString strOrderTot = strOrderTotal.replaceAll(\"\\\\D\", \"\");\n\t\tint total = Integer.parseInt(strOrderTot.substring(0, strOrderTot.length() - 2));\n\t\tSystem.out.println(\"Order total before applying coupon code: \" + total);\n\n//11) Enter Coupon Code and Click Apply\n\t\tdriver.findElementById(\"couponCodeInput\").sendKeys(\"EPIC\");\n\t\tdriver.findElementByXPath(\"//button[text()='Apply']\").click();\n\t\tSystem.out.println(\"Coupon applied\");\n\n//12) Verify the Coupon Savings amount(round off if it in decimal) under Order Summary and the matches the amount calculated in Product details\n\t\tThread.sleep(1000);\n\t\tString rawPriceAfterCoupon = driver.findElementByXPath(\"//span[@class='applied-coupon-section']/p\").getText();\n\t\tString rawPriceAfter = rawPriceAfterCoupon.replaceAll(\"[:,a-zA-Z ]\", \"\");\n\t\tString substring = rawPriceAfter.substring(1);\n\t\tdouble dpriceAfterCoupon = Double.parseDouble(substring);\n\t\tint priceAfterCoupon = (int) Math.round(dpriceAfterCoupon);\n\t\tif (priceAfterCoupon == couponAmount) {\n\t\t\tSystem.out.println(\"Price after couple applied matches with coupon amount: \" + priceAfterCoupon);\n\t\t}\n\n//13) Click on Delete and Delete the item from Bag\n\t\tdriver.findElementByXPath(\"//div[@class='product-delete']/div\").click();\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//div[@class='card-delete-button']//div[text()='DELETE']\").click();\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//div[@class='empty-cart']/p\")));\n\t\tString emptyCartMsg = driver.findElementByXPath(\"//div[@class='empty-cart']/p\").getText();\n\t\tif (emptyCartMsg.contains(\"Your Shopping Bag is Empty\")) {\n\t\t\tSystem.out.println(\"Item deleted from bag\");\n\t\t}\n\n//Close browser\n\t\tdriver.quit();\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.io.File;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day17AzureMS {\n\tpublic static ChromeDriver driver;\n\n//To check if expected file is downloaded\n\tpublic void checkFileDownload(String downloadPath, String fileName) {\n\t\tFile file = new File(downloadPath);\n\t\tFile[] eachFile = file.listFiles();\n\t\tboolean isFilePresent = false;\n\t\tfor (int i = 0; i < eachFile.length; i++) // Traverse through all files in the path specified\n\t\t{\n\t\t\tif (eachFile[i].getName().equals(fileName)) {\n\t\t\t\tisFilePresent = true;\n\t\t\t\teachFile[i].delete();// Delete the file that's found\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isFilePresent = false) {\n\t\t\tSystem.err.println(fileName + \" is not present\");\n\t\t} else\n\t\t\tSystem.out.println(fileName + \" is present in the path specified\");\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tDay17AzureMS obj = new Day17AzureMS();\n//1) Launch Azure site\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tSystem.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://azure.microsoft.com/en-in/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"Microsoft Azure\"))\n\t\t\tSystem.out.println(\"Microsoft Azure launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"Microsoft Azure launch failed\");\n\n\t\tActions build = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 20);\n\n//2) Click on Pricing \n\t\tdriver.findElementByLinkText(\"Pricing\").click();\n\t\tif (driver.findElementByXPath(\"//h1[text()='Azure pricing']\").isDisplayed()) {\n\t\t\tSystem.out.println(\"Navigated to Azure Pricing screen\");\n\t\t} else\n\t\t\tSystem.err.println(\"Azure pricing screen not loaded\");\n\n//3) Click on Pricing Calculator\n\t\twait.until(ExpectedConditions\n\t\t\t\t.elementToBeClickable(driver.findElementByXPath(\"//a[contains(text(),'Pricing calculator')]\")));\n\t\tdriver.findElementByXPath(\"//a[contains(text(),'Pricing calculator')]\").click();\n\t\tif (driver.findElementByXPath(\"//h1[text()='Pricing calculator']\").isDisplayed()) {\n\t\t\tSystem.out.println(\"Navigated to Pricing calculator screen\");\n\t\t} else\n\t\t\tSystem.err.println(\"Pricing calculator screen not loaded\");\n\n//4) Click on Containers\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//button[text()='Containers']\")));\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//button[text()='Containers']\")).pause(2000).click().build()\n\t\t\t\t.perform();\n\n//5) Select Container Instances \n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"(//button[@title='Container Instances'])[2]\").click();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='notification-copy']/div\")));\n\t\tString notificationmsg = driver.findElementByXPath(\"//div[@class='notification-copy']/div\").getText();\n\t\tSystem.out.println(notificationmsg);\n\n//6) Click on Container Instance Added View \n\t\tdriver.findElementByXPath(\"//div[@class='notification-copy']//a[text()='View']\").click();\n\t\tSystem.out.println(\"Contanier Instance estimation process initiated\");\n\n//7) Select Region as \"South India\" \n\t\twait.until(ExpectedConditions\n\t\t\t\t.visibilityOf(driver.findElementByXPath(\"//input[@placeholder='Container Instances']\")));\n\t\tdriver.findElementByXPath(\"//select[@aria-label='Region']\");\n\t\tSelect eleRegSelect = new Select(driver.findElementByXPath(\"//select[@aria-label='Region']\"));\n\t\teleRegSelect.selectByVisibleText(\"South India\");\n\t\tString selectedRegion = eleRegSelect.getFirstSelectedOption().getText();\n\t\tif (selectedRegion.equalsIgnoreCase(\"South India\")) {\n\t\t\tSystem.out.println(\"South India selected as Region\");\n\t\t}\n\n//8) Set the Duration as 180000 seconds\n\t\tdriver.findElementByXPath(\"//input[@aria-label='Seconds']\").sendKeys(Keys.chord(Keys.CONTROL, \"a\"), \"180000\");\n\t\tThread.sleep(1000);\n\t\tString durationSet = driver.findElementByXPath(\"//input[@aria-label='Seconds']\").getAttribute(\"value\");\n\t\tif (durationSet.equalsIgnoreCase(\"180000\")) {\n\t\t\tSystem.out.println(\"Duration set as 180000 seconds\");\n\t\t}\n\n//9) Select the Memory as 4GB \n\t\tSelect eleMemory = new Select(driver.findElementByXPath(\"//select[@aria-label='Memory']\"));\n\t\teleMemory.selectByVisibleText(\"4 GB\");\n\t\tString selectedMemory = eleMemory.getFirstSelectedOption().getText();\n\t\tif (selectedMemory.equalsIgnoreCase(\"4 GB\")) {\n\t\t\tSystem.out.println(\"4GB selected as Memory\");\n\t\t}\n\n//10) Enable SHOW DEV/TEST PRICING \n\t\twait.until(\n\t\t\t\tExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='Show Dev/Test Pricing']\")));\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//span[text()='Show Dev/Test Pricing']\")).pause(500).click()\n\t\t\t\t.build().perform();\n\t\tSystem.out.println(\"Show dev/test pricing is enabled\");\n\n//11) Select Indian Rupee  as currency \n\t\tSelect eleCurrency = new Select(driver.findElementByXPath(\"//select[@aria-label='Currency']\"));\n\t\teleCurrency.selectByValue(\"INR\");\n\t\tString selectedCurrency = eleCurrency.getFirstSelectedOption().getText();\n\t\tif (selectedCurrency.contains(\"Indian Rupee\")) {\n\t\t\tSystem.out.println(\"INR selected as Currency\");\n\t\t}\n\n//12) Print the Estimated monthly price \n\t\tThread.sleep(1000);\n\t\tString monthlyEstimatedPrice = driver.findElementByXPath(\n\t\t\t\t\"//h3[text()='Estimated monthly cost']/ancestor::div[1]/following-sibling::div/div[2]//span/span\")\n\t\t\t\t.getText();\n\t\tSystem.out.println(\"Monthly Estimated price: \" + monthlyEstimatedPrice);\n\n//13) Click on Export to download the estimate as excel \n\t\tdriver.findElementByXPath(\"//button[contains(@class,'export-button')]\").click();\n\t\tThread.sleep(3000);\n\n//14)Verify the downloded file in the local folder \n\t\tSystem.out.println(\"*Container instance exported file check*\");\n\t\tobj.checkFileDownload(\"C:\\\\Users\\\\Janani\\\\Downloads\", \"ExportedEstimate.xlsx\");\n\n//15) Navigate to Example Scenarios and Select CI/CD for Containers\n\t\tThread.sleep(2000);\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"window.scrollTo(0, -document.body.scrollHeight);\");\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Example Scenarios']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Example Scenarios']\").click();\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//span[text()='CI/CD for Containers']/ancestor::button[1]\"))\n\t\t\t\t.pause(1000).click().build().perform();\n\t\tSystem.out.println(\"CI/CD for Containers is selected\");\n\n//16) Click Add to Estimate\n\t\tThread.sleep(2000);\n\t\tdriver.findElementByXPath(\"//button[text()='Add to estimate']\").click();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='CI/CD for containers']\")));\n\t\tif (driver.findElementByXPath(\"//a[text()='CI/CD for containers']\").isDisplayed()) {\n\t\t\tSystem.out.println(\"CI/CD for Containers added to estimates\");\n\t\t\tSystem.out.println(\"CI/CD estimation process initiated\");\n\t\t}\n\n//17) Change the Currency as Indian Rupee\n\t\tThread.sleep(2000);\n\t\tjs.executeScript(\"window.scrollBy(0,250)\", \"\");\n\t\tSelect currencySelect = new Select(driver.findElementByXPath(\"//select[@aria-label='Currency']\"));\n\t\tcurrencySelect.selectByValue(\"INR\");\n\t\tString currency = currencySelect.getFirstSelectedOption().getText();\n\t\tif (currency.contains(\"Indian Rupee\")) {\n\t\t\tSystem.out.println(\"INR selected as Currency\");\n\t\t}\n\n//18) Enable SHOW DEV/TEST PRICING\n\t\twait.until(\n\t\t\t\tExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='Show Dev/Test Pricing']\")));\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//span[text()='Show Dev/Test Pricing']\")).pause(500).click()\n\t\t\t\t.build().perform();\n\t\tSystem.out.println(\"Show dev/test pricing is enabled\");\n\n//19) Export the Estimate \n\t\tdriver.findElementByXPath(\"//button[contains(@class,'export-button')]\").click();\n\t\tThread.sleep(3000);\n\n//20)Verify the downloded file in the local folder \n\t\tSystem.out.println(\"*CI/CD for Containers exported file check*\");\n\t\tobj.checkFileDownload(\"C:\\\\Users\\\\Janani\\\\Downloads\", \"ExportedEstimate.xlsx\");\n\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day2NykaaTest {\n\tpublic static ChromeDriver driver;\n\n//Window Handling\n\tpublic List<String> windowHandling()\n\t{\n\t\tSet<String> setHandle = driver.getWindowHandles();\n\t\tList<String> listHandle=new ArrayList<String> (setHandle);\n\t\treturn listHandle;\n\t}\n\t\n//Launch Nykaa e-commerce site in Chrome Browser and get Title\n\tpublic void launchBrowser() {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.nykaa.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"Nykaa\"))\n\t\t\tSystem.out.println(\"Nykaa launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"Nykaa launch failed\");\n\t}\n\t\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\n//Setting up objects\n\t\tDay2NykaaTest obj = new Day2NykaaTest();\n\t\tobj.launchBrowser();\n\t\tActions builder = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\n//Mouse hover on Brands and Popular\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='brands']\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()='brands']\")).perform();\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='Popular']\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()='Popular']\")).perform();\n\t\tSystem.out.println(\"Brand and Popular selected\");\n\n//Click on Loreal Paris\n\t\tdriver.findElementByXPath(\"(//a[contains(@href,'loreal-paris')])[3]\").click();\n\n//Switch to L'Oreal Paris product window and check title\n\t\tdriver.switchTo().window(obj.windowHandling().get(1));\n\t\tString windowTitle = driver.getTitle();\n\t\tif (windowTitle.contains(\"L'Oreal Paris\")) {\n\t\t\tSystem.out.println(\"Navigated to L'Oreal page :\" + windowTitle);\n\t\t} else\n\t\t\tSystem.err.println(\"Failed to navigate to L'Oreal page\");\n\n// Click sort By and select customer top rated\n\t\tdriver.findElementByXPath(\"//span[text()='popularity']\").click();\n\t\tdriver.findElementByXPath(\"//span[text()='customer top rated']\").click();\n\t\tSystem.out.println(\"Sorted by customer top rated\");\n\n// Click Category\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"(//div[contains(@class,'pull-right')])[1]\")));\n\t\tdriver.findElementByXPath(\"(//div[contains(@class,'pull-right')])[1]\").click();\n\t\tSystem.out.println(\"Clicked Category\");\n\n// Check whether the Filter is applied with Shampoo\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"(//label[@for='chk_Shampoo_undefined'])[1]\")));\n\t\tWebElement eleShampooFilter = driver.findElementByXPath(\"(//label[@for='chk_Shampoo_undefined'])[1]\");\n\t\tif (!eleShampooFilter.isSelected()) \n\t\t{\n\t\t\teleShampooFilter.click();\n\t\t\tSystem.out.println(\"Shampoo is filtered now\");\n\t\t} \n\t\telse\n\t\t\tSystem.out.println(\"Shampoo is filtered by default\");\n\n// Click on L'Oreal Paris Colour Protect Shampoo\n\t\tdriver.findElementByXPath(\"//a[contains(@href,'paris-color-protect')]//img\").click();\n\n// Navigate to the product window\n\t\tdriver.switchTo().window(obj.windowHandling().get(2));\n\t\tif (driver.getTitle().contains(\"L'Oreal Paris Colour Protect\"))\n\t\t{\n\t\t\tSystem.out.println(\"Navigated to the product\");\n\t\t} else\n\t\t\tSystem.err.println(\"Product Navigation failed\");\n\n\t\tdriver.findElementByXPath(\"//span[text()='175ml']\").click();\n\t\tSystem.out.println(\"Size selected as 175ml\");\n\n// Print price of the product\n\t\tString productPrice = driver.findElementByXPath(\"(//div[@class='price-info']//span)[4]\").getText();\n\t\tSystem.out.println(\"Product price: \" + productPrice);\n\n// Add Product to bag and confirm\n\t\tdriver.findElementByXPath(\"//span[contains(@class,'Shopping-Bag')]/parent::button\").click();\n\t\twait.until(ExpectedConditions\n\t\t\t\t.visibilityOf(driver.findElementByXPath(\"//span[text()='Product has been added to bag.']\")));\n\t\tString confirmMsg = driver.findElementByXPath(\"//span[text()='Product has been added to bag.']\").getText();\n\t\tSystem.out.println(confirmMsg+ \" message is displayed\");\n\t\t\n// Go to Shopping bag\n\t\tdriver.findElementByXPath(\"//div[@class='AddToBagbox']\").click();\n\t\t\n// Print the Grand Total amount\n\t\tString grandTotal = driver.findElementByXPath(\"//div[@class='payment-tbl-data']/div[4]/div[2]\").getText();\n\t\tSystem.out.println(\"Grand total: \"+grandTotal);\n\t\t\n// Click to Proceed\n\t\tdriver.findElementByXPath(\"//button[contains(@class,'proceed')]\").click();\n\t\t\n// Continue as Guest\n\t\tdriver.findElementByXPath(\"//button[text()='CONTINUE AS GUEST']\").click();\n\t\t\n// Print warning message\n\t\tString warningMsg = driver.findElementByXPath(\"//div[contains(text(),'lockdown')]\").getText();\n\t\tSystem.out.println(warningMsg);\n\t\tThread.sleep(500);\n\t\t\n// Close all windows\n\t\tList<String> handles = obj.windowHandling();\n\t\tfor(int i=0;i<handles.size();i++)\n\t\t{\n\t\t\tdriver.switchTo().window(handles.get(i)).close();\n\t\t}\n\t\tSystem.out.println(\"Closed all windows\");\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestUserInteractionFalseAndTrue {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenSimilarityIsNotMet(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tSystem.out.println(\"Set user interaction false,and similarity is supposed to vary between high and low\");\n\n\t\t\tdriver.get(\"http://mysparshv2/Pages/Home.aspx\");\n\t\t\tWebElement WebApps = driver.findElement(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"));\n\t\t\tString outHtml1 = WebApps.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml1);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\n\t\t\t\t\t\"document.querySelector(\\\"#ftr > div > div.ftrCntntInner > div.dsclmr.clearfix > ul > li:nth-child(5) > a\\\").innerText='zdbsfjkdbfjksbc jsdkbcsdjkcbfasjcb xjcbasdjklcdbnaskl';\");\n\t\t\tWebElement webAppChanged = driver.findElement(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"));\n\t\t\tString outHtml2 = webAppChanged.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml2);\n\t\t\tSystem.out.println(DiceHelper.diceCoefficientOptimized(outHtml1, outHtml2));\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenSimilarityIsNotMetInMultiElement(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tSystem.out.println(\"Set user interaction false,and similarity is supposed to vary between high and low\");\n\t\t\tdriver.get(\"http://mysparshv2/Pages/Home.aspx\");\n\t\t\tWebElement WebApps = driver.findElements(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"))\n\t\t\t\t\t.get(0);\n\t\t\tString outHtml1 = WebApps.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml1);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\n\t\t\t\t\t\"document.querySelector(\\\"#ftr > div > div.ftrCntntInner > div.dsclmr.clearfix > ul > li:nth-child(5) > a\\\").innerText='zdbsfjkdbfjksbc jsdkbcsdjkcbfasjcb xjcbasdjklcdbnaskl';\");\n\t\t\tWebElement webAppChanged = driver.findElements(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"))\n\t\t\t\t\t.get(0);\n\t\t\tString outHtml2 = webAppChanged.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml2);\n\t\t\tSystem.out.println(DiceHelper.diceCoefficientOptimized(outHtml1, outHtml2));\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestWhenCssSelectorFails {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver = Utility.ini(FilePath);\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenEnteringValidXpath(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tdriver.get(\"https://developer.salesforce.com/docs/component-library/bundle/lightning:textarea/example\");\n\t\t\t//giving incorrect xpath\n\t\t\tWebElement element = driver.findElement(By.xpath(\"/html/body/div[5]/div[1]/div[2]/div/div/div/div/div[1]/div/div[4]/div/div[1]/lightning-textarea[1]/div/textarea\"));\n\t\t\telement.click();\n\t\t\telement.sendKeys(\"hello\");\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e);\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenEneteringCssSelector (String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tdriver.get(\"https://developer.salesforce.com/docs/component-library/bundle/lightning:textarea/example\");\n\t\t\t//giving incorrect xpath\n\t\t\tWebElement element = driver.findElement(By.xpath(\"/html/body/div[5]/div[1]/div[2]/div/div/div/div/div[1]/div/div[4]/div/div[1]/lightning-textarea[1]/div/textarea\"));\n\t\t\telement.click();\n\t\t\telement.sendKeys(\"hello\");\n\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e);\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n//\t\tdriver.quit();\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestWhenXpathFails {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenEnteringXpath(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tdriver.get(\"https://archive.nytimes.com/www.nytimes.com/interactive/2013/05/25/sunday-review/corporate-taxes.html\");\n\t\t\t//giving incorrect xpath\n\t\t\tWebElement element = driver.findElement(By.cssSelector(\"interactiveFreeFormMain > div > div.g-graphic > svg:nth-child(3) > g > g.g-sector > g:nth-child(2) > g.g-sector-company > circle:nth-child(8)\"));\n\t\t\telement.click();\n\t\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e);\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\n\n\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.awt.*;\n\nimport org.openqa.selenium.PageLoadStrategy;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.edge.EdgeDriver;\nimport org.openqa.selenium.edge.EdgeOptions;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\n\nimport infosys.ivs.innovation.selfdiagnostic.EnrichedRemoteWebDriver;\nimport infosys.ivs.innovation.selfdiagnostic.ConfigurationManager;\n\n//import infosys.ivs.innovation.selfdiagnostic.EnrichedRemoteWebDriver;\n\npublic class Utility {\n\t\n\tpublic static WebDriver ini(String FilePath) throws MalformedURLException {\n\n\t\n\t\t\tSystem.setProperty(\"webdriver.edge.driver\", \"D:\\\\SeleniumTest\\\\new\\\\msedgedriver.exe\");\n\t\t\tDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\n\t\t\tEdgeOptions options = new EdgeOptions();\n\t\t//\tArrayList<String> extensionList=new ArrayList<String>();\n\t\t\t\tString extensionLocation=\"D:\\\\MLTOOLSFORDEVOPS\\\\version2.1.0\\\\codebase\\\\web extensions\\\\CombinedExtension\\\\CombinedExtension.crx\";\n\t\t\t\t\n\t\t  \n\t\t          EdgeOptions op=new EdgeOptions();\n\t\t          op.addExtensions(new File(extensionLocation));\n\t\t          DesiredCapabilities capabilities = new DesiredCapabilities();\n\t\t             capabilities.setCapability(EdgeOptions.CAPABILITY, op);\n\t\t             op.merge(capabilities);       \n\t\t          WebDriver driver = new EdgeDriver(op);\n\t\t\treturn driver;\n\t\t\t\n\t\t\n\n\t}\n\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class WhereXpathIsNotAccessibleBySelenium {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"http://10.217.10.245:3000/mldevops/aprioriassociations/vis\");\n//\t        Thread.sleep(10000);\n\t\t\t// Test to check the usage of cosine similiarity in the server.\n\t\t\t// even when the dias score is low due to high similiarity in the cosine\n\t\t\t// score the element was found correctly and Accept reject popover will be shown\n\n\t\t\t// Location strategy is by inner Text\n\n\t\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"ajaj\");\n\t\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Infy@12345\");\n\t\t\tdriver.findElements(By.className(\"btn\")).get(2).click();\n\t\t\tdriver.findElements(By.xpath(\"//*[@id=\\\"chart\\\"]/svg/g/g[9]/text/textPath\")).get(0).click();\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n//\t   \n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\nimport org.testng.annotations.*;\n\npublic class WhereXpathIsNotAccessibleBySeleniumInDummyWebApplication {\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tThread.sleep(2000);\n\t\t\tdriver.findElement(By.id(\"xpathNotAccessible\")).click();\n\t\t\tThread.sleep(10000);\n\t\t\tWebElement input1 = driver\n\t\t\t\t\t.findElement(By.xpath(\"/html/body/app-root/app-xpath-not-accessible/div/svg/circle[188]\"));\n\t\t\tThread.sleep(10000);\n\t\t\tString input1String = input1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(\"first : \" + input1String);\n\t\t\tSystem.out.println(\"Path not found \");\n\t\t\tThread.sleep(2000);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t\t// assertEquals(Score>0.50, true);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLoginMulti(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tThread.sleep(2000);\n\t\t\tdriver.findElement(By.id(\"xpathNotAccessible\")).click();\n\t\t\tThread.sleep(1000);\n\t\t\tWebElement input1 = driver\n\t\t\t\t\t.findElements(By.xpath(\"/html/body/app-root/app-xpath-not-accessible/div/svg/circle[188]\")).get(0);\n\t\t\tString input1String = input1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(\"first : \" + input1String);\n\t\t\tSystem.out.println(\"Path not found \");\n\t\t\tThread.sleep(2000);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage base;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Properties;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.logging.LogEntries;\nimport org.openqa.selenium.logging.LogEntry;\nimport org.openqa.selenium.logging.LogType;\nimport org.openqa.selenium.logging.Logs;\nimport org.testng.ITestResult;\nimport com.relevantcodes.extentreports.ExtentReports;\nimport com.relevantcodes.extentreports.ExtentTest;\npublic class Configurations {\n\tpublic static ExtentReports extent;\n\tpublic static ExtentTest logger;\n\tpublic static Logger log = LogManager.getLogger(Configurations.class.getName());\n\tLogs logs;\n\tLogEntries logEntries;\n\tPrintWriter writer;\n\tpublic WebDriver launchWebsite(String url, String Browser) throws InterruptedException {\n\t\tWebDriver driver = null;\n\t\tif (Browser.equalsIgnoreCase(\"firefox\")) {\n\t\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Drivers/geckodriver\");\n\t\t\tdriver = new FirefoxDriver();\n\t\t} else if (Browser.equalsIgnoreCase(\"chrome\")) {\n\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\t\tdriver = new ChromeDriver();\n\t\t}\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\tdriver.get(url);\n\t\tdriver.manage().window().fullscreen();\n\t\tThread.sleep(1000);\n\t\tif (condition) {\n\t\t}\n\t\treturn driver;\n\t}\n\tpublic Properties getProp() throws Exception {\n\t\tProperties prop = new Properties();\n\t\tInputStream stream = new FileInputStream(\"src/main/java/pageObject/object.properties\");\n\t\tprop.load(stream);\n\t\treturn prop;\n\t}\n\tpublic String TakeSnapshot(WebDriver driver, String pictureName) throws IOException {\n\t\tFile src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n\t\tString Destination = pictureName + \".png\";\n\t\tFile FinalDestination = new File(\"Snapshots/\" + Destination);\n\t\tFileUtils.copyFile(src, FinalDestination);\n\t\treturn Destination;\n\t}\n\tpublic int randomNumbers(int min, int max) {\n\t\tRandom r = new Random();\n\t\tint Low = min;\n\t\tint High = max;\n\t\tint Result = r.nextInt(High - Low) + Low;\n\t\treturn Result;\n\t}\n\tpublic void getConsoleLogs(WebDriver driver1, ITestResult result) throws Throwable, Throwable {\n\t\tlogs = driver1.manage().logs();\n\t\tlogEntries = logs.get(LogType.BROWSER);\n\t\twriter = new PrintWriter(\"Snapshots/\" + result.getName() + \".txt\", \"UTF-8\");\n\t\tfor (LogEntry logEntry : logEntries) {\n\t\t\twriter.println(\"Console log found in Test- \" + result.getName());\n\t\t\twriter.println(\"__________________________________________________________\");\n\t\t\tif (logEntry.getMessage().toLowerCase().contains(\"error\")) {\n\t\t\t\twriter.println(\"Error Message in Console:\" + logEntry.getMessage());\n\t\t\t} else if (logEntry.getMessage().toLowerCase().contains(\"warning\")) {\n\t\t\t\twriter.println(\"Warning Message in Console:\" + logEntry.getMessage());\n\t\t\t} else {\n\t\t\t\twriter.println(\"Information Message in Console:\" + logEntry.getMessage());\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage config;\nimport org.testng.annotations.AfterSuite;\nimport org.testng.annotations.BeforeSuite;\nimport com.relevantcodes.extentreports.ExtentReports;\nimport base.Configurations;\npublic class testConfig extends Configurations {\n\t@BeforeSuite(groups = { \"Group1\", \"Group1\"})\n\tpublic void setExtent() {\n\t\textent = new ExtentReports(\"Snapshots/index.html\", true);\n\t\textent.addSystemInfo(\"Host Name\", \"Hatem Mac\");\n\t\textent.addSystemInfo(\"User Name\", \"Hatem Automation\");\n\t\textent.addSystemInfo(\"Enviroment\", \"QA Department\");\n\t}\n\t@AfterSuite(groups = { \"Regression\", \"Signup\", \"E2E\", \"Pricing\" })\n\tpublic void endReport() {\n\t\textent.flush();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage pageObject;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\npublic class HomePageElements {\n\tWebDriver driver;\n\tpublic HomePageElements(WebDriver driver) {\n\t\tthis.driver = driver;\n\t\tPageFactory.initElements(driver, this);\n\t}\n\t@FindBy(xpath = \"xpath\")\n\tWebElement elementName;\n\tpublic WebElement elementName() {\n\t\treturn elementName;\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage actions;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\npublic class Slider {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\t\tdriver.manage().window().fullscreen();\n\t\tint size = driver.findElements(By.tagName(\"iframe\")).size();\n\t\tSystem.out.println(size);\n\t\tfor (int i = 1 ; i< size ; i++) {\n\t\t\tdriver.switchTo().frame(i);\n\t\t\tSystem.out.println(driver.findElements(By.id(\"gallery\")).size());\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage alerts;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\npublic class Alerts {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\t\tdriver.findElement(By.name(\"cusid\")).sendKeys(\"Hatem\");\n\t\tdriver.findElement(By.name(\"submit\")).click();\n\t\tdriver.switchTo().alert().dismiss();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage capabilities;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.CapabilityType;\npublic class SeleniumCapabilities {\n\tpublic static void main(String[] args) {\n\t\tChromeOptions options = new ChromeOptions();\n\t\toptions.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n\t\toptions.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);\n\t\toptions.addArguments(\"--start-fullscreen\");\n        options.addArguments(\"--incognito\");\n        options.addArguments(\"--mute-audio\");\n        System.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver(options);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage consoleLogs;\nimport java.io.PrintWriter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.logging.LogEntries;\nimport org.openqa.selenium.logging.LogEntry;\nimport org.openqa.selenium.logging.LogType;\nimport org.openqa.selenium.logging.Logs;\nimport org.testng.ITestResult;\npublic class Get_onsole_Logs {\n\tLogs logs;\n\tLogEntries logEntries;\n\tPrintWriter writer;\n\tpublic void getConsoleLogs(WebDriver driver, ITestResult result) throws Throwable, Throwable {\n\t\tlogs = driver.manage().logs();\n\t\tlogEntries = logs.get(LogType.BROWSER);\n\t\twriter = new PrintWriter(\"Snapshots/\" + result.getName() + \".txt\", \"UTF-8\");\n\t\tfor (LogEntry logEntry : logEntries) {\n\t\t\twriter.println(\"Console log found in Test- \" + result.getName());\n\t\t\twriter.println(\"__________________________________________________________\");\n\t\t\tif (logEntry.getMessage().toLowerCase().contains(\"error\")) {\n\t\t\t\twriter.println(\"Error Message in Console:\" + logEntry.getMessage());\n\t\t\t} else if (logEntry.getMessage().toLowerCase().contains(\"warning\")) {\n\t\t\t\twriter.println(\"Warning Message in Console:\" + logEntry.getMessage());\n\t\t\t} else {\n\t\t\t\twriter.println(\"Information Message in Console:\" + logEntry.getMessage());\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage excelSheet;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\npublic class ParameterizeTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"path\");\n\t\tXls_Reader reader = new Xls_Reader(\"excelpath\");\n\t\tint rowCount = reader.getRowCount(\"RegTestData\");\n\t\treader.addColumn(\"RegTestData\", \"Status\");\n\t\tfor(int rowNum = 2; rowNum<=rowCount; rowNum++){\n\t\t\tSystem.out.println(\"=====\");\n\t\t\tString firstName = reader.getCellData(\"RegTestData\", \"firstname\", rowNum);\n\t\t\tSystem.out.println(firstName);\n\t\t\tString lastName = reader.getCellData(\"RegTestData\", \"lastname\", rowNum);\n\t\t\tSystem.out.println(lastName);\n\t\t\tString address1 = reader.getCellData(\"RegTestData\", \"address1\", rowNum);\n\t\t\tSystem.out.println(address1);\n\t\t\tString address2 = reader.getCellData(\"RegTestData\", \"address2\", rowNum);\n\t\t\tSystem.out.println(address2);\n\t\t\tString city = reader.getCellData(\"RegTestData\", \"city\", rowNum);\n\t\t\tSystem.out.println(city);\n\t\t\tString state = reader.getCellData(\"RegTestData\", \"state\", rowNum);\n\t\t\tSystem.out.println(state);\n\t\t\tString zipCode = reader.getCellData(\"RegTestData\", \"zipcode\", rowNum);\n\t\t\tSystem.out.println(zipCode);\n\t\t\tString emailAddress = reader.getCellData(\"RegTestData\", \"emailaddress\", rowNum);\n\t\t\tSystem.out.println(emailAddress);\n\t\t\tselect.selectByVisibleText(state);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage extentReport;\nimport org.testng.ITestResult;\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.Test;\nimport base.Configurations;\npublic class Extent_Report extends Configurations {\n\t@Test\n\tpublic void Testcase1() {\n\t\tlogger = extent.startTest(\"Test case name that will appear in the report\");\n\t}\n\t@AfterMethod(alwaysRun = true)\n\tpublic void closeDriver(ITestResult result) throws Throwable {\n\t\tif (result.getStatus() == ITestResult.FAILURE) {\n\t\t} else if (result.getStatus() == ITestResult.SKIP) {\n\t\t} else {\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage Frames;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\npublic class HandleFrames {\n\tWebDriver driver;\n\tpublic void switchToFrameByElement(By by) {\n\t\tint numberOfFrames = driver.findElements(By.tagName(\"iframe\")).size();\n\t\tfor (int i = 0; i < numberOfFrames; i++) {\n\t\t\tdriver.switchTo().frame(i);\n\t\t\tif (driver.findElements(by).size() > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage javaScriptExecuter;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\npublic class JavascriptMethods {\n\tpublic static void main(String[] args) {\n\t}\n\tpublic static void flash(WebElement element, WebDriver driver) {\n        JavascriptExecutor js = ((JavascriptExecutor) driver);\n        String bgcolor  = element.getCssValue(\"backgroundColor\");\n        for (int i = 0; i <  10; i++) {\n        }\n    }\n    public static void changeColor(String color, WebElement element, WebDriver driver) {\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n        js.executeScript(\"arguments[0].style.backgroundColor = '\"+color+\"'\",  element);\n        try {\n            Thread.sleep(20);\n        }  catch (InterruptedException e) {\n        }\n     }\n    public static void drawBorder(WebElement element, WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"arguments[0].style.border='3px solid red'\", element);\n    }\n    public static void generateAlert(WebDriver driver, String message){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"alert('\"+message+\"')\");\n    }\n    public static void clickElementByJS(WebElement element, WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"arguments[0].click();\", element);\n    }\n    public static void refreshBrowserByJS(WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"history.go(0)\");\n    }\n    public static String getTitleByJS(WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tString title = js.executeScript(\"return document.title;\").toString();\n    \treturn title;\n    }\n    public static String getPageInnerText(WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tString pageText = js.executeScript(\"return document.documentElement.innerText;\").toString();\n    \treturn pageText;\n    }\n    public static void scrollPageDown(WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"window.scrollTo(0,document.body.scrollHeight)\");\n    }\n    public static void scrollIntoView(WebElement element, WebDriver driver){\n    \tJavascriptExecutor js = ((JavascriptExecutor) driver);\n    \tjs.executeScript(\"arguments[0].scrollIntoView(true);\", element);\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage keyBoard;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.Test;\npublic class KeyBoardActions {\n\tWebDriver driver;\n\t@Test\n\tpublic void keyboard() {\n\t\tString newTap = Keys.chord(Keys.COMMAND,Keys.SHIFT,Keys.ENTER);\n\t\tdriver.findElement(By.xpath(\"\")).sendKeys(newTap);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage sauceLab;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.Test;\npublic class SauceLab {\n\tpublic static final String USERNAME = \"\";\n\tpublic static final String ACCESS_KEY = \"\";\n\tWebDriver driver;\n\t@Test\n\tpublic void testWizardOnEdge() throws MalformedURLException, InterruptedException {\n\t\tDesiredCapabilities caps = DesiredCapabilities.firefox();\n\t\tcaps.setCapability(\"platform\", \"Windows 10\");\n\t\tcaps.setCapability(\"version\", \"49.0\");\n\t\tdriver = new RemoteWebDriver(new URL(URL), caps);\n\t\tdriver.get(\"URL\");\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage scrollDown;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\npublic class ScrollDown {\n\tWebDriver driver;\n\tpublic void scrollDown () {\n\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\tjs.executeScript(\"window.scrollBy(0,1000)\");\n\t\tWebElement Element = driver.findElement(By.linkText(\"Linux\"));\n\t\tjs.executeScript(\"arguments[0].scrollIntoView();\", Element);\n\t\t js.executeScript(\"window.scrollTo(0, document.body.scrollHeight)\");\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage SeleniumSessions;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\npublic class AlertPopUpHandle {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");\t\n\t\tThread.sleep(5000);\n\t\tAlert alert = driver.switchTo().alert();\n\t\tSystem.out.println(alert.getText());\n\t\tString text = alert.getText();\n\t\tif(text.equals(\"Please enter a valid user name\")){\n\t\t\tSystem.out.println(\"correct alert messg\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"in-correct alert messg\");\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage SeleniumSessions;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\npublic class CalendarSelectTest {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");\n\t\tdriver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);\n\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n\t\tdriver.findElement(By.name(\"username\")).sendKeys(\"naveenk\");\n\t\tdriver.findElement(By.name(\"password\")).sendKeys(\"test@123\");\n\t\tThread.sleep(3000);\n\t\tdriver.switchTo().frame(\"mainpanel\");\n\t\tString date = \"32-May-2017\";\n\t\tString day = dateArr[0];\n\t\tString month = dateArr[1];\n\t\tString year = dateArr[2];\n\t\tSelect select = new Select(driver.findElement(By.name(\"slctMonth\")));\n\t\tselect.selectByVisibleText(month);\n\t\tSelect select1 = new Select(driver.findElement(By.name(\"slctYear\")));\n\t\tselect1.selectByVisibleText(year);\n\t\tString afterXpath = \"]/td[\";\n\t\tfinal int totalWeekDays = 7;\n\t\tboolean flag = false;\n\t\tString dayVal = null;\n\t\tfor(int rowNum=2; rowNum<=7; rowNum++){\n\t\t\tfor(int colNum = 1; colNum<=totalWeekDays; colNum++){\n\t\t\t\ttry{\n\t\t\t    dayVal =driver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+\"]\")).getText();\n\t\t\t\t}catch (NoSuchElementException e){\n\t\t\t\t\tSystem.out.println(\"Please enter a correct date value\");\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(dayVal);\n\t\t\t\tif(dayVal.equals(day)){\n\t\t\t\t\tdriver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+\"]\")).click();\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage base;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Properties;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.logging.LogEntries;\nimport org.openqa.selenium.logging.LogEntry;\nimport org.openqa.selenium.logging.LogType;\nimport org.openqa.selenium.logging.Logs;\nimport org.testng.ITestResult;\nimport com.relevantcodes.extentreports.ExtentReports;\nimport com.relevantcodes.extentreports.ExtentTest;\npublic class Configurations {\n\tpublic static ExtentReports extent;\n\tpublic static ExtentTest logger;\n\tpublic static Logger log = LogManager.getLogger(Configurations.class.getName());\n\tLogs logs;\n\tLogEntries logEntries;\n\tPrintWriter writer;\n\tpublic WebDriver launchWebsite(String url, String Browser) throws InterruptedException {\n\t\tWebDriver driver = null;\n\t\tif (Browser.equalsIgnoreCase(\"firefox\")) {\n\t\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Drivers/geckodriver\");\n\t\t\tdriver = new FirefoxDriver();\n\t\t} else if (Browser.equalsIgnoreCase(\"chrome\")) {\n\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\t\tdriver = new ChromeDriver();\n\t\t}\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\tdriver.get(url);\n\t\tdriver.manage().window().fullscreen();\n\t\tThread.sleep(1000);\n\t\tif (condition) {\n\t\t}\n\t\treturn driver;\n\t}\n\tpublic Properties getProp() throws Exception {\n\t\tProperties prop = new Properties();\n\t\tInputStream stream = new FileInputStream(\"src/main/java/pageObject/object.properties\");\n\t\tprop.load(stream);\n\t\treturn prop;\n\t}\n\tpublic String TakeSnapshot(WebDriver driver, String pictureName) throws IOException {\n\t\tFile src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n\t\tString Destination = pictureName + \".png\";\n\t\tFile FinalDestination = new File(\"Snapshots/\" + Destination);\n\t\tFileUtils.copyFile(src, FinalDestination);\n\t\treturn Destination;\n\t}\n\tpublic int randomNumbers(int min, int max) {\n\t\tRandom r = new Random();\n\t\tint Low = min;\n\t\tint High = max;\n\t\tint Result = r.nextInt(High - Low) + Low;\n\t\treturn Result;\n\t}\n\tpublic void getConsoleLogs(WebDriver driver1, ITestResult result) throws Throwable, Throwable {\n\t\tlogs = driver1.manage().logs();\n\t\tlogEntries = logs.get(LogType.BROWSER);\n\t\twriter = new PrintWriter(\"Snapshots/\" + result.getName() + \".txt\", \"UTF-8\");\n\t\tfor (LogEntry logEntry : logEntries) {\n\t\t\twriter.println(\"Console log found in Test- \" + result.getName());\n\t\t\twriter.println(\"__________________________________________________________\");\n\t\t\tif (logEntry.getMessage().toLowerCase().contains(\"error\")) {\n\t\t\t\twriter.println(\"Error Message in Console:\" + logEntry.getMessage());\n\t\t\t} else if (logEntry.getMessage().toLowerCase().contains(\"warning\")) {\n\t\t\t\twriter.println(\"Warning Message in Console:\" + logEntry.getMessage());\n\t\t\t} else {\n\t\t\t\twriter.println(\"Information Message in Console:\" + logEntry.getMessage());\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage config;\nimport org.testng.annotations.AfterSuite;\nimport org.testng.annotations.BeforeSuite;\nimport com.relevantcodes.extentreports.ExtentReports;\nimport base.Configurations;\npublic class testConfig extends Configurations {\n\t@BeforeSuite(groups = { \"Group1\", \"Group1\"})\n\tpublic void setExtent() {\n\t\textent = new ExtentReports(\"Snapshots/index.html\", true);\n\t\textent.addSystemInfo(\"Host Name\", \"Hatem Mac\");\n\t\textent.addSystemInfo(\"User Name\", \"Hatem Automation\");\n\t\textent.addSystemInfo(\"Enviroment\", \"QA Department\");\n\t}\n\t@AfterSuite(groups = { \"Regression\", \"Signup\", \"E2E\", \"Pricing\" })\n\tpublic void endReport() {\n\t\textent.flush();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage pageObject;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\npublic class HomePageElements {\n\tWebDriver driver;\n\tpublic HomePageElements(WebDriver driver) {\n\t\tthis.driver = driver;\n\t\tPageFactory.initElements(driver, this);\n\t}\n\t@FindBy(xpath = \"xpath\")\n\tWebElement elementName;\n\tpublic WebElement elementName() {\n\t\treturn elementName;\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage actions;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\npublic class Slider {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\t\tdriver.manage().window().fullscreen();\n\t\tint size = driver.findElements(By.tagName(\"iframe\")).size();\n\t\tSystem.out.println(size);\n\t\tfor (int i = 1 ; i< size ; i++) {\n\t\t\tdriver.switchTo().frame(i);\n\t\t\tSystem.out.println(driver.findElements(By.id(\"gallery\")).size());\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage alerts;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\npublic class Alerts {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver();\n\t\tdriver.findElement(By.name(\"cusid\")).sendKeys(\"Hatem\");\n\t\tdriver.findElement(By.name(\"submit\")).click();\n\t\tdriver.switchTo().alert().dismiss();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage capabilities;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.CapabilityType;\npublic class SeleniumCapabilities {\n\tpublic static void main(String[] args) {\n\t\tChromeOptions options = new ChromeOptions();\n\t\toptions.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n\t\toptions.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);\n\t\toptions.addArguments(\"--start-fullscreen\");\n        options.addArguments(\"--incognito\");\n        options.addArguments(\"--mute-audio\");\n        System.setProperty(\"webdriver.chrome.driver\", \"Drivers/chromedriver\");\n\t\tWebDriver driver = new ChromeDriver(options);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage consoleLogs;\nimport java.io.PrintWriter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.logging.LogEntries;\nimport org.openqa.selenium.logging.LogEntry;\nimport org.openqa.selenium.logging.LogType;\nimport org.openqa.selenium.logging.Logs;\nimport org.testng.ITestResult;\npublic class Get_onsole_Logs {\n\tLogs logs;\n\tLogEntries logEntries;\n\tPrintWriter writer;\n\tpublic void getConsoleLogs(WebDriver driver, ITestResult result) throws Throwable, Throwable {\n\t\tlogs = driver.manage().logs();\n\t\tlogEntries = logs.get(LogType.BROWSER);\n\t\twriter = new PrintWriter(\"Snapshots/\" + result.getName() + \".txt\", \"UTF-8\");\n\t\tfor (LogEntry logEntry : logEntries) {\n\t\t\twriter.println(\"Console log found in Test- \" + result.getName());\n\t\t\twriter.println(\"__________________________________________________________\");\n\t\t\tif (logEntry.getMessage().toLowerCase().contains(\"error\")) {\n\t\t\t\twriter.println(\"Error Message in Console:\" + logEntry.getMessage());\n\t\t\t} else if (logEntry.getMessage().toLowerCase().contains(\"warning\")) {\n\t\t\t\twriter.println(\"Warning Message in Console:\" + logEntry.getMessage());\n\t\t\t} else {\n\t\t\t\twriter.println(\"Information Message in Console:\" + logEntry.getMessage());\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage excelSheet;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\npublic class ParameterizeTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"path\");\n\t\tXls_Reader reader = new Xls_Reader(\"excelpath\");\n\t\tint rowCount = reader.getRowCount(\"RegTestData\");\n\t\treader.addColumn(\"RegTestData\", \"Status\");\n\t\tfor(int rowNum = 2; rowNum<=rowCount; rowNum++){\n\t\t\tSystem.out.println(\"=====\");\n\t\t\tString firstName = reader.getCellData(\"RegTestData\", \"firstname\", rowNum);\n\t\t\tSystem.out.println(firstName);\n\t\t\tString lastName = reader.getCellData(\"RegTestData\", \"lastname\", rowNum);\n\t\t\tSystem.out.println(lastName);\n\t\t\tString address1 = reader.getCellData(\"RegTestData\", \"address1\", rowNum);\n\t\t\tSystem.out.println(address1);\n\t\t\tString address2 = reader.getCellData(\"RegTestData\", \"address2\", rowNum);\n\t\t\tSystem.out.println(address2);\n\t\t\tString city = reader.getCellData(\"RegTestData\", \"city\", rowNum);\n\t\t\tSystem.out.println(city);\n\t\t\tString state = reader.getCellData(\"RegTestData\", \"state\", rowNum);\n\t\t\tSystem.out.println(state);\n\t\t\tString zipCode = reader.getCellData(\"RegTestData\", \"zipcode\", rowNum);\n\t\t\tSystem.out.println(zipCode);\n\t\t\tString emailAddress = reader.getCellData(\"RegTestData\", \"emailaddress\", rowNum);\n\t\t\tSystem.out.println(emailAddress);\n\t\t\tselect.selectByVisibleText(state);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage Frames;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\npublic class HandleFrames {\n\tWebDriver driver;\n\tpublic void switchToFrameByElement(By by) {\n\t\tint numberOfFrames = driver.findElements(By.tagName(\"iframe\")).size();\n\t\tfor (int i = 0; i < numberOfFrames; i++) {\n\t\t\tdriver.switchTo().frame(i);\n\t\t\tif (driver.findElements(by).size() > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage javaScriptExecuter;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class JavascriptMethods {\n\tpublic static void main(String[] args) {\n\t}\n\n\tpublic static void flash(WebElement element, WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tString bgcolor = element.getCssValue(\"backgroundColor\");\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t}\n\t}\n\n\tpublic static void changeColor(String color, WebElement element, WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"arguments[0].style.backgroundColor = '\" + color + \"'\", element);\n\t\ttry {\n\t\t\tThread.sleep(20);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t}\n\n\tpublic static void drawBorder(WebElement element, WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"arguments[0].style.border='3px solid red'\", element);\n\t}\n\n\tpublic static void generateAlert(WebDriver driver, String message) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"alert('\" + message + \"')\");\n\t}\n\n\tpublic static void clickElementByJS(WebElement element, WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"arguments[0].click();\", element);\n\t}\n\n\tpublic static void refreshBrowserByJS(WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"history.go(0)\");\n\t}\n\n\tpublic static String getTitleByJS(WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tString title = js.executeScript(\"return document.title;\").toString();\n\t\treturn title;\n\t}\n\n\tpublic static String getPageInnerText(WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tString pageText = js.executeScript(\"return document.documentElement.innerText;\").toString();\n\t\treturn pageText;\n\t}\n\n\tpublic static void scrollPageDown(WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"window.scrollTo(0,document.body.scrollHeight)\");\n\t}\n\n\tpublic static void scrollIntoView(WebElement element, WebDriver driver) {\n\t\tJavascriptExecutor js = ((JavascriptExecutor) driver);\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", element);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage keyBoard;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.Test;\npublic class KeyBoardActions {\n\tWebDriver driver;\n\t@Test\n\tpublic void keyboard() {\n\t\tString newTap = Keys.chord(Keys.COMMAND,Keys.SHIFT,Keys.ENTER);\n\t\tdriver.findElement(By.xpath(\"\")).sendKeys(newTap);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage sauceLab;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.Test;\npublic class SauceLab {\n\tpublic static final String USERNAME = \"\";\n\tpublic static final String ACCESS_KEY = \"\";\n\tWebDriver driver;\n\t@Test\n\tpublic void testWizardOnEdge() throws MalformedURLException, InterruptedException {\n\t\tDesiredCapabilities caps = DesiredCapabilities.firefox();\n\t\tcaps.setCapability(\"platform\", \"Windows 10\");\n\t\tcaps.setCapability(\"version\", \"49.0\");\n\t\tdriver = new RemoteWebDriver(new URL(URL), caps);\n\t\tdriver.get(\"URL\");\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage scrollDown;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\npublic class ScrollDown {\n\tWebDriver driver;\n\tpublic void scrollDown () {\n\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\tjs.executeScript(\"window.scrollBy(0,1000)\");\n\t\tWebElement Element = driver.findElement(By.linkText(\"Linux\"));\n\t\tjs.executeScript(\"arguments[0].scrollIntoView();\", Element);\n\t\t js.executeScript(\"window.scrollTo(0, document.body.scrollHeight)\");\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage SeleniumSessions;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\npublic class AlertPopUpHandle {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");\t\n\t\tThread.sleep(5000);\n\t\tAlert alert = driver.switchTo().alert();\n\t\tSystem.out.println(alert.getText());\n\t\tString text = alert.getText();\n\t\tif(text.equals(\"Please enter a valid user name\")){\n\t\t\tSystem.out.println(\"correct alert messg\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"in-correct alert messg\");\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage SeleniumSessions;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class CalendarSelectTest {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");\n\t\tdriver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);\n\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n\t\tdriver.findElement(By.name(\"username\")).sendKeys(\"naveenk\");\n\t\tdriver.findElement(By.name(\"password\")).sendKeys(\"test@123\");\n\t\tThread.sleep(3000);\n\t\tdriver.switchTo().frame(\"mainpanel\");\n\t\tString date = \"32-May-2017\";\n\t\tString day = dateArr[0];\n\t\tString month = dateArr[1];\n\t\tString year = dateArr[2];\n\t\tSelect select = new Select(driver.findElement(By.name(\"slctMonth\")));\n\t\tselect.selectByVisibleText(month);\n\t\tSelect select1 = new Select(driver.findElement(By.name(\"slctYear\")));\n\t\tselect1.selectByVisibleText(year);\n\t\tString afterXpath = \"]/td[\";\n\t\tfinal int totalWeekDays = 7;\n\t\tboolean flag = false;\n\t\tString dayVal = null;\n\t\tfor (int rowNum = 2; rowNum <= 7; rowNum++) {\n\t\t\tfor (int colNum = 1; colNum <= totalWeekDays; colNum++) {\n\t\t\t\ttry {\n\t\t\t\t\tdayVal = driver.findElement(By.xpath(beforeXpath + rowNum + afterXpath + colNum + \"]\")).getText();\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\tSystem.out.println(\"Please enter a correct date value\");\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(dayVal);\n\t\t\t\tif (dayVal.equals(day)) {\n\t\t\t\t\tdriver.findElement(By.xpath(beforeXpath + rowNum + afterXpath + colNum + \"]\")).click();\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}}dependencies{\n\n\ttestCompile group:'org.testng',name:'testng',version:'7.1.0'\n\tcompile group:'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'\n\n\n\ttestCompile(\"io.github.bonigarcia:webdrivermanager:3.8.1\")\n\n}\n\n\ttest\n\n\t{ //this is the gradle task to be executed\n\n\tuseTestNG() { //Tells Gradle to use TestNG\n    }\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage com.testnepal.utils;\n\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\n\nimport com.testnepal.driver.DriverManager;\n\n/**\n * Utility to take base64 screenshot.\n */\npublic final class ScreenshotUtils {\n\t\n\t/**\n\t * Private constructor to avoid external instantiation\n\t */\n\tprivate ScreenshotUtils () {}\n\t\n\t/**\n\t * Captures screenshot of the current page, constructs a base64 string from the image and return to the caller.\n\t * There is no temporary screenshot image generated here. \n\t */\n\tpublic static String getBase64Image() {\n\t\treturn ((TakesScreenshot)DriverManager.getDriver()).getScreenshotAs(OutputType.BASE64);\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DemoTest {\n\t\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t  driver = Utility.ini(FilePath);\n\t}\n\n\t  @Test\n\t  public void testLogin()  throws Exception {\n\t\t  driver.get(\"https://accounts.google.com/signup/v2\");\n\n\t//location strategy is by Id\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tjs.executeScript(\"document.getElementById('firstName').id='first_Name'\");\n\n\t\tjs.executeScript(\"document.getElementById('lastName').name='Last_Name'\");\n\t    WebElement first = driver.findElements(By.id(\"firstName\")).get(0);\n\t    first.clear();\n\t    first.sendKeys(\"John\");\n\t    \n\t    \n\t//Location strategy is by Name\n\t    \n\t    WebElement lastName = driver.findElements(By.name(\"lastName\")).get(0);\n\t    lastName.clear();\n\t    lastName.click();\n\t    lastName.sendKeys(\"Doe\");\n\t    \n\t    \n\t    //Location Strategy by Css selector\n\t    \n\t    \n\t    driver.findElement(By.cssSelector(\"input[aria-label='Username']\")).sendKeys(\"John_doe\");\n\t    \n\t  //Location strategy is by relative Xpath\n\t    \n\t    driver.findElement(By.xpath(\"//*[@id='passwd']/div[1]/div/div[1]/input\")).sendKeys(\"Infy@12345\");\n\t    \n\t   //Location strategy is by Full xpath\n\t    \n\t    driver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/div[1]/div[2]/form/div[2]/div/div[1]/div[3]/div[1]/div[3]/div/div/div[1]/div/div[1]/input\")).sendKeys(\"Infy@12345\");\n\t    \n\t    //Location strategy is by inner Text\n\t    driver.findElement(By.className(\"RveJvd\")).click();\n\t  }\n\t  \n\t  \n\n\t  @AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t  }\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\n//import infosys.ivs.innovation.selfdiagnostic.LoggerFile;\n\nimport org.openqa.selenium.TimeoutException;\n\npublic class Helper {\n\n public static boolean isElementPresent(WebDriver driver, By by) {\n\t try {\n\t\t  WebElement temp = new WebDriverWait(driver,10).until(ExpectedConditions.presenceOfElementLocated(by));\n\t\t  System.out.println(temp.getAttribute(\"outerHTML\"));\n\t\t  \n\t\t driver.findElement(By.id(\"signup\"));\n\t\t return true;\n\t} catch (TimeoutException e) {\n\t\t// TODO: handle exception\n\t\tSystem.out.println(e);\n\t\t\n\t}\n\t return false;\n }\n\t\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage tests;\n\nimport org.openqa.selenium.WebDriver;\n\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\nimport org.testng.annotations.Test;\n\nimport org.testng.annotations.BeforeClass;\n\nimport org.testng.annotations.AfterClass;\n\npublic class NewTest {\n\n\tpublic WebDriver driver;\n\n\t@Test\n\n\tpublic void openMyBlog() {\n\n\t\tdriver.get(\"https://www.softwaretestingmaterial.com/\");\n\n\t}\n\n\t@BeforeClass\n\n\tpublic void beforeClass() {\n\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"D:\\\\Selenium\\\\Drivers\\\\geckodriver.exe\");\n\n\t\tdriver = new FirefoxDriver();\n\n\t}\n\n\t@AfterClass\n\n\tpublic void afterClass() {\n\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage browser;\n\nimport org.openqa.selenium.WebDriver;\n\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class BrowserSelection\n\n{\n\n\tstatic WebDriver driver;\n\n\tpublic static WebDriver UsingChrome()\n\n\t{\n\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"E:\\\\SeleniumLibs\\\\\\\\chromedriver_win32\\\\chromedriver.exe\");\n\n\t\tdriver = new ChromeDriver();\n\n\t\tdriver.manage().window().maximize();\n\n\t\treturn driver;\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage com.thoughtworks.selenium;\n\n\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.lang.reflect.Method;\nimport java.util.Optional;\nimport java.util.regex.Pattern;\n\n/**\n * Provides a base class that implements some handy functionality for Selenium testing \n */\n@Deprecated\n@SuppressWarnings(\"JavaDoc\")\npublic class SeleneseTestBase {\n\n  private static final boolean THIS_IS_WINDOWS = File.pathSeparator.equals(\";\");\n\n  private boolean captureScreenShotOnFailure = false;\n\n  /** Use this object to run all of your selenium tests */\n  protected Selenium selenium;\n\n  protected StringBuffer verificationErrors = new StringBuffer();\n\n  public SeleneseTestBase() {\n    super();\n  }\n\n  /**\n   * Calls this.setUp(null)\n   *\n   * @see #setUp(String)\n   * @throws Exception because why not\n   */\n  public void setUp() throws Exception {\n    this.setUp(null);\n  }\n\n\n  /**\n   * Calls this.setUp with the specified url and a default browser. On Windows, the default browser\n   * is *iexplore; otherwise, the default browser is *firefox.\n   *\n   * @see #setUp(String, String)\n   * @param url the baseUrl to use for your Selenium tests\n   * @throws Exception just in case\n   *\n   */\n  public void setUp(String url) throws Exception {\n    setUp(url, runtimeBrowserString());\n  }\n\n  protected String runtimeBrowserString() {\n    String defaultBrowser = System.getProperty(\"selenium.defaultBrowser\");\n    if (null != defaultBrowser && defaultBrowser.startsWith(\"${\")) {\n      defaultBrowser = null;\n    }\n    if (defaultBrowser == null) {\n      if (THIS_IS_WINDOWS) {\n        defaultBrowser = \"*iexplore\";\n      } else {\n        defaultBrowser = \"*firefox\";\n      }\n    }\n    return defaultBrowser;\n  }\n\n  /**\n   * Creates a new DefaultSelenium object and starts it using the specified baseUrl and browser\n   * string. The port is selected as follows: if the server package's RemoteControlConfiguration\n   * class is on the classpath, that class' default port is used. Otherwise, if the \"server.port\"\n   * system property is specified, that is used - failing that, the default of 4444 is used.\n   *\n   * @see #setUp(String, String, int)\n   * @param url the baseUrl for your tests\n   * @param browserString the browser to use, e.g. *firefox\n   * @throws Exception throws them all!\n   */\n  public void setUp(String url, String browserString) throws Exception {\n    setUp(url, browserString, getDefaultPort());\n  }\n\n  protected int getDefaultPort() {\n    try {\n      Class<?> c = Class.forName(\"org.openqa.selenium.server.RemoteControlConfiguration\");\n      Method getDefaultPort = c.getMethod(\"getDefaultPort\");\n      Number portNumber = (Number) getDefaultPort.invoke(null);\n      return portNumber.intValue();\n    } catch (ReflectiveOperationException | NumberFormatException e) {\n      return Integer.getInteger(\"selenium.port\", 4444);\n    }\n  }\n\n  /**\n   * Creates a new DefaultSelenium object and starts it using the specified baseUrl and browser\n   * string. The port is selected as follows: if the server package's RemoteControlConfiguration\n   * class is on the classpath, that class' default port is used. Otherwise, if the \"server.port\"\n   * system property is specified, that is used - failing that, the default of 4444 is used.\n   *\n   * @see #setUp(String, String, int)\n   * @param url the baseUrl for your tests\n   * @param browserString the browser to use, e.g. *firefox\n   * @param port the port that you want to run your tests on\n   */\n  public void setUp(String url, String browserString, int port) {\n    if (url == null) {\n      url = \"http://localhost:\" + port;\n    }\n    selenium = new DefaultSelenium(\"localhost\", port, browserString, url);\n    selenium.start();\n  }\n\n  /** Like assertTrue, but fails at the end of the test (during tearDown)\n   * @param b boolean to verify is true\n   */\n  public void verifyTrue(boolean b) {\n    try {\n      assertTrue(b);\n    } catch (Error e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** Like assertFalse, but fails at the end of the test (during tearDown)\n   * @param b boolean to verify is false\n   */\n  public void verifyFalse(boolean b) {\n    try {\n      assertFalse(b);\n    } catch (Error e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** @return  the body text of the current page */\n  public String getText() {\n    return selenium.getEval(\"this.page().bodyText()\");\n  }\n\n  /** Like assertEquals, but fails at the end of the test (during tearDown)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public void verifyEquals(Object expected, Object actual) {\n    try {\n      assertEquals(expected, actual);\n    } catch (Error e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** Like assertEquals, but fails at the end of the test (during tearDown)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public void verifyEquals(boolean expected, boolean actual) {\n    try {\n      assertEquals(Boolean.valueOf(expected), Boolean.valueOf(actual));\n    } catch (Error e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** Like JUnit's Assert.assertEquals, but knows how to compare string arrays\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertEquals(Object expected, Object actual) {\n    if (expected == null) {\n      assertTrue(\"Expected null but saw \\\"\" + actual + \"\\\" instead\", actual == null);\n    } else if (expected instanceof String && actual instanceof String) {\n      assertEquals((String) expected, (String) actual);\n    } else if (expected instanceof String && actual instanceof String[]) {\n      assertEquals((String) expected, (String[]) actual);\n    } else if (expected instanceof String && actual instanceof Number) {\n      assertEquals((String) expected, actual.toString());\n    } else if (expected instanceof Number && actual instanceof String) {\n      assertEquals(expected.toString(), (String) actual);\n    } else if (expected instanceof String[] && actual instanceof String[]) {\n      assertEquals((String[]) expected, (String[]) actual);\n    } else {\n      assertTrue(\"Expected \\\"\" + expected + \"\\\" but saw \\\"\" + actual + \"\\\" instead\",\n          expected.equals(actual));\n    }\n  }\n\n  /** Like JUnit's Assert.assertEquals, but handles \"regexp:\" strings like HTML Selenese\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertEquals(String expected, String actual) {\n    assertTrue(\"Expected \\\"\" + expected + \"\\\" but saw \\\"\" + actual + \"\\\" instead\",\n        seleniumEquals(expected, actual));\n  }\n\n  /**\n   * Like JUnit's Assert.assertEquals, but joins the string array with commas, and handles \"regexp:\"\n   * strings like HTML Selenese\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertEquals(String expected, String[] actual) {\n    assertEquals(expected, join(actual, ','));\n  }\n\n  /**\n   * Compares two strings, but handles \"regexp:\" strings like HTML Selenese\n   *\n   * @param expectedPattern expression of expected\n   * @param actual expression of actual\n   * @return true if actual matches the expectedPattern, or false otherwise\n   */\n  public static boolean seleniumEquals(String expectedPattern, String actual) {\n    if (expectedPattern == null || actual == null) {\n      return expectedPattern == null && actual == null;\n    }\n    if (actual.startsWith(\"regexp:\") || actual.startsWith(\"regex:\")\n        || actual.startsWith(\"regexpi:\") || actual.startsWith(\"regexi:\")) {\n      // swap 'em\n      String tmp = actual;\n      actual = expectedPattern;\n      expectedPattern = tmp;\n    }\n    Optional<Boolean> b;\n    b = handleRegex(\"regexp:\", expectedPattern, actual, 0);\n    if (b.isPresent()) {\n      return b.get();\n    }\n    b = handleRegex(\"regex:\", expectedPattern, actual, 0);\n    if (b.isPresent()) {\n      return b.get();\n    }\n    b = handleRegex(\"regexpi:\", expectedPattern, actual, Pattern.CASE_INSENSITIVE);\n    if (b.isPresent()) {\n      return b.get();\n    }\n    b = handleRegex(\"regexi:\", expectedPattern, actual, Pattern.CASE_INSENSITIVE);\n    if (b.isPresent()) {\n      return b.get();\n    }\n\n    if (expectedPattern.startsWith(\"exact:\")) {\n      String expectedExact = expectedPattern.replaceFirst(\"exact:\", \"\");\n      if (!expectedExact.equals(actual)) {\n        System.out.println(\"expected \" + actual + \" to match \" + expectedPattern);\n        return false;\n      }\n      return true;\n    }\n\n    String expectedGlob = expectedPattern.replaceFirst(\"glob:\", \"\");\n    expectedGlob = expectedGlob.replaceAll(\"([\\\\]\\\\[\\\\\\\\{\\\\}$\\\\(\\\\)\\\\|\\\\^\\\\+.])\", \"\\\\\\\\$1\");\n\n    expectedGlob = expectedGlob.replaceAll(\"\\\\*\", \".*\");\n    expectedGlob = expectedGlob.replaceAll(\"\\\\?\", \".\");\n    if (!Pattern.compile(expectedGlob, Pattern.DOTALL).matcher(actual).matches()) {\n      System.out.println(\"expected \\\"\" + actual + \"\\\" to match glob \\\"\" + expectedPattern\n          + \"\\\" (had transformed the glob into regexp \\\"\" + expectedGlob + \"\\\"\");\n      return false;\n    }\n    return true;\n  }\n\n  private static Optional<Boolean> handleRegex(String prefix, String expectedPattern, String actual, int flags) {\n    if (expectedPattern.startsWith(prefix)) {\n      String expectedRegEx = expectedPattern.replaceFirst(prefix, \".*\") + \".*\";\n      Pattern p = Pattern.compile(expectedRegEx, flags);\n      if (!p.matcher(actual).matches()) {\n        System.out.println(\"expected \" + actual + \" to match regexp \" + expectedPattern);\n        return Optional.of(Boolean.FALSE);\n      }\n      return Optional.of(Boolean.TRUE);\n    }\n    return Optional.empty();\n  }\n\n  /**\n   * Compares two objects, but handles \"regexp:\" strings like HTML Selenese\n   *\n   * @see #seleniumEquals(String, String)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   * @return true if actual matches the expectedPattern, or false otherwise\n   */\n  public static boolean seleniumEquals(Object expected, Object actual) {\n    if (expected == null) {\n      return actual == null;\n    }\n    if (expected instanceof String && actual instanceof String) {\n      return seleniumEquals((String) expected, (String) actual);\n    }\n    return expected.equals(actual);\n  }\n\n  /** Asserts that two string arrays have identical string contents\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertEquals(String[] expected, String[] actual) {\n    String comparisonDumpIfNotEqual = verifyEqualsAndReturnComparisonDumpIfNot(expected, actual);\n    if (comparisonDumpIfNotEqual != null) {\n      throw new AssertionError(comparisonDumpIfNotEqual);\n    }\n  }\n\n  /**\n   * Asserts that two string arrays have identical string contents (fails at the end of the test,\n   * during tearDown)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public void verifyEquals(String[] expected, String[] actual) {\n    String comparisonDumpIfNotEqual = verifyEqualsAndReturnComparisonDumpIfNot(expected, actual);\n    if (comparisonDumpIfNotEqual != null) {\n      verificationErrors.append(comparisonDumpIfNotEqual);\n    }\n  }\n\n  private static String verifyEqualsAndReturnComparisonDumpIfNot(String[] expected, String[] actual) {\n    boolean misMatch = false;\n    if (expected.length != actual.length) {\n      misMatch = true;\n    }\n    for (int j = 0; j < expected.length; j++) {\n      if (!seleniumEquals(expected[j], actual[j])) {\n        misMatch = true;\n        break;\n      }\n    }\n    if (misMatch) {\n      return \"Expected \" + stringArrayToString(expected) + \" but saw \"\n          + stringArrayToString(actual);\n    }\n    return null;\n  }\n\n  private static String stringArrayToString(String[] sa) {\n    StringBuffer sb = new StringBuffer(\"{\");\n    for (int j = 0; j < sa.length; j++) {\n      sb.append(\" \").append(\"\\\"\").append(sa[j]).append(\"\\\"\");\n    }\n    sb.append(\" }\");\n    return sb.toString();\n  }\n\n  private static String throwableToString(Throwable t) {\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    t.printStackTrace(pw);\n    return sw.toString();\n  }\n\n  public static String join(String[] sa, char c) {\n    StringBuffer sb = new StringBuffer();\n    for (int j = 0; j < sa.length; j++) {\n      sb.append(sa[j]);\n      if (j < sa.length - 1) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  /** Like assertNotEquals, but fails at the end of the test (during tearDown)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public void verifyNotEquals(Object expected, Object actual) {\n    try {\n      assertNotEquals(expected, actual);\n    } catch (AssertionError e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** Like assertNotEquals, but fails at the end of the test (during tearDown)\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public void verifyNotEquals(boolean expected, boolean actual) {\n    try {\n      assertNotEquals(Boolean.valueOf(expected), Boolean.valueOf(actual));\n    } catch (AssertionError e) {\n      verificationErrors.append(throwableToString(e));\n    }\n  }\n\n  /** Asserts that two objects are not the same (compares using .equals())\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertNotEquals(Object expected, Object actual) {\n    if (expected == null) {\n      assertFalse(\"did not expect null to be null\", actual == null);\n    } else if (expected.equals(actual)) {\n      fail(\"did not expect (\" + actual + \") to be equal to (\" + expected + \")\");\n    }\n  }\n\n  public static void fail(String message) {\n    throw new AssertionError(message);\n  }\n\n  static public void assertTrue(String message, boolean condition) {\n    if (!condition) fail(message);\n  }\n\n  static public void assertTrue(boolean condition) {\n    assertTrue(null, condition);\n  }\n\n  static public void assertFalse(String message, boolean condition) {\n    assertTrue(message, !condition);\n  }\n\n  static public void assertFalse(boolean condition) {\n    assertTrue(null, !condition);\n  }\n\n  /** Asserts that two booleans are not the same\n   * @param actual the actual object expected\n   * @param expected object that you want to compare to actual\n   */\n  public static void assertNotEquals(boolean expected, boolean actual) {\n    assertNotEquals(Boolean.valueOf(expected), Boolean.valueOf(actual));\n  }\n\n  /** Sleeps for the specified number of milliseconds\n   * @param millisecs number of\n   */\n  public void pause(int millisecs) {\n    try {\n      Thread.sleep(millisecs);\n    } catch (InterruptedException e) {}\n  }\n\n  /**\n   * Asserts that there were no verification errors during the current test, failing immediately if\n   * any are found\n   */\n  public void checkForVerificationErrors() {\n    String verificationErrorString = verificationErrors.toString();\n    clearVerificationErrors();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n\n  /** Clears out the list of verification errors */\n  public void clearVerificationErrors() {\n    verificationErrors = new StringBuffer();\n  }\n\n  /** checks for verification errors and stops the browser\n   * @throws Exception actually, just AssertionError, but someone was lazy?\n   */\n  public void tearDown() throws Exception {\n    try {\n      checkForVerificationErrors();\n    } finally {\n      if (selenium != null) {\n        selenium.stop();\n        selenium = null;\n      }\n    }\n  }\n\n  protected boolean isCaptureScreenShotOnFailure() {\n    return captureScreenShotOnFailure;\n  }\n\n  protected void setCaptureScreenShotOnFailure(boolean captureScreenShotOnFailure) {\n    this.captureScreenShotOnFailure = captureScreenShotOnFailure;\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage makemytrip;\n\nimport java.awt.AWTException;\nimport java.awt.Robot;\nimport java.awt.event.KeyEvent;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\nimport browser.BrowserSelection;\n\npublic class MakeMyTripProject {\n\n\tWebDriver driver;\n\n\t@BeforeMethod\n\tpublic void OpenBrowser() {\n\n\t\tdriver = BrowserSelection.UsingChrome();\n\n\t}\n\n\t@Test\n\tpublic void TripDetails() throws InterruptedException, AWTException {\n\n\t\tdriver.get(\"https://www.makemytrip.com/\");\n\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\tThread.sleep(5000);\n\n\t\ttry {\n\n\t\t\tdriver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sfrom\u00e2\u20ac\u2122]\")).click();\n\n\t\t\tdriver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sfrom\u00e2\u20ac\u2122]\")).clear();\n\n//driver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sfrom\u00e2\u20ac\u2122]\")).sendKeys(\"Goa\");\n\n\t\t\tThread.sleep(2000);\n\n\t\t\tList<WebElement> fromCities = driver.findElements(By.xpath(\"//ul[@id=\u00e2\u20ac\u2122ui-id-1\u00e2\u20ac\u00b2]/li/div/p/span[1]\"));\n\n\t\t\tSystem.out.println(fromCities.size() + \"\\n\");\n\n\t\t\tfor (int i = 0; i < fromCities.size(); i++) {\n\n\t\t\t\tWebElement element = fromCities.get(i);\n\n\t\t\t\tSystem.out.println(element.getAttribute(\"innerHTML\"));\n\n\t\t\t}\n\n//driver.findElement(By.xpath(\"//ul[@id=\u00e2\u20ac\u2122ui-id-1\u00e2\u20ac\u00b2]/li/div/p/span\")).click();\n\n\t\t\tdriver.findElement(By.xpath(\"//li[contains(@aria-label,\u00e2\u20ac\u2122Top Cities : Goa, India \u00e2\u20ac\u02dc)]/div/p/span[1]\"))\n\t\t\t\t\t.click();\n\n\t\t\tdriver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sTo\u00e2\u20ac\u2122]\")).click();\n\n\t\t\tdriver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sTo\u00e2\u20ac\u2122]\")).clear();\n\n//driver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__sTo\u00e2\u20ac\u2122]\")).sendKeys(\"Mumbai\");\n\n\t\t\tThread.sleep(2000);\n\n\t\t\tList<WebElement> toCities = driver.findElements(By.xpath(\"//ul[@id=\u00e2\u20ac\u2122ui-id-2\u00e2\u20ac\u00b2]/li/div/p/span[1]\"));\n\n\t\t\tSystem.out.println(toCities.size() + \"\\n\");\n\n\t\t\tfor (int i = 0; i < toCities.size(); i++) {\n\n\t\t\t\tWebElement element = toCities.get(i);\n\n\t\t\t\tSystem.out.println(element.getAttribute(\"innerHTML\"));\n\n\t\t\t}\n\n//driver.findElement(By.xpath(\"//ul[@id=\u00e2\u20ac\u2122ui-id-2\u00e2\u20ac\u00b2]/li/div/p/span\")).click();\n\n\t\t\tdriver.findElement(By.xpath(\"//ul[@id=\u00e2\u20ac\u2122ui-id-2\u00e2\u20ac\u00b2]/li[3]/div/p/span[1]\")).click();\n\n\t\t\tThread.sleep(2000);\n\n\t\t\tdriver.findElement(By.xpath(\"//input[@id=\u00e2\u20ac\u2122hp-widget__depart\u00e2\u20ac\u2122]\")).click();\n\n\t\t\tThread.sleep(2000);\n\n\t\t\tString date = \"10-OCTOBER-2018\";\n\n\t\t\tString splitter[] = date.split(\"-\");\n\n\t\t\tString month_year = splitter[1];\n\n\t\t\tString day = splitter[0];\n\n\t\t\tSystem.out.println(month_year);\n\n\t\t\tSystem.out.println(day);\n\n\t\t\tselectDate(month_year, day);\n\n\t\t\tThread.sleep(3000);\n\n\t\t\tdriver.findElement(By.xpath(\"//button[@id=\u00e2\u20ac\u2122searchBtn\u00e2\u20ac\u2122]\")).click();\n\n\t\t\tThread.sleep(5000);\n\n\t\t\tThread.sleep(2000);\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\n\t\t\tjs.executeScript(\"window.scrollBy(0,3000)\");\n\n\t\t\tThread.sleep(5000);\n\n\t\t\tdriver.findElement(By.xpath(\"//div[@id=\u00e2\u20ac\u2122aln_AI_dep\u00e2\u20ac\u2122]/span[3]\")).click();\n\n\t\t\tThread.sleep(5000);\n\n\t\t\tList<WebElement> flights = driver\n\t\t\t\t\t.findElements(By.xpath(\"//div[@class=\u00e2\u20ac\u2122top_first_part clearfix\u00e2\u20ac\u2122]/div/span/span[2]/span[1]\"));\n\n\t\t\tSystem.out.println(\"No. of Air India flight search results: \u00e2\u20ac\u201d\" + flights.size());\n\n\t\t} catch (WebDriverException e) {\n\n\t\t\tSystem.out.println(\"Exception is: \u00e2\u20ac\u201d\" + e + \"\\n\");\n\n\t\t}\n\n\t}\n\n\tpublic void selectDate(String monthyear, String Selectday) throws InterruptedException {\n\n\t\tList<WebElement> elements = driver.findElements(By.xpath(\"//div[@class=\u00e2\u20ac\u2122ui-datepicker-title\u00e2\u20ac\u2122]/span[1]\"));\n\n\t\tfor (int i = 0; i < elements.size(); i++) {\n\n\t\t\tSystem.out.println(elements.get(i).getText());\n\n//Selecting the month\n\n\t\t\tif (elements.get(i).getText().equals(monthyear)) {\n\n//Selecting the date\n\n\t\t\t\tList<WebElement> days = driver.findElements(By.xpath(\n\t\t\t\t\t\t\"//div[@class=\u00e2\u20ac\u2122ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-datepicker-multi ui-datepicker-multi-2\u00e2\u20ac\u00b2]/div[2]/table/tbody/tr/td/a\"));\n\n\t\t\t\tfor (WebElement d : days) {\n\n\t\t\t\t\tSystem.out.println(d.getText());\n\n\t\t\t\t\tif (d.getText().equals(Selectday)) {\n\n\t\t\t\t\t\td.click();\n\n\t\t\t\t\t\tThread.sleep(10000);\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdriver.findElement(By.xpath(\n\t\t\t\t\"//div[@class=\u00e2\u20ac\u2122ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-datepicker-multi ui-datepicker-multi-2\u00e2\u20ac\u00b2]/div[2]/div/a/span\"))\n\t\t\t\t.click();\n\n\t\tselectDate(monthyear, Selectday);\n\n\t}\n\n\t@AfterMethod\n\tpublic void CloseBrowser() {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage edureka;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.AfterClass;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterTest;\nimport org.testng.annotations.Test;\n\npublic class HandlingAllControls {\n\tstatic WebDriver driver;\n\n\t@Test(priority = 0)\n\tpublic void EdurekaProfile() throws InterruptedException {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:Selenium-java-edurekachromedriver_win32chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n//Put a Implicit wait, this means that any search for elements on the page could take the time the implicit wait is set for before throwing exception\n\t\tdriver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n//Launch the Edureka Website\n\t\tdriver.get(\"https://www.edureka.co/\");\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tdriver.findElement(By.linkText(\"Log In\")).click();\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tActions actions = new Actions(driver);\n\t\tactions.moveToElement(driver.findElement(By.id(\"si_popup_email\")));\n\t\tThread.sleep(2000);\n\t\tactions.click();\n\t\tactions.sendKeys(\"TestingEdureka@gmail.com\");\n\t\tThread.sleep(2000);\n\t\tactions.build().perform();\n\t\tactions.moveToElement(driver.findElement(By.id(\"si_popup_passwd\")));\n\t\tThread.sleep(2000);\n\t\tactions.click();\n\t\tactions.sendKeys(\"12345678\");\n\t\tThread.sleep(2000);\n\t\tactions.build().perform();\n\t\tactions.moveToElement(driver.findElement(By.xpath(\"//button[@class='clik_btn_log btn-block']\")));\n\t\tThread.sleep(2000);\n\t\tactions.click();\n\t\tactions.build().perform();\n\t\tdriver.findElement(By.xpath(\"//a[@class='dropdown-toggle trackButton']//img[@class='img30']\")).click();\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.xpath(\n\t\t\t\t\"//ul[@class='dropdown-menu user-menu profile-xs hidden-sm hidden-xs']//a[@class='giTrackElementHeader'][contains(text(),'My Profile')]\"))\n\t\t\t\t.click();\n\t\tThread.sleep(2000);\n\t\tWebDriverWait waitElement = new WebDriverWait(driver, 20);\n\t\twaitElement.until(ExpectedConditions.visibilityOfElementLocated(\n\t\t\t\tBy.xpath(\"//li[@class='active']//a[@data-toggle='tab'][contains(text(),'My Profile')]\")));\n\t\tdriver.findElement(By.xpath(\"//li[@class='active']//a[@data-toggle='tab'][contains(text(),'My Profile')]\"))\n\t\t\t\t.click();\n\t\tString Pagetitle = driver.getTitle();\n\t\tdriver.findElement(By.xpath(\"//div[@class='personal-details']//i[@class='icon-pr-edit']\")).click();\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.xpath(\"//input[@placeholder='Name']\")).sendKeys(\"Edureka\");\n\t\tThread.sleep(2000);\n\t\tSystem.out.println(\"b\");\n\t\tdriver.navigate().to(\"https://learning.edureka.co/my-profile\");\n\t\tThread.sleep(2000);\n\t\tSystem.out.println(\"a\");\n\t\tSystem.out.println(\"abc\");\n\t\tdriver.navigate().to(\"https://learning.edureka.co/onboarding/careerinterests\");\n\t\tThread.sleep(3000);\n\t\tSelect dropdownCurrentJob = new Select(driver.findElement(By.xpath(\"//select[@name='interestedJob']\")));\n\t\tThread.sleep(2000);\n\t\tdropdownCurrentJob.selectByVisibleText(\"Software Testing\");\n\t\tThread.sleep(2000);\n\t\tSelect dropdownEmployementType = new Select(driver.findElement(By.xpath(\"//select[@name='elementType']\")));\n\t\tThread.sleep(2000);\n\t\tdropdownEmployementType.selectByVisibleText(\"Both\");\n\t\tSelect dropdownCTC = new Select(driver.findElement(By.xpath(\"//select[@name='lastDrawnSalary']\")));\n\t\tThread.sleep(2000);\n\t\tdropdownCTC.selectByVisibleText(\"Not applicable\");\n\t\tdriver.findElement(By.xpath(\"//label[contains(text(),'Yes')]\")).click();\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.name(\"preferredCity\")).sendKeys(\"Mumbai\");\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.xpath(\"//button[@type='submit']\")).click();\n\t\tThread.sleep(2000);\n\t\tdriver.navigate().to(\"https://learning.edureka.co/\");\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.xpath(\"//span[@class='user_name']\")).click();\n\t\tThread.sleep(2000);\n\t\tdriver.findElement(By.xpath(\"//a[contains(text(),'Log Out')]\")).click();\n\t\tThread.sleep(2000);\n\t\tSystem.out.println(\"a\");\n\t\ttry {\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.chrome;\n\nimport com.google.auto.service.AutoService;\n\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ImmutableCapabilities;\nimport org.openqa.selenium.SessionNotCreatedException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.WebDriverInfo;\nimport org.openqa.selenium.chromium.ChromiumDriverInfo;\nimport org.openqa.selenium.remote.BrowserType;\nimport org.openqa.selenium.remote.CapabilityType;\n\nimport java.util.Optional;\n\n@AutoService(WebDriverInfo.class)\npublic class ChromeDriverInfo extends ChromiumDriverInfo {\n\n  @Override\n  public String getDisplayName() {\n    return \"Chrome\";\n  }\n\n  @Override\n  public Capabilities getCanonicalCapabilities() {\n    return new ImmutableCapabilities(CapabilityType.BROWSER_NAME, BrowserType.CHROME);\n  }\n\n  @Override\n  public boolean isSupporting(Capabilities capabilities) {\n    return BrowserType.CHROME.equalsIgnoreCase(capabilities.getBrowserName()) ||\n           capabilities.getCapability(\"chromeOptions\") != null ||\n           capabilities.getCapability(\"goog:chromeOptions\") != null;\n  }\n\n  @Override\n  public boolean isSupportingCdp() {\n    return true;\n  }\n\n  @Override\n  public boolean isAvailable() {\n    try {\n      ChromeDriverService.createDefaultService();\n      return true;\n    } catch (IllegalStateException | WebDriverException e) {\n      return false;\n    }\n  }\n\n  @Override\n  public Optional<WebDriver> createDriver(Capabilities capabilities)\n      throws SessionNotCreatedException {\n    if (!isAvailable() || !isSupporting(capabilities)) {\n      return Optional.empty();\n    }\n\n    WebDriver driver = new ChromeDriver(capabilities);\n\n    return Optional.of(driver);\n  }\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.chromium;\n\nimport com.google.common.collect.ImmutableMap;\n\nimport org.openqa.selenium.BuildInfo;\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.Credentials;\nimport org.openqa.selenium.HasAuthentication;\nimport org.openqa.selenium.ImmutableCapabilities;\nimport org.openqa.selenium.PersistentCapabilities;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.devtools.CdpEndpointFinder;\nimport org.openqa.selenium.devtools.CdpInfo;\nimport org.openqa.selenium.devtools.CdpVersionFinder;\nimport org.openqa.selenium.devtools.Connection;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.HasDevTools;\nimport org.openqa.selenium.devtools.noop.NoOpCdpInfo;\nimport org.openqa.selenium.html5.LocalStorage;\nimport org.openqa.selenium.html5.Location;\nimport org.openqa.selenium.html5.LocationContext;\nimport org.openqa.selenium.html5.SessionStorage;\nimport org.openqa.selenium.html5.WebStorage;\nimport org.openqa.selenium.interactions.HasTouchScreen;\nimport org.openqa.selenium.interactions.TouchScreen;\nimport org.openqa.selenium.internal.Require;\nimport org.openqa.selenium.logging.EventType;\nimport org.openqa.selenium.logging.HasLogEvents;\nimport org.openqa.selenium.mobile.NetworkConnection;\nimport org.openqa.selenium.remote.CommandExecutor;\nimport org.openqa.selenium.remote.FileDetector;\nimport org.openqa.selenium.remote.RemoteTouchScreen;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.html5.RemoteLocationContext;\nimport org.openqa.selenium.remote.html5.RemoteWebStorage;\nimport org.openqa.selenium.remote.http.ClientConfig;\nimport org.openqa.selenium.remote.http.HttpClient;\nimport org.openqa.selenium.remote.mobile.RemoteNetworkConnection;\n\nimport java.net.URI;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport java.util.logging.Logger;\n\n/**\n * A {@link WebDriver} implementation that controls a Chromium browser running on the local machine.\n * It is used as the base class for Chromium-based browser drivers (Chrome, Edgium).\n */\npublic class ChromiumDriver extends RemoteWebDriver implements\n  HasAuthentication,\n  HasDevTools,\n  HasLogEvents,\n  HasTouchScreen,\n  LocationContext,\n  NetworkConnection,\n  WebStorage {\n\n  private static final Logger LOG = Logger.getLogger(ChromiumDriver.class.getName());\n\n  private final Capabilities capabilities;\n  private final RemoteLocationContext locationContext;\n  private final RemoteWebStorage webStorage;\n  private final TouchScreen touchScreen;\n  private final RemoteNetworkConnection networkConnection;\n  private final Optional<Connection> connection;\n  private final Optional<DevTools> devTools;\n\n  protected ChromiumDriver(CommandExecutor commandExecutor, Capabilities capabilities, String capabilityKey) {\n    super(commandExecutor, capabilities);\n    locationContext = new RemoteLocationContext(getExecuteMethod());\n    webStorage = new RemoteWebStorage(getExecuteMethod());\n    touchScreen = new RemoteTouchScreen(getExecuteMethod());\n    networkConnection = new RemoteNetworkConnection(getExecuteMethod());\n\n    HttpClient.Factory factory = HttpClient.Factory.createDefault();\n    Capabilities originalCapabilities = super.getCapabilities();\n    Optional<URI> cdpUri = CdpEndpointFinder.getReportedUri(capabilityKey, originalCapabilities)\n      .flatMap(uri -> CdpEndpointFinder.getCdpEndPoint(factory, uri));\n\n    connection = cdpUri.map(uri -> new Connection(\n      factory.createClient(ClientConfig.defaultConfig().baseUri(uri)),\n      uri.toString()));\n\n    CdpInfo cdpInfo = new CdpVersionFinder().match(originalCapabilities.getBrowserVersion())\n      .orElseGet(() -> {\n        LOG.warning(\n          String.format(\n            \"Unable to find version of CDP to use for %s. You may need to \" +\n              \"include a dependency on a specific version of the CDP using \" +\n              \"something similar to \" +\n              \"`org.seleniumhq.selenium:selenium-devtools-v86:%s` where the \" +\n              \"version (\\\"v86\\\") matches the version of the chromium-based browser \" +\n              \"you're using and the version number of the artifact is the same \" +\n              \"as Selenium's.\",\n            capabilities.getBrowserVersion(),\n            new BuildInfo().getReleaseLabel()));\n        return new NoOpCdpInfo();\n      });\n\n    devTools = connection.map(conn -> new DevTools(cdpInfo::getDomains, conn));\n\n    this.capabilities = cdpUri.map(uri -> new ImmutableCapabilities(\n        new PersistentCapabilities(originalCapabilities)\n            .setCapability(\"se:cdp\", uri.toString())\n            .setCapability(\n                \"se:cdpVersion\", originalCapabilities.getBrowserVersion())))\n        .orElse(new ImmutableCapabilities(originalCapabilities));\n  }\n\n  @Override\n  public Capabilities getCapabilities() {\n    return capabilities;\n  }\n\n  @Override\n  public void setFileDetector(FileDetector detector) {\n    throw new WebDriverException(\n      \"Setting the file detector only works on remote webdriver instances obtained \" +\n        \"via RemoteWebDriver\");\n  }\n\n  @Override\n  public <X> void onLogEvent(EventType<X> kind) {\n    Require.nonNull(\"Event type\", kind);\n    kind.initializeListener(this);\n  }\n\n  @Override\n  public void register(Predicate<URI> whenThisMatches, Supplier<Credentials> useTheseCredentials) {\n    Require.nonNull(\"Check to use to see how we should authenticate\", whenThisMatches);\n    Require.nonNull(\"Credentials to use when authenticating\", useTheseCredentials);\n\n    getDevTools().createSessionIfThereIsNotOne();\n    getDevTools().getDomains().network().addAuthHandler(whenThisMatches, useTheseCredentials);\n  }\n\n  @Override\n  public LocalStorage getLocalStorage() {\n    return webStorage.getLocalStorage();\n  }\n\n  @Override\n  public SessionStorage getSessionStorage() {\n    return webStorage.getSessionStorage();\n  }\n\n  @Override\n  public Location location() {\n    return locationContext.location();\n  }\n\n  @Override\n  public void setLocation(Location location) {\n    locationContext.setLocation(location);\n  }\n\n  @Override\n  public TouchScreen getTouch() {\n    return touchScreen;\n  }\n\n  @Override\n  public ConnectionType getNetworkConnection() {\n    return networkConnection.getNetworkConnection();\n  }\n\n  @Override\n  public ConnectionType setNetworkConnection(ConnectionType type) {\n    return networkConnection.setNetworkConnection(type);\n  }\n\n  /**\n   * Launches Chrome app specified by id.\n   *\n   * @param id Chrome app id.\n   */\n  public void launchApp(String id) {\n    execute(ChromiumDriverCommand.LAUNCH_APP, ImmutableMap.of(\"id\", id));\n  }\n\n  /**\n   * Execute a Chrome Devtools Protocol command and get returned result. The\n   * command and command args should follow\n   * <a href=\"https://chromedevtools.github.io/devtools-protocol/\">chrome\n   * devtools protocol domains/commands</a>.\n   */\n  public Map<String, Object> executeCdpCommand(String commandName, Map<String, Object> parameters) {\n    Require.nonNull(\"Command name\", commandName);\n    Require.nonNull(\"Parameters\", parameters);\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, Object> toReturn = (Map<String, Object>) getExecuteMethod().execute(\n      ChromiumDriverCommand.EXECUTE_CDP_COMMAND,\n      ImmutableMap.of(\"cmd\", commandName, \"params\", parameters));\n\n    return ImmutableMap.copyOf(toReturn);\n  }\n\n  @Override\n  public DevTools getDevTools() {\n    return devTools.orElseThrow(() -> new WebDriverException(\"Unable to create DevTools connection\"));\n  }\n\n  public String getCastSinks() {\n    Object response = getExecuteMethod().execute(ChromiumDriverCommand.GET_CAST_SINKS, null);\n    return response.toString();\n  }\n\n  public String getCastIssueMessage() {\n    Object response = getExecuteMethod().execute(ChromiumDriverCommand.GET_CAST_ISSUE_MESSAGE, null);\n    return response.toString();\n  }\n\n  public void selectCastSink(String deviceName) {\n    getExecuteMethod().execute(ChromiumDriverCommand.SET_CAST_SINK_TO_USE, ImmutableMap.of(\"sinkName\", deviceName));\n  }\n\n  public void startTabMirroring(String deviceName) {\n    getExecuteMethod().execute(ChromiumDriverCommand.START_CAST_TAB_MIRRORING, ImmutableMap.of(\"sinkName\", deviceName));\n  }\n\n  public void stopCasting(String deviceName) {\n    getExecuteMethod().execute(ChromiumDriverCommand.STOP_CASTING, ImmutableMap.of(\"sinkName\", deviceName));\n  }\n\n  public void setPermission(String name, String value) {\n    getExecuteMethod().execute(ChromiumDriverCommand.SET_PERMISSION,\n      ImmutableMap.of(\"descriptor\", ImmutableMap.of(\"name\", name), \"state\", value));\n  }\n\n  @Override\n  public void quit() {\n    connection.ifPresent(Connection::close);\n    super.quit();\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.chromium;\n\nimport static java.util.Collections.unmodifiableMap;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.openqa.selenium.remote.CommandInfo;\nimport org.openqa.selenium.remote.http.HttpMethod;\nimport org.openqa.selenium.remote.service.DriverCommandExecutor;\nimport org.openqa.selenium.remote.service.DriverService;\n\n\npublic class ChromiumDriverCommandExecutor extends DriverCommandExecutor {\n\n  private static Map<String, CommandInfo> buildChromiumCommandMappings(String vendorKeyword) {\n    String sessionPrefix = \"/session/:sessionId/\";\n    String chromiumPrefix = sessionPrefix + \"chromium\";\n    String vendorPrefix = sessionPrefix + vendorKeyword;\n\n    HashMap<String, CommandInfo> mappings = new HashMap<>();\n\n    mappings.put(ChromiumDriverCommand.LAUNCH_APP,\n      new CommandInfo(chromiumPrefix + \"/launch_app\", HttpMethod.POST));\n\n    String networkConditions = chromiumPrefix + \"/network_conditions\";\n    mappings.put(ChromiumDriverCommand.GET_NETWORK_CONDITIONS,\n      new CommandInfo(networkConditions, HttpMethod.GET));\n    mappings.put(ChromiumDriverCommand.SET_NETWORK_CONDITIONS,\n      new CommandInfo(networkConditions, HttpMethod.POST));\n    mappings.put(ChromiumDriverCommand.DELETE_NETWORK_CONDITIONS,\n      new CommandInfo(networkConditions, HttpMethod.DELETE));\n\n    mappings.put( ChromiumDriverCommand.EXECUTE_CDP_COMMAND,\n      new CommandInfo(vendorPrefix + \"/cdp/execute\", HttpMethod.POST));\n\n    // Cast / Media Router APIs\n    String cast = vendorPrefix + \"/cast\";\n    mappings.put(ChromiumDriverCommand.GET_CAST_SINKS,\n      new CommandInfo(cast + \"/get_sinks\", HttpMethod.GET));\n    mappings.put(ChromiumDriverCommand.SET_CAST_SINK_TO_USE,\n      new CommandInfo(cast + \"/set_sink_to_use\", HttpMethod.POST));\n    mappings.put(ChromiumDriverCommand.START_CAST_TAB_MIRRORING,\n      new CommandInfo(cast + \"/start_tab_mirroring\", HttpMethod.POST));\n    mappings.put(ChromiumDriverCommand.GET_CAST_ISSUE_MESSAGE,\n      new CommandInfo(cast + \"/get_issue_message\", HttpMethod.GET));\n    mappings.put(ChromiumDriverCommand.STOP_CASTING,\n      new CommandInfo(cast + \"/stop_casting\", HttpMethod.POST));\n\n    mappings.put(ChromiumDriverCommand.SET_PERMISSION,\n      new CommandInfo(sessionPrefix + \"/permissions\", HttpMethod.POST));\n\n    return unmodifiableMap(mappings);\n  }\n\n  public ChromiumDriverCommandExecutor(String vendorPrefix, DriverService service) {\n    super(service, buildChromiumCommandMappings(vendorPrefix));\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.chromium;\n\nimport org.openqa.selenium.WebDriverInfo;\n\npublic abstract class ChromiumDriverInfo implements WebDriverInfo {\n\n  @Override\n  public int getMaximumSimultaneousSessions() {\n    return Runtime.getRuntime().availableProcessors();\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.devtools.events;\n\nimport com.google.common.collect.ImmutableList;\n\nimport org.openqa.selenium.devtools.idealized.runtime.model.RemoteObject;\n\nimport java.time.Instant;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ConsoleEvent {\n\n  private final String type;\n  private final Instant timestamp;\n  private final List<Object> args;\n\n  public ConsoleEvent(String type, Instant timestamp, Object... args) {\n    this.type = type;\n    this.timestamp = timestamp;\n    this.args = ImmutableList.copyOf(args);\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public Instant getTimestamp() {\n    return timestamp;\n  }\n\n  public List<Object> getArgs() {\n    return args;\n  }\n\n  public List<String> getMessages() {\n    return args.stream()\n      .map(List.class::cast)\n      .map(lst -> lst.get(0))\n      .map(RemoteObject.class::cast)\n      .map(RemoteObject::getValue)\n      .map(Object::toString)\n      .collect(Collectors.toList());\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\n      \"%s [%s] %s\",\n      timestamp,\n      type,\n      Stream.of(args).map(String::valueOf).collect(Collectors.joining(\", \")));\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage org.openqa.selenium.devtools.idealized.browser.model;\n\nimport org.openqa.selenium.internal.Require;\n\npublic class BrowserContextID {\n\n  private final String browserContextID;\n\n  public BrowserContextID(String browserContextID) {\n    this.browserContextID = Require.nonNull(\"Browser context ID\", browserContextID);\n  }\n\n  public String toString() {\n    return browserContextID;\n  }\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage newproject;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n//comment the above line and uncomment below line to use Chrome\n//import org.openqa.selenium.chrome.ChromeDriver;\npublic class PG1 {\n\n\n    public static void main(String[] args) {\n        // declaration and instantiation of objects/variables\n    \tSystem.setProperty(\"webdriver.gecko.driver\",\"C:\\\\geckodriver.exe\");\n\t\tWebDriver driver = new FirefoxDriver();\n\t\t//comment the above 2 lines and uncomment below 2 lines to use Chrome\n\t\t//System.setProperty(\"webdriver.chrome.driver\",\"G:\\\\chromedriver.exe\");\n\t\t//WebDriver driver = new ChromeDriver();\n    \t\n        String baseUrl = \"http://demo.guru99.com/test/newtours/\";\n        String expectedTitle = \"Welcome: Mercury Tours\";\n        String actualTitle = \"\";\n\n        // launch Fire fox and direct it to the Base URL\n        driver.get(baseUrl);\n\n        // get the actual value of the title\n        actualTitle = driver.getTitle();\n\n        /*\n         * compare the actual title of the page with the expected one and print\n         * the result as \"Passed\" or \"Failed\"\n         */\n        if (actualTitle.contentEquals(expectedTitle)){\n            System.out.println(\"Test Passed!\");\n        } else {\n            System.out.println(\"Test Failed\");\n        }\n       \n        //close Fire fox\n        driver.close();\n       \n    }\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.apache.poi.sl.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.UnexpectedAlertBehaviour;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day10JustDial {\n\n//Write data from Map to excel\npublic void writeExcel(Map<String, String> map) throws IOException {\n//Create a excel in user directory path\nString filePath = System.getProperty(\"user.dir\") + \"\\\\testdata\\\\Day10JustDial.xlsx\";\nSystem.out.println(filePath);\nFile fis = new File(filePath);\nXSSFWorkbook workbook = new XSSFWorkbook();\nXSSFSheet sheet = workbook.createSheet(\"Output\");\n\tfor (Entry<String, String> eachEntry : map.entrySet()) {\n\t\tfor (int k = 0; k < map.size(); k++) {\n\t\t\tsheet.createRow(k).createCell(0).setCellValue(eachEntry.getKey());\n\t\t\tsheet.getRow(k).createCell(1).setCellValue(eachEntry.getValue());\n\t\t}\n\t}\n\tFileOutputStream fos = new FileOutputStream(fis);\n\tworkbook.write(fos);\n}\n\n//Decipher Phone number\npublic Map<String, String> decipherPhoneNumber() {\n\tMap<String, String> decipher = new LinkedHashMap<String, String>();\n\tdecipher.put(\"0\", \"acb\");\n\tdecipher.put(\"1\", \"yz\");\n\tdecipher.put(\"2\", \"wx\");\n\tdecipher.put(\"3\", \"vu\");\n\tdecipher.put(\"4\", \"ts\");\n\tdecipher.put(\"5\", \"rq\");\n\tdecipher.put(\"6\", \"po\");\n\tdecipher.put(\"7\", \"nm\");\n\tdecipher.put(\"8\", \"lk\");\n\tdecipher.put(\"9\", \"ji\");\n\tdecipher.put(\"+\", \"dc\");\n\tdecipher.put(\"(\", \"fe\");\n\tdecipher.put(\")\", \"hg\");\n\tdecipher.put(\"-\", \"ba\");\n\treturn decipher;\n}\n\npublic static void main(String[] args) throws InterruptedException, InvalidFormatException, IOException {\n\n\tDay10JustDial jd = new Day10JustDial();\n\t\n//Launch Just Dial\nSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--disable-notifications\");\nDesiredCapabilities cap = new DesiredCapabilities();\ncap.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.DISMISS);\noptions.merge(cap);\nChromeDriver driver = new ChromeDriver(options);\ndriver.get(\"https://www.justdial.com/\");\ndriver.manage().window().maximize();\ndriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\nString title = driver.getTitle();\nif (title.contains(\"Justdial\")) \n{\nSystem.out.println(\"Justdial launched successfully: \" + title);\n} else\n\tSystem.err.println(\"Justdial launch failed\");\n\nWebDriverWait wait = new WebDriverWait(driver, 20);\nActions builder = new Actions(driver);\n\n//Click Auto Care in the left menu \nThread.sleep(2000);\ndriver.findElementByXPath(\"//span[text()='Auto care']\").click();\nif (driver.getTitle().contains(\"Auto Care\")) \n{\nSystem.out.println(\"Auto Care screen loaded\");\n}\n\n//Click Car repair\nThread.sleep(2000);\nwait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//span[text()='Car Repair']\")));\ndriver.findElementByXPath(\"//span[text()='Car Repair']\").click();\nif (driver.getTitle().contains(\"List of Car Repair\")) {\nSystem.out.println(\"Car Repair selected\");\n}\n\n//Click Car Brand as Hyundai and make as Hyundai xcent\nThread.sleep(2000);\nwait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//span[text()='Hyundai']\")));\nbuilder.moveToElement(driver.findElementByXPath(\"//span[text()='Hyundai']\")).click().build().perform();\nThread.sleep(2000);\ndriver.findElementByXPath(\"//span[text()='Hyundai Xcent']\").click();\nif (driver.getTitle().contains(\"Hyundai Xcent\")) {\nSystem.out.println(\"Hyundai Xcent car service page is loaded\");\n}\nThread.sleep(2000);\ntry {\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\n\t\t\t\"(//section[@class='jpbg'])[26]//span[text()='Car Repair Services Hyundai Xcent']\")));\ndriver.findElementByXPath(\"(//section[@class='jpbg']/span[contains(@onclick,'closePopUp')])[4]\").click();\n} catch (Exception e) {\n\tSystem.out.println(\"Pop-up did not occur\");\n}\n\n//Identify all the Service Center having Ratings >=4.5 and Votes >=50\nThread.sleep(5000);\nList<WebElement> eleRatings = driver.findElementsByXPath(\"//p[@class='newrtings ']//span[@class='green-box']\");\nMap<String, String> map = new LinkedHashMap<String, String>();\nString phoneNumber = \"\";\nString storeName = \"\";\nMap<String, String> decipherPhone = jd.decipherPhoneNumber();\nfor (int i = 0; i < eleRatings.size(); i++) {\n\tString strRating = eleRatings.get(i).getText();\n\tdouble ratingVal = Double.parseDouble(strRating);\n\tif (ratingVal >= 4.5) \n\t{\n\t\tString strVote = driver.findElementByXPath(\"//span[text()='\" + ratingVal + \"']/following-sibling::span[2]\").getText();\n\t\tint intVote = Integer.parseInt(strVote.replaceAll(\"\\\\D\", \"\"));\n\t\t\tif (intVote >= 50) \n\t\t\t{\n//Save all the Service Center name and Phone number matching the above condition in excel \n\t\t\t\tstoreName = driver.findElementByXPath(\"//span[text()='\" + ratingVal + \"']/ancestor::div[1]//h2[@class='store-name']//span//span\").getText();\n\t\t\t\tList<WebElement> elePhoneNumber = driver.findElementsByXPath(\"//span[contains(text(),'\" + intVote\n\t\t\t\t+ \"')]/ancestor::div[1]//h2[@class='store-name']/following-sibling::p[2]/span/span\");\n\t\t\t\t\tfor (int j = 0; j < elePhoneNumber.size(); j++) \n\t\t\t\t\t{\n\t\t\t\t\tString fullCode = elePhoneNumber.get(j).getAttribute(\"class\");\n\t\t\t\t\tString lastCode = fullCode.substring(14);\n\t\t\t\t\tSystem.out.println(lastCode);\n\t\t\t\t\tfor (Entry<String, String> eachPhone : decipherPhone.entrySet()){\n\t\t\t\t\t\tif (eachPhone.getValue().equalsIgnoreCase(lastCode)) {\n\t\t\t\t\t\t\tphoneNumber = phoneNumber + (eachPhone.getKey());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t//Assign key value pair to Map\n\t\t\t\tmap.put(storeName, phoneNumber);\n\t\t\t\tphoneNumber = \"\";\n\t\t}\n\t}\n}\n\n//To print map values just for verification purpose\nfor (Entry<String, String> eachEntry : map.entrySet()) \n{\n\tSystem.out.println(eachEntry.getKey() + \"--->\" + eachEntry.getValue());\n\t\t}\n\n//Calling method to write map data to excel\n\t\tjd.writeExcel(map);\n\t\t\n//Close browser\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day11Snapdeal {\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\n//Launch Snapdeal site\n\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\tChromeDriver driver = new ChromeDriver();\n\tdriver.get(\"https://www.snapdeal.com/\");\n\tdriver.manage().window().maximize();\n\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tString title = driver.getTitle();\n\tif (title.contains(\"Snapdeal\"))\n\t\tSystem.out.println(\"Snapdeal launched successfully: \" + title);\n\telse\n\t\tSystem.err.println(\"Snapdeal launch failed\");\n\t\n//Mouse over on Toys, Kids' Fashion & more and click on Toys \n\tActions builder=new Actions(driver);\n\tbuilder.moveToElement(driver.findElementByLinkText(\"Toys, Kids' Fashion & more\")).perform();\n\tbuilder.moveToElement(driver.findElementByXPath(\"//span[text()='Toys']/parent::a\")).click().build().perform();\n\t\n//Click Educational Toys in Toys & Games\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//div[text()='Toys & Games']/parent::a/following-sibling::ul//div[text()='Educational Toys']\").click();\n\tif(driver.getTitle().contains(\"Educational Toys\"))\n\t{\n\t\tSystem.out.println(\"Naivgated to Educational Toys page\");\n\t}\n\t\n//Click the Customer Rating 4 star and Up\n\tdriver.findElementByXPath(\"//label[@for='avgRating-4.0']\").click();\n\tThread.sleep(3000);\n\tif(driver.findElementByXPath(\"//a[text()='4.0']\").isDisplayed())\n\t{\n\t\tSystem.out.println(\"Products listed based on customer rating of 4.0 and above\");\n\t}\n\t\n//Click the offer as 40-50 \n\tdriver.findElementByXPath(\"//label[@for='discount-40%20-%2050']\").click();\n\tThread.sleep(2000);\n\tif(driver.findElementByXPath(\"//a[text()='40 - 50']\").isDisplayed())\n\t{\n\t\tSystem.out.println(\"Products listed based on discount of 40-50%\");\n\t}\n\t\n//Check the availability for the pincode \n\tdriver.findElementByXPath(\"//input[@placeholder='Enter your pincode']\").sendKeys(\"600026\");\n\tdriver.findElementByXPath(\"//button[text()='Check']\").click();\n\tWebDriverWait wait=new WebDriverWait(driver,10);\n\tString pincodeCheck = driver.findElementById(\"myPincode\").getText();\n\tif(pincodeCheck.equalsIgnoreCase(\"600026\"))\n\t{\n\t\tSystem.out.println(\"Delivery available for the pincode\");\n\t}\n\t\n//Click the Quick View of the first product \n\tbuilder.moveToElement(driver.findElementByXPath(\"(//section[@data-dpwlbl='Product Grid'])[1]/div[1]\")).perform();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"(//section[@data-dpwlbl='Product Grid'])[1]/div[1]//div[@class='clearfix row-disc']/div\").click();\n\t\n//Click on View Details \n\tThread.sleep(1000);\n\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[contains(text(),'view details')]\")));\n\tdriver.findElementByXPath(\"//a[contains(text(),'view details')]\").click();\n\t\n//Capture the Price of the Product and Delivery Charge \n\tThread.sleep(2000);\n\tString rawToyPrice = driver.findElementByXPath(\"//span[@class='pdp-final-price']/span\").getText();\n\tString rawToyDelCharge = driver.findElementByXPath(\"//span[contains(text(),'Delivery')]/parent::span//span[@class='availCharges']\").getText();\n\tSystem.out.println(\"Price of the toy: \"+rawToyPrice);\n\tSystem.out.println(\"Delivery charge of the toy: \"+rawToyDelCharge);\n\tdriver.findElementByXPath(\"//span[text()='add to cart']\").click();\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[contains(text(),'added to your cart')]\")));\n\tif(driver.findElementByXPath(\"//span[@class='mess-text']\").getText().contains(\"added to your cart\"))\n\t{\n\t\tSystem.out.println(\"Toy added to cart\");\n\t}\n\t\n//Validate the You Pay amount matches the sum of (price+deliver charge)\n\tString rawToyTotalPrice = driver.findElementByXPath(\"//div[@class='you-pay']/span[@class='price']\").getText();\n\tint toyPrice = Integer.parseInt(rawToyPrice);\n\tint toyDelCharge = Integer.parseInt(rawToyDelCharge.replaceAll(\"\\\\D\", \"\"));\n\tint toyTotalPrice = Integer.parseInt(rawToyTotalPrice.replaceAll(\"\\\\D\", \"\"));\n\tif(toyTotalPrice==(toyPrice+toyDelCharge))\n\t{\n\t\tSystem.out.println(\"Total price matches with subtotal of Toy: \"+toyTotalPrice);\n\t}\n\telse System.err.println(\"Price mismatch for Toy\");\n\t\n//Search for Sanitizer\n\tdriver.findElementById(\"inputValEnter\").sendKeys(\"Sanitizer\");\n\tThread.sleep(500);\n\tdriver.findElementByXPath(\"//a[@data-labelname='sanitizer']\").click();\n\t\n//Click on Product \"BioAyurveda Neem Power Hand Sanitizer\"\n\tbuilder.moveToElement(driver.findElementByXPath(\"//p[contains(text(),'BioAyurveda Neem Power  Hand Sanitizer')]/ancestor::div[2]/preceding-sibling::div[1]\")).perform();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//p[contains(text(),'BioAyurveda Neem Power  Hand Sanitizer')]/ancestor::div[3]//div[@class='clearfix row-disc']//div\").click();\n\t\t\n//Capture the Price and Delivery Charge \n\tThread.sleep(2000);\n\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[contains(text(),'view details')]\")));\n\tdriver.findElementByXPath(\"//a[contains(text(),'view details')]\").click();\n\tThread.sleep(2000);\n\tString rawSanitizerPrice = driver.findElementByXPath(\"//span[@class='pdp-final-price']/span\").getText();\n\tString rawSanitizerDeliveryCharge = driver.findElementByXPath(\"//span[contains(text(),'Delivery')]/parent::span//span[@class='availCharges']\").getText();\n\tSystem.out.println(\"Price of the sanitizer: \"+rawSanitizerPrice);\n\tSystem.out.println(\"Delivery charge of the sanitizer: \"+rawSanitizerDeliveryCharge);\n\t\n//Click on Add to Cart \n\tdriver.findElementByXPath(\"//span[text()='ADD TO CART']\").click();\n\t\n//Click on Cart  \n\tThread.sleep(2000);\n\tdriver.findElementByXPath(\"//span[text()='Cart']\").click();\n\tThread.sleep(2000);\n\tString strsanitizerTotalPrice = driver.findElementByXPath(\"//a[text()='BioAyurveda Neem Power  Hand Sanitizer 500 mL Pack of 1']/ancestor::div[3]/following-sibling::div[contains(@class,'item-details')]//span\").getText();\n\tint sanitizerTotalPrice = Integer.parseInt(strsanitizerTotalPrice.replaceAll(\"\\\\D\", \"\"));\n\t\n//Validate the Proceed to Pay matches the total amount of both the products \n\tThread.sleep(2000);\n\tString strGrandTotal = driver.findElementByXPath(\"//input[contains(@value,'PROCEED TO PAY')]\").getAttribute(\"value\");\n\tint grandTotal = Integer.parseInt(strGrandTotal.replaceAll(\"\\\\D\", \"\"));\n\t\tif(grandTotal==(toyTotalPrice+sanitizerTotalPrice))\n\t\t{\n\t\t\tSystem.out.println(\"Grand total matches with subtotal of products added :\"+grandTotal);\n\t\t}\n\t\telse System.err.println(\"Total mismatch\");\n\t\n//Close browser\n\t\tdriver.close();\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day12Carwale {\n\n\tpublic static void main(String[] args) throws InterruptedException {\n//Launch Carwale site\n\tChromeOptions options=new ChromeOptions();\n\toptions.addArguments(\"--disable-notifications\");\n\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\tChromeDriver driver = new ChromeDriver();\n\tdriver.get(\"https://www.carwale.com/\");\n\tdriver.manage().window().maximize();\n\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tString title = driver.getTitle();\n\tif (title.contains(\"CarWale\"))\n\t\tSystem.out.println(\"CarWale launched successfully: \" + title);\n\telse\n\t\tSystem.err.println(\"CarWale launch failed\");\n\t\n//Click on Used \n\tdriver.findElementByXPath(\"//li[@data-tabs='usedCars']\").click();\n\t\n//Select the City as Chennai\n\tWebDriverWait wait=new WebDriverWait(driver,10);\n\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//div[@class='used-cars-search']\")));\n\tdriver.findElementByXPath(\"//div[@class='used-cars-search']/input\").click();\n\tdriver.findElementByXPath(\"//input[@id='usedCarsList']\").sendKeys(\"Chennai\");\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//input[@id='usedCarsList']\").sendKeys(Keys.ENTER);\n\n//Select budget min (8L) and max(12L) and Click Search \t\n\tThread.sleep(1000);\n\tJavascriptExecutor click =(JavascriptExecutor) driver;\n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//span[text()='Choose your budget']\"));\n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//li[text()='8 Lakh']\"));\n\t//Thread.sleep(500);\n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//input[@id='maxInput']/parent::div/following-sibling::ul[2]/li[text()='12 Lakh']\"));\n\tdriver.findElementByXPath(\"//button[@id='btnFindCar']\").click();\n\tif(driver.getTitle().contains(\"Used Cars\"))\n\t{\n\t\tSystem.out.println(\"Navigated to used cars in Chennai\");\n\t}\n\tif(driver.findElementByXPath(\"//span[text()='8L - 12L']\").isDisplayed())\n\t{\n\t\tSystem.out.println(\"Budget filtered with 8-12L\");\n\t}\n\t\n//Handling popup\n\tdriver.findElementByXPath(\"//input[@id='placesQuery']\").sendKeys(\"Chennai\");\n\tdriver.findElementByXPath(\"//a[@cityname='chennai,tamilnadu']\").click();\n\t\n//Select Cars with Photos under Only Show Cars With\n\tdriver.findElementByName(\"CarsWithPhotos\").click();\n\tif(driver.findElementByXPath(\"//span[@id='filterbyadditional']/span[text()=' Cars with Photos ']\").isDisplayed())\n\t{\n\t\tSystem.out.println(\"Cars with photos are displayed\");\n\t}\n\t\n//Select Manufacturer as \"Hyundai\" --> Creta \n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//li[@data-manufacture-en='Hyundai']\"));\n\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//span[text()='Creta']\")));\n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//span[text()='Creta']\"));\n\tSystem.out.println(\"Hyundai creta model selected\");\n\n//Select Fuel Type as Petrol \n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//h3[contains(text(),'Fuel Type')]\"));\n\t//wait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='Petrol']\")));\n\tThread.sleep(2000);\n\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//span[text()='Petrol']/parent::li\"));\n\t//Actions builder=new Actions(driver);\n\t//builder.moveToElement(driver.findElementByXPath(\"//span[text()='Petrol']/parent::li\")).click().build().perform();\n\tSystem.out.println(\"Fuel type selected as petrol\");\n\t\n//Select Best Match as \"KM: Low to High\"\n\tThread.sleep(2000);\n\tdriver.findElementById(\"sort\").click();\n\tSelect eleSort=new Select(driver.findElementById(\"sort\"));\n\teleSort.selectByVisibleText(\"KM: Low to High\");\n\tif(driver.findElementByXPath(\"//option[text()='KM: Low to High']\").isSelected())\n\t{\n\t\tSystem.out.println(\"KM Low to High sort is selected\");\n\t}\n\t\n//Validate the Cars are listed with KMs Low to High \n\tMap<Integer,String> leastKMmap=new LinkedHashMap<Integer,String>();\n\tList<WebElement> eleKM = driver.findElementsByXPath(\"//span[contains(@class,'slkms vehicle')]\");\n\tList<Integer> vehicleKM=new ArrayList<Integer>();\n\tfor(int i=0;i<eleKM.size();i++)\n\t{\n\t\tString rawKM = eleKM.get(i).getText();\n\t\tint intKM = Integer.parseInt(rawKM.replaceAll(\"\\\\D\", \"\"));\n\t\tvehicleKM.add(intKM);\n\t\tleastKMmap.put(intKM, rawKM);\n\t}\n//Create copy of the Integer List, sort and compare two lists\n\tList<Integer> sortedvehicleKM=new ArrayList<Integer>(vehicleKM);\n\tCollections.sort(sortedvehicleKM);\n\tif(vehicleKM.equals(sortedvehicleKM))\n\t{\n\t\tSystem.out.println(\"Hyundai Creta cars are sorted by KM: Low to high\");\n\t}\n\telse System.err.println(\"Hyundai Creta cars are NOT sorted by KM: Low to high\");\n\n//Add the least KM ran car to Wishlist \n\tInteger leastKM = sortedvehicleKM.get(0);\n\tString strLeastKM=\"\";\n\tfor (Entry<Integer, String> eachEntry : leastKMmap.entrySet())\n\t{\n\t\tif(eachEntry.getKey().equals(leastKM))\n\t\t{\n\t\t\tstrLeastKM = eachEntry.getValue();\n\t\t}\n\t}\n\tSystem.out.println(\"Least KM utilised by Hyundai Creta car: \"+strLeastKM);\n\tThread.sleep(1000);\n\tWebElement eleCartoWishlist = driver.findElementByXPath(\"(//span[text()='\"+strLeastKM+\"']//ancestor::div[@class='stock-detail']//span[contains(@class,'shortlist')])[2]\");\n\tclick.executeScript(\"arguments[0].click();\", eleCartoWishlist);\n\t\n//Go to Wishlist and Click on More Details\n\tThread.sleep(2000);\n\tdriver.findElementByXPath(\"//li[@data-action='ShortList&CompareWindow_Click']\").click();\n\tString carWithLeastKM = driver.findElementByXPath(\"//a[@data-action='ShortListedCar_Click']/span\").getText();\n\tSystem.out.println(\"Car that utolised least KM: \"+carWithLeastKM);\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//a[text()='More details \u00c2\u00bb']\").click();\n\t\n//Window switch\n\tSet<String> setHandle = driver.getWindowHandles();\n\tList<String> listHandle=new ArrayList<String>(setHandle);\n\tdriver.switchTo().window(listHandle.get(1));\n\t\n//Print all the details under Overview  \n\tThread.sleep(3000);\n\tMap<String,String> carDeets=new LinkedHashMap<String,String>();\n\tList<WebElement> eleDesc = driver.findElementsByXPath(\"//div[contains(@class,'overview-list')]//div[contains(@class,'text-light-grey')]\");\n\tList<WebElement> eleValue = driver.findElementsByXPath(\"//div[contains(@class,'dark-text')]\");\n\tfor(int i=0;i<eleDesc.size();i++)\n\t{\n\t\tString strDeet = eleDesc.get(i).getText();\n\t\tString strDeetValue = eleValue.get(i).getText();\n\t\tcarDeets.put(strDeet, strDeetValue);\n\t}\n\tSystem.out.println(\"Overview details of \"+carWithLeastKM+\" are as follows:\");\n\tfor (Entry<String, String> eachDeet : carDeets.entrySet())\n\t{\n\t\tSystem.out.println(eachDeet.getKey()+\" -> \"+eachDeet.getValue());\n\t}\n\tThread.sleep(2000);\n\t\n//Close browser\n\tdriver.quit();\n\t\t\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day13Shiksha {\n\n\tpublic static void main(String[] args) throws InterruptedException {\n//Launch Shiksha site\n\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\tSystem.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\n\tChromeDriver driver = new ChromeDriver();\n\tdriver.get(\"https://studyabroad.shiksha.com/\");\n\tdriver.manage().window().maximize();\n\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tString title = driver.getTitle();\n\tif (title.contains(\"Study Abroad\"))\n\t\tSystem.out.println(\"Shiksha Study Abroad launched successfully: \" + title);\n\telse\n\t\tSystem.err.println(\"Shiksha Study Abroad launch failed\");\n\t\n//Mouse over on Colleges and click MS in Computer Science &Engg under MS Colleges \n\tActions build=new Actions(driver);\n\tWebDriverWait wait=new WebDriverWait(driver,10);\n\tbuild.moveToElement(driver.findElementByXPath(\"//label[text()='Colleges ']\")).pause(2000).perform();\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//label[text()='MS Colleges']\")));\n\tdriver.findElementByXPath(\"//label[text()='MS Colleges']/following-sibling::ul//a[text()='MS in Computer Science &Engg']\").click();\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//h1[text()='MS in Computer Science & Engineering Abroad']\")));\n\tif(driver.findElementByXPath(\"//h1[text()='MS in Computer Science & Engineering Abroad']\").isDisplayed())\n\t{\n\t\tSystem.out.println(\"MS in Computer Science & Enginerring screen is displayed \");\n\t}\n\t\n//Select GRE under Exam Accepted and Score 300 & Below \n\tdriver.findElementByXPath(\"//p[text()='GRE']/parent::label\").click();\n\tThread.sleep(1000);\n\tSelect eleScore=new Select(driver.findElementByXPath(\"//p[text()='GRE']/parent::label/following-sibling::div/select\"));\n\teleScore.selectByVisibleText(\"300 & below\");\n\tThread.sleep(1000);\n\t\n//Max 10 Lakhs under 1st year Total fees, USA under countries \n\tdriver.findElementByXPath(\"//label[contains(@for,'fee')]/p[text()='Max 10 Lakhs']\").click();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//a[text()='USA']/ancestor::label[1]/span\").click();\n\tThread.sleep(1000);\n\t\n//Verify if above filters are applied\n\tWebElement eleGRE = driver.findElementByXPath(\"//div[@class='selected-items']/p[text()='GRE']\");\n\tif(eleGRE.isDisplayed()) \n\t\t{\n\t\tSystem.out.println(\"GRE filter applied\");\n\t\t}\n\tWebElement eleFirstyrFee = driver.findElementByXPath(\"//div[@class='selected-items']/p[text()='Max 10 Lacs']\");\n\tif(eleFirstyrFee.isDisplayed()) \n\t\t{\n\t\tSystem.out.println(\"Max 10 Lakhs exam fee filter applied\");\n\t\t}\n\tWebElement eleCountry = driver.findElementByXPath(\"//div[@class='selected-items']/p[text()='USA']\");\n\tif(eleCountry.isDisplayed()) \n\t\t{\n\t\tSystem.out.println(\"USA filter applied\");\n\t\t}\n\t\n//Select Sort By: Low to high 1st year total fees\n\tSelect eleSort=new Select(driver.findElementByXPath(\"//select[@class='sort-select']\"));\n\teleSort.selectByVisibleText(\"Low to high 1st year total fees\");\n\tThread.sleep(500);\n\tif(driver.findElementByXPath(\"//option[text()='Low to high 1st year total fees']\").isSelected())\n\t{\n\t\tSystem.out.println(\"Sorted by Low to High 1st year total fees\");\n\t}\n\t\n//Verify colleges displayed count\n\tString collegesCount = driver.findElementByXPath(\"//span[@id='foundCoursesCount']\").getText();\n\tList<WebElement> eleColleges = driver.findElementsByXPath(\"//div[contains(@class,'univ-tab-details')]//div[contains(@id,'categoryPageListing')]\");\n\tif(eleColleges.size()==Integer.parseInt(collegesCount.replaceAll(\"\\\\D\", \"\")))\n\t{\n\t\tSystem.out.println(\"Number of colleges returned for the filters applied: \"+eleColleges.size());\n\t}\n\telse System.err.println(\"College count mismatch between results fetched and the one displayed in header section\");\t\n\t\t\n//Click Add to compare of the College having least fees with Public University, Scholarship and Accomadation facilities\n\tString clge1Selected=\"\";\n\tboolean isClgeAdded=false;\n\tfor(int i=0;i<eleColleges.size();i++)\n\t{\n\t\tList<WebElement> eleClgeFeatures = driver.findElementsByXPath(\"(//div[@class='uni-course-details flLt'])[\"+(i+1)+\"]//div[3]//p[not(contains(@class,'non-available'))]\");\n\t\tif(eleClgeFeatures.size()==3)\n\t\t{\n\t\t\tclge1Selected = driver.findElementByXPath(\"(//div[@class='uni-course-details flLt'])[\"+(i+1)+\"]/ancestor::div[3]//a\").getText();\n\t\t\tSystem.out.println(\"College with all features and least KM: \"+clge1Selected);\n\t\t\tThread.sleep(1000);\n\t\t\tWebElement eleSelect = driver.findElementByXPath(\"(//div[@class='uni-course-details flLt'])[\"+(i+1)+\"]/ancestor::div[1]/following-sibling::div[2]//span\");\n\t\t\tJavascriptExecutor click =(JavascriptExecutor) driver;\n\t\t\tclick.executeScript(\"arguments[0].click();\", eleSelect);\n\t\t\tisClgeAdded=true;\n\t\t}\n\t\tif(isClgeAdded==true)\n\t\tbreak;\n\t}\n\t\n//Select the first college under Compare with similar colleges and click on Compare college\n\tThread.sleep(1000);\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//p[text()='Compare with similar colleges']\")));\n\tString clge2Selected = driver.findElementByXPath(\"//p[text()='Compare with similar colleges']/parent::div[1]//a\").getText();\n\tdriver.findElementByXPath(\"//p[text()='Compare with similar colleges']/parent::div[1]//a/span[@class='add-tag']\").click();\n\tThread.sleep(2000);\n\tif(driver.findElementByXPath(\"//strong[text()='Compare Colleges >']/parent::a\").isEnabled())\n\t{\n\t\tdriver.findElementByXPath(\"//strong[text()='Compare Colleges >']/parent::a\").click();\n\t\tSystem.out.println(\"Second college selected for compare: \"+clge2Selected.replaceAll(\"[ Add ] \",\"\"));\n\t}\n\t\n//Select When to Study as 2021\n\tThread.sleep(2000);\n\tdriver.findElementByXPath(\"//label[text()='When do you plan to start your studies?']/parent::div/div[2]/label\").click();\n\t\n//Select Preferred Countries as USA \n\tdriver.findElementByXPath(\"//div[contains(@class,'selectCountry')]\").click();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//div[contains(@class,'selectCountry')]//li[2]//label[contains(@for,'USA')]\").click();\n\tThread.sleep(500);\n\tdriver.findElementByXPath(\"//div[@class='choose-count']/a[text()='ok']\").click();\n\t\n//Select Level of Study as Masters \n\tdriver.findElementByXPath(\"//label[contains(@for,'Masters')]\").click();\n\t\n//Select Preferred Course as MS\n\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[text()='Preferred Course']\")));\n\tdriver.findElementByXPath(\"//div[text()='Preferred Course']/parent::div\").click();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//div[text()='Preferred Course']/parent::div//li[text()='MS']\").click();\n\t\n//Select Specialization as \"Computer Science & Engineering\"\n\tThread.sleep(2000);\n\tdriver.findElementByXPath(\"//div[text()='Preferred Specialisations']/parent::div\").click();\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//div[text()='Preferred Specialisations']/parent::div//li[text()='Computer Science & Engineering']\").click();\n\t\n//Click on Sign Up\n\tThread.sleep(1000);\n\tdriver.findElementByXPath(\"//a[contains(text(),'Sign Up')]\").click();\n\t\n//Print all the warning messages displayed on the screen for missed mandatory fields\n\tList<WebElement> listErrorMsg = driver.findElementsByXPath(\"//div[contains(@id,'error')]/div[@class='helper-text' and contains(text(),'Please')]\");\n\tSystem.out.println(\"Error message displayed are missed mandatory fields:\");\n\tfor(int i=0;i<listErrorMsg.size();i++)\n\t{\n\t\tString errorMsg = listErrorMsg.get(i).getText();\n\t\tif(errorMsg.length()>0)\n\t\t{\n\t\tSystem.out.println(errorMsg);\n\t\t}\n\t}\n\t\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport static org.testng.Assert.fail;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.swing.ToolTipManager;\nimport javax.swing.plaf.ToolTipUI;\n\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day14ZalandoUK {\n\tpublic static ChromeDriver driver;\n\n//Method for bootstrap drop-down\n\tpublic void dropdownSelect(List<WebElement> eleSelect, String strSelect) throws InterruptedException {\n\t\tfor (int i = 0; i < eleSelect.size(); i++) {\n\t\t\tif (eleSelect.get(i).getAttribute(\"innerHTML\").contains(strSelect)) {\n\t\t\t\teleSelect.get(i).click();\n\t\t\t\tSystem.out.println(eleSelect.get(i).getAttribute(\"innerHTML\") + \" selected\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tThread.sleep(1000);\n\t\tdriver.findElementByXPath(\"//button[text()='Save']\").click();\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tDay14ZalandoUK obj = new Day14ZalandoUK();\n//Launch Zalando site\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tSystem.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.zalando.com/\");\n\n//Handle alert\n\t\tAlert alert = driver.switchTo().alert();\n\t\tSystem.out.println(\"Alert message: \" + alert.getText());\n\t\talert.accept();\n\n//Check if page load is successful\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"Zalando\"))\n\t\t\tSystem.out.println(\"Zalando launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"Zalando Study Abroad launch failed\");\n\n//Mouse over on Colleges and click MS in Computer Science &Engg under MS Colleges \n\t\tActions build = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 20);\n\n//Click on Zalando.uk \n\t\tdriver.findElementByXPath(\"//a[text()='Zalando.uk']\").click();\n\n//Click Women--> Clothing and click Coat  \n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//span[text()='Women']\").click();\n\t\tdriver.findElementByXPath(\"//span[text()='Clothing']\").click();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"(//a[text()='Coats'])[3]\")));\n\t\tdriver.findElementByXPath(\"(//a[text()='Coats'])[3]\").click();\n\t\tThread.sleep(1000);\n\t\tif (driver.findElementByXPath(\"//h1/span\").getText().contains(\"Women's Coats\")) {\n\t\t\tSystem.out.println(\"Screen navigated to Women's coats\");\n\t\t}\n\n//Choose Material as cotton (100%) and Length as thigh-length \n\t\tThread.sleep(2000);\n\t\ttry {\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//button[contains(text(),'OK')]\")));\n\t\t\tdriver.findElementByXPath(\"//button[contains(text(),'OK')]\").click();\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Pop-up did not occur\");\n\t\t} finally {\n\t\t\tdriver.findElementByXPath(\"//span[text()='Material']\").click();\n\t\t\tList<WebElement> eleMaterials = driver\n\t\t\t\t\t.findElementsByXPath(\"//button[contains(@aria-label,'Material')]/parent::div//ul/li/span\");\n\t\t\tobj.dropdownSelect(eleMaterials, \"cotton (100%)\");\n\t\t\tThread.sleep(1000);\n\t\t\tdriver.findElementByXPath(\"//span[text()='Length']\").click();\n\t\t\tList<WebElement> eleLength = driver\n\t\t\t\t\t.findElementsByXPath(\"//span[text()='Length']/ancestor::button/following-sibling::div//ul/li/span\");\n\t\t\tobj.dropdownSelect(eleLength, \"thigh-length\");\n\n//Click on Q/S designed by MANTEL - Parka coat \n\t\t\tThread.sleep(1000);\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(\n\t\t\t\t\tdriver.findElementByXPath(\"//div[contains(text(),'MANTEL')]/ancestor::div[3]//img\")));\n\t\t\tdriver.findElementByXPath(\"//div[contains(text(),'MANTEL')]/ancestor::div[3]/a\").click();\n\t\t\tThread.sleep(1000);\n\t\t\tif (driver.getTitle().contains(\"MANTEL\")) {\n\t\t\t\tSystem.out.println(\"Navigated to Q/S Designed by MANTEL Parka COAT\");\n\t\t\t}\n\n//Check the availability for Color as Olive and Size as 'M' and if the previous preference is not available, check  availability for Color Navy and Size 'M' \n\t\t\tdriver.findElementByXPath(\"(//a[contains(@href,'parka-olive')])[2]//img\").click();\n\t\t\tThread.sleep(1000);\n\t\t\tif (driver.findElementByXPath(\"//h2[text()='Out of stock']\").isDisplayed()) {\n\t\t\t\tdriver.findElementByXPath(\"(//a[contains(@href,'parka')]//img[@alt='navy'])[2]\").click();\n\t\t\t\tSystem.out.println(\"Color navy selected as olive is out of stock\");\n\t\t\t} else {\n\t\t\t\tdriver.findElementByXPath(\"(//a[contains(@href,'parka-olive')])[2]//img\").click();\n\t\t\t\tSystem.out.println(\"Color olive selected\");\n\t\t\t}\n\t\t\tdriver.findElementByXPath(\"//span[text()='Choose your size']\").click();\n\t\t\tThread.sleep(1000);\n\t\t\tdriver.findElementByXPath(\"//span[text()='M']/ancestor::li[1]\").click();\n\n//Add to bag only if Standard Delivery is free \n\t\t\tif (driver.findElementByXPath(\"//span[text()='Standard delivery']/parent::div//span[text()='Free']\")\n\t\t\t\t\t.isDisplayed()) {\n\t\t\t\tSystem.out.println(\"Standard delivery is free\");\n\t\t\t\tdriver.findElementByXPath(\"//span[text()='Add to bag']/parent::button\").click();\n\t\t\t\tSystem.out.println(\"Item added to bag\");\n\t\t\t} else\n\t\t\t\tfail(\"Standard delivery charge is applied\");\n\n//Mouse over on Your Bag and Click on \"Go to Bag\" \n\t\t\tbuild.moveToElement(driver.findElementByXPath(\"(//a[contains(@href,'cart')])[3]\")).perform();\n\t\t\tThread.sleep(1000);\n\t\t\tdriver.findElementByXPath(\"//div[text()='Go to bag']/parent::a\").click();\n\t\t\tThread.sleep(1000);\n\t\t\tString coatColor = driver.findElementByXPath(\"//a[contains(text(),'MANTEL - Parka')]\").getText();\n\t\t\tif (coatColor.contains(\"navy\")) {\n\t\t\t\tSystem.out.println(\"MANTEL Parka Navy coat is displayed in bag\");\n\t\t\t} else\n\t\t\t\tSystem.out.println(\"MANTEL Parka Olive coat is displayed in bag\");\n\n//Capture the Estimated Deliver Date and print \n\t\t\tString rawDeldate = driver.findElementByXPath(\"//div[@data-id='delivery-estimation']/span\").getText();\n\t\t\tString[] split = rawDeldate.split(\",\");\n\t\t\tString estimatedDelDate = split[0];\n\t\t\tSystem.out.println(\"Estimated delivery date: \" + estimatedDelDate);\n\n//Mouse over on FREE DELIVERY & RETURNS*, get the tool tip text and print \n\t\t\tbuild.moveToElement(driver.findElementByXPath(\"//a[contains(text(),'Free delivery')]/parent::span\"))\n\t\t\t\t\t.pause(1000).perform();\n\t\t\tString toolTipText = driver.findElementByXPath(\"//a[contains(text(),'Free delivery')]/parent::span\")\n\t\t\t\t\t.getAttribute(\"title\");\n\t\t\tSystem.out.println(\"Retrieved tool tip message: \" + toolTipText);\n\t\t\tThread.sleep(1000);\n\t\t\tbuild.moveToElement(driver.findElementByXPath(\"//a[contains(text(),'Free delivery')]/parent::span\")).click()\n\t\t\t\t\t.build().perform();\n\n//Click on Start chat in the Start chat and go to the new window\n\t\t\tThread.sleep(2000);\n\t\t\twait.until(ExpectedConditions\n\t\t\t\t\t.visibilityOf(driver.findElementByXPath(\"//span[text()='Start chat']/parent::button\")));\n\t\t\tJavascriptExecutor click = (JavascriptExecutor) driver;\n\t\t\tclick.executeScript(\"arguments[0].click();\",\n\t\t\t\t\tdriver.findElementByXPath(\"//span[text()='Start chat']/parent::button\"));\n\t\t\tSet<String> setHandle = driver.getWindowHandles();\n\t\t\tList<String> listHandle = new ArrayList<String>(setHandle);\n\t\t\tdriver.switchTo().window(listHandle.get(1));\n\n//Enter you first name and a dummy email and click Start Chat\n\t\t\tdriver.findElementById(\"prechat_customer_name_id\").sendKeys(\"Janani\");\n\t\t\tdriver.findElementById(\"prechat_customer_email_id\").sendKeys(\"jann@cactus.com\");\n\t\t\tdriver.findElementById(\"prechat_submit\").click();\n\n//Type Hi, click Send and print the reply message and close the chat window\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementById(\"liveAgentChatTextArea\")));\n\t\t\tdriver.findElementById(\"liveAgentChatTextArea\").sendKeys(\"Hi\");\n\t\t\tThread.sleep(500);\n\t\t\tdriver.findElementByXPath(\"//button[text()='Send']\").click();\n\t\t\tString chatReplyMsg = driver.findElementByXPath(\"//span[@class='messageText']\").getText();\n\t\t\tSystem.out.println(\"Chat box replay message: \" + chatReplyMsg);\n\t\t}\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day3MakeMyTrip {\n\tpublic static ChromeDriver driver;\n\n//Launch Nykaa e-commerce site in Chrome Browser and get Title\n\tpublic void launchBrowser() {\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.makemytrip.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"MakeMyTrip\"))\n\t\t\tSystem.out.println(\"MakeMyTrip launched successfully: \" + title);\n\t\telse\n\t\t\tSystem.err.println(\"MakeMyTrip launch failed\");\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\n//Setting up objects\n\t\tDay3MakeMyTrip obj = new Day3MakeMyTrip();\n\t\tobj.launchBrowser();\n\t\tActions builder = new Actions(driver);\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\n//Click Hotels\n\t\tdriver.findElementByXPath(\"(//a[contains(@href,'hotels')])[1]\").click();\n\t\tSystem.out.println(\"Navigated to Search Hotels screen\");\n\n//Enter city as Goa, and choose Goa, India \n\t\tWebElement eleCity = driver.findElementById(\"city\");\n\t\tbuilder.moveToElement(eleCity).click().perform();\n\t\tdriver.findElementByXPath(\"//input[contains(@class,'react-autosuggest')]\").sendKeys(\"Goa\");\n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//input[contains(@class,'react-autosuggest')]\").sendKeys(Keys.TAB);\n\n//Enter Check in date as May 15 and add 5 for end date\n\t\tdriver.findElementById(\"checkin\").click();\n\t\tString startDate = driver.findElementByXPath(\"(//div[text()='15'])[2]\").getText();\n\t\tdriver.findElementByXPath(\"(//div[text()='15'])[2]\").click();\n\t\tint endDate = Integer.parseInt(startDate) + 5;\n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"(//div[text()='\" + endDate + \"'])[2]\").click();\n\n//Print selected dates\n\t\tString checkinDate = driver.findElementByXPath(\"//p[@data-cy='checkInDate']\").getText();\n\t\tString checkoutDate = driver.findElementByXPath(\"//p[@data-cy='checkOutDate']\").getText();\n\t\tSystem.out.println(\"Check-in date selected :\" + checkinDate);\n\t\tSystem.out.println(\"Check-out date selected :\" + checkoutDate);\n\n//Click on ROOMS & GUESTS and click 2 Adults and one Children(age 12). Click Apply Button\n\t\tdriver.findElementById(\"guest\").click();\n\t\tThread.sleep(500);\n\t\tWebElement eleAdults = driver.findElementByXPath(\"(//li[@class='selected'])[1]\");\n\t\tif (!eleAdults.isSelected()) {\n\t\t\tdriver.findElementByXPath(\"(//li[@class='selected'])[1]\").click();\n\t\t\tSystem.out.println(\"Adults selected as 2\");\n\t\t} else\n\t\t\tSystem.out.println(\"Adults defaulted as 2\");\n\t\tdriver.findElementByXPath(\"//li[@data-cy='children-1']\").click();\n\t\tWebElement eleChildAge = driver.findElementByXPath(\"//label[@class='lblAge']/select\");\n\t\teleChildAge.click();\n\t\tSelect selectAge = new Select(eleChildAge);\n\t\tselectAge.selectByVisibleText(\"12\");\n\t\tSystem.out.println(\"1 child added\");\n\t\tdriver.findElementByXPath(\"//button[text()='APPLY']\").click();\n\t\tString roomGuestCount = driver.findElementByXPath(\"//p[@data-cy='roomGuestCount']\").getText();\n\t\tSystem.out.println(roomGuestCount);\n\n//Click Search button \n\t\tdriver.findElementByXPath(\"//button[text()='Search']\").click();\n\n//Search Locality as Baga and 5 star in star category\n\t\tdriver.findElementByXPath(\"//body[contains(@class,'overlayWholeBlack')]\").click();\n\t\tdriver.findElementByXPath(\"//div[contains(@id,'locality')]//ul/li[4]//label\").click();\n\t\tWebElement eleStar = driver.findElementByXPath(\"//div[contains(@id,'star_category')]//li//label[1]\");\n\t\tJavascriptExecutor click = (JavascriptExecutor) driver;\n\t\tclick.executeScript(\"arguments[0].click();\", eleStar);\n\t\tString confirmFilter = driver.findElementByXPath(\"//ul[@class='appliedFilters']\").getText();\n\t\tSystem.out.println(\"Star category and Locality selected are: \" + confirmFilter);\n\n//Click on the first resulting hotel, go to the new window and Print hotel name\n\t\tdriver.findElementById(\"Listing_hotel_0\").click();\n\t\tSet<String> setHandles = driver.getWindowHandles();\n\t\tList<String> listHandles = new ArrayList<String>(setHandles);\n\t\tdriver.switchTo().window(listHandles.get(1));\n\t\tString hotelTitle = driver.getTitle();\n\t\tif (hotelTitle.contains(\"Acron Waterfront\")) {\n\t\t\tSystem.out.println(\"Navigated to Acron Waterfront hotel page\");\n\t\t} else\n\t\t\tSystem.err.println(\"Hotel navigation failed\");\n\t\tString hotelName = driver.findElementById(\"detpg_hotel_name\").getText();\n\t\tSystem.out.println(\"Hotel name: \" + hotelName);\n\n//Click MORE OPTIONS link and Select 3Months plan and close \n\t\tdriver.findElementByXPath(\"//span[text()='MORE OPTIONS']\").click();\n\t\tdriver.findElementByXPath(\"//table[@class='tblEmiOption']//tr[2]/td[@class='textRight']/span\").click();\n\t\tdriver.findElementByClassName(\"close\").click();\n\n//Click on BOOK THIS NOW \n\t\tThread.sleep(500);\n\t\tdriver.findElementByXPath(\"//a[text()='BOOK THIS NOW']\").click();\n\t\tSystem.out.println(\"Hotel booking initiated\");\n\n//Print the Total Payable amount\n\t\tString totalPayable = driver.findElementById(\"revpg_total_payable_amt\").getText();\n\t\tSystem.out.println(\"Payable amount: \" + totalPayable);\n\n//Close browser\n\t\tdriver.quit();\n\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport static org.testng.Assert.fail;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.UnexpectedAlertBehaviour;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day6BigBasket {\n\tpublic static ChromeDriver driver;\n\n\tpublic static void main(String[] args) throws InterruptedException {\n//Launch BigBasket site\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.bigbasket.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\t\n\t\tif (title.contains(\"bigbasket\")) {\n\t\t\tSystem.out.println(\"BigBasket launched successfully: \" + title);\n\t\t} else\n\t\t\tfail(\"BigBasket launch failed\");\n\t\t\n\t\tDay6BigBasket bb=new Day6BigBasket();\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\t\tActions builder = new Actions(driver);\n\n//Set location pincode\n\t\tdriver.findElementByXPath(\"//span[@class='arrow-marker']\").click();\n\t\tdriver.findElementById(\"areaselect\").sendKeys(\"600026\");\n\t\tThread.sleep(500);\n\t\tdriver.findElementById(\"areaselect\").sendKeys(Keys.ENTER);\n\t\tdriver.findElementByXPath(\"//button[text()='Continue']\").click();\n\t\t\n//Mouse hover on  Shop by Category \n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()=' Shop by Category ']\")).perform();\n\t\t\n//Go to FOODGRAINS, OIL & MASALA --> RICE & RICE PRODUCTS \n\t\tbuilder.moveToElement(driver.findElementByXPath(\"(//a[text()='Foodgrains, Oil & Masala'])[2]\")).build().perform();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"(//a[text()='Rice & Rice Products'])[2]\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"(//a[text()='Rice & Rice Products'])[2]\")).build().perform();\n\t\t\n//Click on Boiled & Steam Rice\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"(//a[text()='Boiled & Steam Rice'])[2]\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"(//a[text()='Boiled & Steam Rice'])[2]\")).click().build().perform();\n\t\tif((driver.getTitle()).contains(\"Boiled Steam Rice\"))\n\t\t{\n\t\t\tSystem.out.println(\"Navigated to Boiled & Steam Rice products page\");\n\t\t}\n\t\telse fail(\"Navigation to Boiled & Steam Rice page failed\");\n\t\t\n//Choose the Brand as bb Royal\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//span[text()='bb Royal']\")));\n\t\tdriver.findElementByXPath(\"//span[text()='bb Royal']\").click();\n\t\tThread.sleep(1000);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[contains(@class,'prod-name')]/h6\")));\n\t\tint count = 0;\n\t\tList<WebElement> eleBrandNames = driver.findElementsByXPath(\"//div[contains(@class,'prod-name')]/h6\");\n\t\tThread.sleep(2000);\n\t\tfor (WebElement eachBrand : eleBrandNames) {\n\t\t\tif((eachBrand.getText()).equalsIgnoreCase(\"bb Royal\"))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}}\n\t\tif(count==eleBrandNames.size())\n\t\t{\n\t\t\tSystem.out.println(\"bb Royal brand products are displayed\");\n\t\t}\n\n//Go to Ponni Boiled Rice - Super Premium and select 5kg bag from Dropdown\n\t\tString riceType=\"Ponni Boiled Rice - Super Premium\";\n\t\tWebElement eleRiceQuantity = driver.findElementByXPath(\"//a[text()='\"+riceType+\"']/parent::div/following-sibling::div//button/span\");\n\t\tif(eleRiceQuantity.getText().contains(\"5 kg\"))\n\t\t{\n\t\t\tSystem.out.println(\"Rice Quantity as 5kg selected by default\");\n\t\t}\n\t\telse \n\t\t{\n\t\t\tdriver.findElementByXPath(\"//a[text()='\"+riceType+\"']/parent::div/following-sibling::div//button\").click();\n\t\t\tdriver.findElementByXPath(\"//a[text()='\"+riceType+\"']/parent::div/following-sibling::div//ul//a\").click();\n\t\t\tSystem.out.println(\"Rice Quantity selected as 5kg\");\n\t\t}\n\t\t\t\n//Print the price of the product\n\t\tString riceprodPrice = driver.findElementByXPath(\"//a[text()='\"+riceType+\"']/parent::div/following-sibling::div[2]//span[@class='discnt-price']/span\").getText();\n\t\tSystem.out.println(\"Product price of Rice: \"+riceprodPrice.replaceAll(\"\\\\D\", \"\"));\n\t\t\n//Click Add button\n\t\tdriver.findElementByXPath(\"//a[text()='\"+riceType+\"']/parent::div/following-sibling::div[2]//div[@class='delivery-opt']//button\").click();\n\n//Verify the success message displayed \n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='toast-title']\")));\n\t\tString riceAddedMsg = driver.findElementByXPath(\"//div[@class='toast-title']\").getText();\n\t\tSystem.out.println(\"Second item added: \"+riceAddedMsg);\n\t\tdriver.findElementByClassName(\"toast-close-button\").click();\n\t\t\n//Type Dal in Search field and enter\n\t\tdriver.findElementById(\"input\").sendKeys(\"Dal\");\n\t\tdriver.findElementByXPath(\"//button[@qa='searchBtn']\").click();\n\t\tSystem.out.println(\"Search for Dal products\");\n\t\tThread.sleep(1000);\n\n//Go to Toor/Arhar Dal and select 2kg & set Qty 2 \n\t\tString dalType=\"Toor/Arhar Dal/Thuvaram Paruppu\";\n\t\tdriver.findElementByXPath(\"//a[text()='\"+dalType+\"']/parent::div//following-sibling::div//button\").click();\n\t\tdriver.findElementByXPath(\"//a[text()='Toor/Arhar Dal/Thuvaram Paruppu']/parent::div//following-sibling::div//ul/li[4]\").click();\n\t\tSystem.out.println(\"Dal Quantity selected as 2kg\");\n\t\tdriver.findElementByXPath(\"//a[text()='\"+dalType+\"']/parent::div/following-sibling::div[2]//div[3]//input\").clear();\n\t\tdriver.findElementByXPath(\"//a[text()='\"+dalType+\"']/parent::div/following-sibling::div[2]//div[3]//input\").sendKeys(\"2\");\n\t\tSystem.out.println(\"2 Dal products selected\");\n\t\t\n//Print the price of Dal\n\t\tString dalPrice = driver.findElementByXPath(\"//a[text()='\"+dalType+\"']/parent::div/following-sibling::div[2]//h4/span[2]/span\").getText();\n\t\tSystem.out.println(\"Price of Dal product: \"+dalPrice.replaceAll(\"//D\", \"\"));\n\t\t\n//Click Add button and verify success message\n\t\tdriver.findElementByXPath(\"//a[text()='\"+dalType+\"']/parent::div/following-sibling::div[2]//div[3]//button\").click();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='toast-title']\")));\n\t\tString dalAddedMsg = driver.findElementByXPath(\"//div[@class='toast-title']\").getText();\n\t\tSystem.out.println(\"Second item added: \"+dalAddedMsg);\n\t\tdriver.findElementByClassName(\"toast-close-button\").click();\n\t\t\n//Mouse hover on My Basket \n\t\tThread.sleep(500);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='My Basket']\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//span[text()='My Basket']\")).click().build().perform();\n\t\n//Validate the Sub Total displayed for the selected items\n\t\tList<WebElement> eleProd = driver.findElementsByXPath(\"//div[@class='container-fluid item-wrap']\");\n\t\tSystem.out.println(\"Total calculation for first set of item selection\");\n\t//method called to verify Total against selected items\n\t\tbb.verifyTotal(eleProd);\n\n//Reduce the Quantity of Dal as 1 \n\t\tdriver.findElementByXPath(\"//a[text()='bb Popular Toor/Arhar Dal 2 kg Pouch']/ancestor::div[3]/following-sibling::div//button\").click();\n\t\tThread.sleep(1000);\n\t\t\n//Validate the Sub Total for the current items\n\t\tList<WebElement> eleReduceProd = driver.findElementsByXPath(\"//div[@class='container-fluid item-wrap']\");\n\t\tSystem.out.println(\"Total calculation after reduction of an item quantity\");\n\t//method called to verify Total against selected items\n\t\tbb.verifyTotal(eleReduceProd);\n\t\t\n//Close browser\n\t\tdriver.close();\n\t}\n\t\n\t\n//Resuable method to verify Grand total against sub total of selected items\n\tpublic void verifyTotal(List<WebElement> eleProducts) throws InterruptedException\n\t{\n\t\tint prodCount = eleProducts.size();\n\t\tWebDriverWait wt = new WebDriverWait(driver, 10);\n\t\twt.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//p[text()='Sub Total : ']/span/span\")));\n\t\tString strTotal = driver.findElementByXPath(\"//p[text()='Sub Total : ']/span/span\").getText();\n\t\tdouble grandTotal = Double.parseDouble(strTotal);\n\t\tSystem.out.println(\"Grand total: \"+grandTotal);\n\t\tdouble splitTotal=0;\n\t\tfor(int i=0;i<prodCount;i++)\n\t\t{\n\t\t\tString strItemPrice = driver.findElementsByXPath(\"//div[@class='row mrp']/span\").get(i).getText();\n\t\t\tdouble itemPrice = Double.parseDouble(strItemPrice);\n\t\t\tSystem.out.println(\"Item \"+(i+1)+\" price: \"+itemPrice);\n\t\t\tThread.sleep(1000);\n\t\t\twt.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='product-qty ng-binding']\")));\n\t\t\tString rawstrQty = driver.findElementsByXPath(\"//div[@class='product-qty ng-binding']\").get(i).getText();\n\t\t\tString[] split = rawstrQty.split(\"x\");\n\t\t\tdouble itemQty = Double.parseDouble(split[0]);\n\t\t\tSystem.out.println(\"Item \"+(i+1)+\" quantity: \"+itemQty);\n\t\t\tsplitTotal=splitTotal+(itemPrice*itemQty);\n\t\t}\n\t\tif(splitTotal==grandTotal)\n\t\t{\n\t\t\tSystem.out.println(\"Total matches with selected items: \"+grandTotal);\n\t\t}\n\t\telse fail(\"Total mismatch\");\n\t\t\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport static org.testng.Assert.fail;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day7Honda {\n\tpublic static ChromeDriver driver;\n\n\tpublic static void main(String[] args) throws InterruptedException {\n//Launch Honda site\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.honda2wheelersindia.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\n\t\tif (title.contains(\"Honda\")) {\n\t\t\tSystem.out.println(\"Honda launched successfully: \" + title);\n\t\t} else\n\t\t\tfail(\"Honda launch failed\");\n\n\t\tDay7Honda honda = new Day7Honda();\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\t\tActions builder = new Actions(driver);\n\n//Close the pop-up\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//div[@class='modal-body']\")));\n\t\tdriver.findElementByXPath(\"//div[@class='modal-body']/button\").click();\n\t\t\n//Call method to select Dio scooter and return Displacement value\n\t\tdouble dioDisplacement = getDisplacement(\"dio\");\n\t\t\tSystem.out.println(\"Dio Displacement value is: \"+dioDisplacement);\n\t\t\tThread.sleep(1000);\n\t\t\t\n//Call method to select Activa125 scooter and return Displacement value\n\t\t\tdouble activa125Displacement = getDisplacement(\"activa125\");\n\t\t\tSystem.out.println(\"Active 125 displacement value is: \"+activa125Displacement);\n\t\t\t\n//Compare Displacement of Dio and Activa 125 and print the Scooter name having better Displacement\n\t\t\tif(dioDisplacement>activa125Displacement)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Displacement value of Dio is better\");\n\t\t\t}\n\t\t\telse System.out.println(\"Displacement value of Activa 125 is better\");\n\t\t\t\n//Click FAQ from Menu  \n\t\t\tdriver.findElementByXPath(\"//a[text()='FAQ']\").click();\n\t\t\tif(driver.getTitle().contains(\"FAQ\"))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"FAQ is loaded\");\n\t\t\t}\n\t\t\telse System.err.println(\"FAQ loading failed\");\n\t\t\t\n//Click Activa 125 BS-VI under Browse By Product\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//h6[text()='Browse by Product']\")));\n\t\t\tdriver.findElementByXPath(\"//h6[text()='Browse by Product']/following-sibling::div//a[text()='Activa 125 BS-VI']\").click();\n\t\t\tThread.sleep(1000);\n\n//Click  Vehicle Price \n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()=' Vehicle Price']\")));\n\t\t\tdriver.findElementByXPath(\"//a[text()=' Vehicle Price']\").click();\n\t\t\n//Make sure Activa 125 BS-VI selected and click submit\n\t\t\tif(driver.findElementByXPath(\"//option[@selected='selected' and text()='Activa 125 BS-VI']\").isSelected())\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Activa 125 is selected\");\n\t\t\t}\n\t\t\telse System.err.println(\"Activa 125 is not selected\");\n\t\t\tThread.sleep(500);\n\t\t\tWebElement eleClickCart = driver.findElementByXPath(\"(//button[text()='Submit'])[6]\");\n\t\t\tJavascriptExecutor click = (JavascriptExecutor) driver;\n\t\t\tclick.executeScript(\"arguments[0].click();\", eleClickCart);\n\t\t\t\n//click the price link\t\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//td[3]/a[text()='Click here to know the price of Activa 125 BS-VI.']\")));\n\t\t\tdriver.findElementByXPath(\"//td[3]/a[text()='Click here to know the price of Activa 125 BS-VI.']\").click();\n\t\t\t\n//Go to the new Window and select the state as Tamil Nadu and  city as Chennai\n\t\t\tSet<String> setHandle = driver.getWindowHandles();\n\t\t\tList<String> listHandle=new ArrayList<String>(setHandle);\n\t\t\tdriver.switchTo().window(listHandle.get(1));\n\t\t\tif(driver.getTitle().contains(\"Price\"))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Price page of Activa 125 is loaded\");\n\t\t\t}\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementById(\"StateID\")));\n\t\t\tSelect state=new Select(driver.findElementById(\"StateID\"));\n\t\t\tstate.selectByVisibleText(\"Tamil Nadu\");\n\t\t\tThread.sleep(1000);\n\t\t\tSelect city=new Select(driver.findElementById(\"CityID\"));\n\t\t\tcity.selectByVisibleText(\"Chennai\");\n\t\t\tThread.sleep(1000);\n\t\t\t\n//Click Search\n\t\t\tdriver.findElementByXPath(\"//button[text()='Search']\").click();\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//td[text()='Chennai']\")));\n\t\t\tSystem.out.println(\"Price table loaded for Chennai city\");\n\t\t\t\n//Print all the 3 models and their prices\n\t\t\t\n\t\t\tMap<String,String> map=new LinkedHashMap<String,String>();\n\t\t\tList<WebElement> eleList = driver.findElementsByXPath(\"//table[@id='gvshow']/tbody/tr/td[2]\");\n\t\t\tList<WebElement> eleModel = driver.findElementsByXPath(\"//table[@id='gvshow']/tbody/tr/td[contains(text(),'ACTIVA')]\");\n\t\t\tList<WebElement> elePrice = driver.findElementsByXPath(\"//table[@id='gvshow']/tbody/tr/td[contains(text(),'Rs')]\");\n\t\t\tfor(int i=0;i<eleList.size();i++)\n\t\t\t{\n\t\t\t\tString modelType= eleModel.get(i).getText();\n\t\t\t\tString modelPrice=elePrice.get(i).getText();\n\t\t\t\tmap.put(modelType, modelPrice);\n\t\t\t}\n\t\t\tfor (Entry<String,String> keyValue : map.entrySet()) \n\t\t\t{\n\t\t\t\tSystem.out.println(\"Model with prices as below:\");\n\t\t\t\tSystem.out.println(keyValue.getKey()+\" - \"+keyValue.getValue());\n\t\t\t}\n\t\t\t\n//Close browser\n\t\t\tdriver.quit();\n}\n\t\n//Method to get Displacement value depending on scooter make\n\tpublic static double getDisplacement(String scooterMake) throws InterruptedException\n\t{\n\t\tWebDriverWait wt=new WebDriverWait(driver,10);\n\t\tActions build=new Actions(driver);\n\t\t\n\t////Click on scooters and select scooter make\n\t\twt.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='Scooter']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Scooter']\").click();\n\t\twt.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"(//a[contains(@href,'\"+scooterMake+\"')])[1]/img\")));\n\t\tdriver.findElementByXPath(\"(//a[contains(@href,'\"+scooterMake+\"')])[1]/img\").click();\n\t\t\n\t////Click on Specifications and mouseover on ENGINE\n\t\twt.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Specifications']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Specifications']\").click();\n\t\tThread.sleep(500);\n\t\twt.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='ENGINE']\")));\n\t\tbuild.moveToElement(driver.findElementByXPath(\"//a[text()='ENGINE']\")).perform();\n\t\t\n\t////Get Displacement value\n\t\twt.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='Displacement']/following-sibling::span\")));\n\t\tString rawDisplacement = driver.findElementByXPath(\"//span[text()='Displacement']/following-sibling::span\").getText();\n\t\tdouble actualDisplacement=Double.parseDouble(rawDisplacement.replaceAll(\"[a-z]+\", \"\"));\n\t\treturn actualDisplacement;\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class Day8PepperFry {\n\n\tpublic static void main(String[] args) throws InterruptedException, IOException {\n\t\t\n//Launch PepperFry\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tChromeDriver driver = new ChromeDriver();\n\t\tdriver.get(\"https://www.pepperfry.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tif (title.contains(\"Pepperfry\")) {\n\t\t\tSystem.out.println(\"Pepperfry launched successfully: \" + title);\n\t\t} else\n\t\t\tSystem.err.println(\"Pepperfry launch failed\");\n\n\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\t\tActions builder = new Actions(driver);\n\t\t\n//Close pop-up\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='reg-modal-right-frm-wrap']\")));\n\t\tdriver.findElementByXPath(\"(//a[@class='popup-close'])[5]\").click();\n\t\t\n//Mouse hover on Furniture and click Office Chairs under Chairs \t\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Furniture']\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()='Furniture']\")).perform();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Office Chairs']\")));\n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()='Office Chairs']\")).click().build().perform();\n\t\tif(driver.getTitle().contains(\"Office Chairs\"))\n\t\t{\n\t\t\tSystem.out.println(\"Navigated to Office chairs screen\");\n\t\t} else System.err.println(\"Office chairs screen is not loaded\");\n\t\t\n//click Executive Chairs\n\t\tThread.sleep(500);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[@class='cat-wrap-img']/img[@alt='Executive Chairs']\")));\n\t\tJavascriptExecutor click =(JavascriptExecutor) driver;\n\t\tclick.executeScript(\"arguments[0].click();\", driver.findElementByXPath(\"//div[@class='cat-wrap-img']/img[@alt='Executive Chairs']\"));\n\t\tif(driver.getTitle().contains(\"Executive Chair\"))\n\t\t{\n\t\t\tSystem.out.println(\"Navigated to Executive chairs screen\");\n\t\t} else System.err.println(\"Executive chairs screen is not loaded\");\n\t\t\n//Change the minimum Height as 50 in under Dimensions \n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//div[text()='Height']/parent::li/div[3]/input\")));\n\t\tdriver.findElementByXPath(\"//div[text()='Height']/parent::li/div[3]/input\").clear();\n\t\tdriver.findElementByXPath(\"//div[text()='Height']/parent::li/div[3]/input\").sendKeys(\"50\",Keys.ENTER);\n\t\tString eleHeightFilter = driver.findElementByXPath(\"//li[contains(@class,'fltrd')]\").getText();\n\t\tif(eleHeightFilter.equalsIgnoreCase(\"Height(50-55)\"))\n\t\t{\n\t\t\tSystem.out.println(\"Executive chairs filtered with Height of 50-55 inches\");\n\t\t}\n\t\t\n//Add \"Poise Executive Chair in Black Colour\" chair to Wishlist \n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Poise Executive Chair in Black Colour']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Poise Executive Chair in Black Colour']/ancestor::div[2]/following-sibling::div/div[2]/a\").click();\n\t\t\n//Mouseover on Homeware and Click Pressure Cookers under Cookware \n\t\tbuilder.moveToElement(driver.findElementByXPath(\"//a[text()='Homeware']\")).perform();\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//a[text()='Pressure Cookers']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Pressure Cookers']\").click();\n\t\tif(driver.findElementByXPath(\"//h1[text()='PRESSURE COOKERS']\").isDisplayed())\n\t\t{\n\t\t\tSystem.out.println(\"Pressue cooker products are displayed\");\n\t\t}\n\t\t\n//Select Prestige as Brand\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//label[text()='Prestige']\")));\n\t\tdriver.findElementByXPath(\"//label[text()='Prestige']\").click();\n\t\t\n//Select Capacity as 1-3 Ltr \n\t\tThread.sleep(1000);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//label[text()='1 Ltr - 3 Ltr']\")));\n\t\tdriver.findElementByXPath(\"//label[text()='1 Ltr - 3 Ltr']\").click();\n\t\tif(driver.findElementByXPath(\"//li[text()='Prestige']\").isDisplayed() && driver.findElementByXPath(\"//li[text()='1 Ltr - 3 Ltr']\").isDisplayed())\n\t\t{\n\t\t\tSystem.out.println(\"Prestige brand and capacity as 1-3 Ltr is selected\");\n\t\t}\n\t\t\n//Add \"Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr\" to Wishlist \n\t\tThread.sleep(500);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr']/ancestor::div[2]/following-sibling::div/div[2]/a\").click();\n\t\t\n//Verify the number of items in Wishlist \n\t\tThread.sleep(1000);\n\t\tString wishlistCount = driver.findElementByXPath(\"//a[contains(@class,'wistlist_img')]/following-sibling::span\").getText();\n\t\tif(wishlistCount.equalsIgnoreCase(\"2\"))\n\t\t{\n\t\tSystem.out.println(\"Number of items wishlisted: \"+wishlistCount);\n\t\t}\n\t\telse System.err.println(\"Wishlist count does not match as expected\");\n\t\t\n//Navigate to Wishlist\n\t\tdriver.findElementByXPath(\"//a[contains(@class,'wistlist_img')]\").click();\n\t\t\n//Move Pressure Cooker only to Cart from Wishlist \n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr']\")));\n\t\tdriver.findElementByXPath(\"//a[text()='Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr By...']/parent::p/following-sibling::div/div/a\").click();\n\t\tif(driver.findElementByXPath(\"//a[text()='Nakshatra Cute Metallic Red Aluminium Cooker 2 Ltr By Prestige']\").isDisplayed())\n\t\t{\n\t\t\tSystem.out.println(\"Pressure cooker added to cart\");\n\t\t}\n\t\telse System.err.println(\"Pressure cooker not present\");\n\t\t\n//Check for the availability for Pincode 600128\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElementByXPath(\"//span[text()='Showing availability at']/following-sibling::input\")));\n\t\tdriver.findElementByXPath(\"//span[text()='Showing availability at']/following-sibling::input\").sendKeys(\"600128\",Keys.ENTER);\n\t\tThread.sleep(1000);\n\t\t\n//Valid pincode\n\t\tif(driver.findElementByXPath(\"//div[@class='item_cta']/p\").getText().contains(\"Use Coupon \"))\n\t\t{\n\t\t\tSystem.out.println(\"Product can be delivered to the pincode specified\");\n\t\t//Click Proceed to Pay Securely \n\t\t\tdriver.findElementByXPath(\"//a[text()='Proceed to pay securely ']\").click();\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//a[text()='PLACE ORDER']\")));\n\t\t//Click Place order\n\t\t\tdriver.findElementByXPath(\"//a[text()='PLACE ORDER']\").click();\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElementByXPath(\"//span[text()='ORDER SUMMARY']/parent::div/following-sibling::div/span\")));\n\t\t\tdriver.findElementByXPath(\"//span[text()='ORDER SUMMARY']/parent::div/following-sibling::div/span\").click();\n\t\t//Capture the screenshot of the item under Order Item\n\t\t\tFile source = driver.findElementByXPath(\"//div[@class='slick-track']/li\").getScreenshotAs(OutputType.FILE);\n\t\t\tFile dest = new File(\"./snap/product.png\");\n\t\t\tFileUtils.copyFile(source, dest);\n\t\t}\n\t\t\n//Invalid Pincode or valid pincode where product is not available for delivery\n\t\telse\n\t\t{\n\t\tSystem.err.println(\"Product cannot be delivered to the pincode specified\");\t\n\t\t}\n\t\t\n//Close browser\n\t\tdriver.close();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage program;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\n\npublic class MyntraTest {\n\tpublic static ChromeDriver driver;\n\t\n//Convert String to Integer\n\tpublic int stringToInt(String str) \n\t{\n\t\tString strvalue = str.replaceAll(\"\\\\D\", \"\");\n\t\tint intvalue = Integer.parseInt(strvalue);\n\t\treturn intvalue;\n\t}\n\n//Launch Myntra e-commerce site in Chrome Browser and get Title\n\tpublic void launchBrowser() \n\t{\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"./Drivers/chromedriver.exe\");\n\t\tdriver = new ChromeDriver();\n\t\tdriver.get(\"https://www.myntra.com/\");\n\t\tdriver.manage().window().maximize();\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tString title = driver.getTitle();\n\t\tSystem.out.println(\"Myntra launched successfully: \"+title);\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException \n\t{\n//Object creation for the class to call the methods\n\t\tMyntraTest obj = new MyntraTest();\n\t\tobj.launchBrowser();\n\n//Object creation for Actions class\n\t\tActions builder = new Actions(driver);\n\n//Mouse over on Women category\n\t\tWebElement ele1 = driver.findElementByXPath(\"//a[text()='Women']\");\n\t\tbuilder.moveToElement(ele1).perform();\n\n//Click Jackets & Coats\n\t\tdriver.findElementByXPath(\"//a[text()='Jackets & Coats']\").click();\n\n//Surpass notifications\n\t\tChromeOptions options = new ChromeOptions();\n\t\toptions.addArguments(\"--disable-notifications\");\n\n//Fetch the total count of items\n\t\tString strtotal = driver.findElementByXPath(\"//span[@class='title-count']\").getText();\n\t\tint totalitems = obj.stringToInt(strtotal);\n\n//Ensure the total items count matches with the categories split\n\t\tString strjacket = driver.findElementByXPath(\"//span[@class='categories-num']\").getText();\n\t\tString strcoat = driver.findElementByXPath(\"(//span[@class='categories-num'])[2]\").getText();\n\t\tint totalof_jacketsandcoats = obj.stringToInt(strjacket) + obj.stringToInt(strcoat);\n\t\tif (totalitems == totalof_jacketsandcoats) {\n\t\t\tSystem.out.println(\"Total count matches with the splitup: \" + totalitems);\n\t\t}\n\n//Select Coats Category\n\t\tdriver.findElementByXPath(\"(//span[@class='categories-num'])[2]\").click();\n\n//Click for More options under Brand section\n\t\tdriver.findElementByXPath(\"//div[@class='brand-more']\").click();\n\n//Search and select MANGO brand \n\t\tdriver.findElementByClassName(\"FilterDirectory-searchInput\").sendKeys(\"MANGO\");\n\t\tdriver.findElementByXPath(\"(//input[@value='MANGO']/parent::label)[2]\").click();\n\n//Close the pop-up box after search\n\t\tdriver.findElementByXPath(\"//span[contains(@class,'FilterDirectory-close')]\").click();\n\t\tThread.sleep(1000);\n\t\t\n//To confirm all coats are from brand MANGO\n\t\tList<WebElement> brandlist = driver.findElementsByXPath(\"//h3[@class='product-brand']\");\n\t\tboolean flag=false;\n\t\tfor (WebElement eachbrand : brandlist) \n\t\t{\n\t\t\tString brands = eachbrand.getText();\n\t\t\tif (!brands.equalsIgnoreCase(\"MANGO\")) \n\t\t\t{\n\t\t\tflag=true;\n\t\t\t}\n\t\t}\n\t\tif(flag=false)\n\t\t{\n\t\t\tSystem.out.println(\"All coats are from brand MANGO\");\n\t\t}\n\n//Sort by Better Discount\n\t\tWebElement ele2 = driver.findElementByXPath(\"//div[@class='sort-sortBy']\");\n\t\tbuilder.moveToElement(ele2).perform();\n\t\tdriver.findElementByXPath(\"//ul[@class='sort-list']/li[3]/label\").click();\n\t\tThread.sleep(500);\n\t\t\n//Find the price of first displayed item\n\t\tList<WebElement> allitemsprice = driver.findElementsByXPath(\"//span[@class='product-discountedPrice']\");\n\t\tString firstitemprice = allitemsprice.get(0).getText();\n\t\tSystem.out.println(\"Price of first displayed coat is: \" + firstitemprice);\n\t\t\n//Mouse over on size of the first item\n\t\tWebElement ele3 = driver.findElementByXPath(\"//span[@class='product-discountedPrice']\");\n\t\tbuilder.moveToElement(ele3).perform();\n\t\t\n//Click on WishList Now and ensure being re-directed to login\n\t\tdriver.findElementByXPath(\"//div[contains(@class,'product-actions')]/span/span\").click();\n\t\tString logintitle = driver.getTitle();\n\t\tSystem.out.println(\"Back to login page: \"+logintitle);\n\t\t\n//Close Browser\n\t\tdriver.close();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AddingOneProduct {\n\t\n\tprivate WebDriver driver;\n\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t    \n\t\tdriver = Utility.ini();\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\t@Parameters({\"url\"})\n  @Test\n  public void addingToShoppingCart(String url)  throws Exception {\n\t    driver.get(url);\n\t    driver.findElement(By.linkText(\"Electronics\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='content']/a/picture/img\")).click();\n\t    driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t    new Select(driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\"))).selectByVisibleText(\"2\");\n\t   \n\t    driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t    driver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t    \n\t    Boolean count;\n\t    if(driver.findElement(By.partialLinkText(\"Kindle Fire HD\"))!= null){\n\t    \tcount=true;\n    \t}else{\n    \tcount=false;\n    \t}\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    Assert.assertEquals(true,count);\n\t  }\n\n\t \n\t@AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t    String verificationErrorString = verificationErrors.toString();\n\t    if (!\"\".equals(verificationErrorString)) {\n\t      Assert.fail(verificationErrorString);\n\t    }\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class AddingOneProductWithDeliveryNotes {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testAddingOneProductWithDeliveryNotes(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"My Account\")).click();\n    driver.findElement(By.id(\"loginUsername\")).click();\n    driver.findElement(By.id(\"loginUsername\")).clear();\n    driver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n    driver.findElement(By.id(\"password\")).click();\n    driver.findElement(By.id(\"password\")).clear();\n    driver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n    driver.findElement(By.id(\"continue-button\")).click();\n    driver.findElement(By.linkText(\"Home & Garden\")).click();\n    driver.findElement(By.xpath(\"//*[@id=\\\"content\\\"]/a/picture/img\")).click();\n    driver.findElement(By.xpath(\"//*[@id=\\\"AddToCartForm\\\"]/div[6]/a\")).click();\n    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.name(\"comment\")).click();\n    driver.findElement(By.name(\"comment\")).clear();\n    driver.findElement(By.name(\"comment\")).sendKeys(\"Please gift wrap the parcel\");\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.linkText(\"Log Off\")).click();\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport java.util.concurrent.TimeUnit;\nimport org.junit.*;\nimport org.openqa.selenium.*;\n\npublic class AddingTwoProducts {\n\tprivate WebDriver driver;\n\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t  @BeforeMethod\n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t\t  driver = Utility.ini();\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\t  @Parameters({\"url\"})\n\t  @Test\n\t  public void addingTwoProducts(String url) throws Exception {\n\t    driver.get(url);\n\t    driver.findElement(By.linkText(\"DVD Movies\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='banners']/a/picture/img\")).click();\n\t    driver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t    driver.findElement(By.linkText(\"Games\")).click();\n\t    driver.findElement(By.linkText(\"The Wheel Of Time\")).click();\n\t    driver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t    Boolean count;\n\t    if(driver.findElement(By.partialLinkText(\"The Wheel Of Time\"))!= null){\n\t    \tcount=true;\n    \t}else{\n    \tcount=false;\n    \t}\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    Assert.assertEquals(true,count);\n\t  }\n\t@AfterClass\n\t  public void tearDown() throws Exception {\n\t    driver.quit();\n\t    String verificationErrorString = verificationErrors.toString();\n\t    if (!\"\".equals(verificationErrorString)) {\n\t      Assert.fail(verificationErrorString);\n\t    }\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport org.testng.Assert;\nimport org.testng.AssertJUnit;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AdvancedSearch {\n\tprivate WebDriver driver;\n\t  private StringBuffer verificationErrors = new StringBuffer();\n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\t@Parameters({\"url\"})\n\t  @Test\n\t  public void testAdvancedSearch(String url) throws Exception {\n\t    driver.get(url);\n\t    driver.findElement(By.xpath(\"(//a[contains(text(),'Advanced Search')])[2]\")).click();\n\t    driver.findElement(By.name(\"categoryId\")).click();\n\t    new Select(driver.findElement(By.name(\"categoryId\"))).selectByVisibleText(\"Computer Peripherals\");\n\t    driver.findElement(By.name(\"categoryId\")).click();\n\t    driver.findElement(By.name(\"manufacturerId\")).click();\n\t    new Select(driver.findElement(By.name(\"manufacturerId\"))).selectByVisibleText(\"Microsoft\");\n\t    driver.findElement(By.name(\"manufacturerId\")).click();\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    AssertJUnit.assertEquals(driver.findElement(By.linkText(\"Microsoft IntelliMouse Pro\")).getText(), \"Microsoft IntelliMouse Pro\");\n\t  }\n\n\t@AfterClass\n\t  public void tearDown() throws Exception {\n\t    driver.quit();\n\t    String verificationErrorString = verificationErrors.toString();\n\t    if (!\"\".equals(verificationErrorString)) {\n\t      Assert.fail(verificationErrorString);\n\t    }\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\nimport cookie.Utility;\n\nimport org.testng.Assert;\nimport org.testng.AssertJUnit;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport org.openqa.selenium.*;\n\nimport org.openqa.selenium.support.ui.Select;\n\npublic class CancelAProduct {\n\tprivate WebDriver driver;\n\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t  \n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\t  @Parameters({\"url\"})\n\t  @Test\n\t  public void testCancelAProduct(String url) throws Exception {\n\t    driver.get(url);\n\t\t//driver.navigate().to(url);\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t    driver.findElement(By.id(\"loginUsername\")).click();\n\t    driver.findElement(By.id(\"loginUsername\")).clear();\n\t    driver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t    driver.findElement(By.id(\"password\")).click();\n\t    driver.findElement(By.id(\"password\")).clear();\n\t    driver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t    driver.findElement(By.linkText(\"Home\")).click();\n\t    driver.findElement(By.linkText(\"DVD Movies\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='content']/a/picture/img\")).click();\n\t    driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t    new Select(driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\"))).selectByVisibleText(\"2\");\n\t    driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t    driver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t    driver.findElement(By.className(\"remove fa fa-times-circle\")).click();\n\t    \n\t    AssertJUnit.assertEquals(driver.findElement(By.xpath(\"//div[@id='checkout-area']/p\")).getText(), \"Your Shopping Cart is empty\");\n\t    driver.findElement(By.linkText(\"Log Off\")).click();\n\t    \n\t  }\n\n\t  \n\t@AfterClass\n\t  public void tearDown() throws Exception {\n\t    driver.quit();\n\t    String verificationErrorString = verificationErrors.toString();\n\t    if (!\"\".equals(verificationErrorString)) {\n\t      Assert.fail(verificationErrorString);\n\t    }\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class Categories {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\tdriver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testCategories(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"Electronics\")).click();\n    driver.findElement(By.linkText(\"Tablets (3)\")).click();\n    driver.findElement(By.name(\"orderBy\")).click();\n    new Select(driver.findElement(By.name(\"orderBy\"))).selectByVisibleText(\"Price: high to low\");\n    driver.findElement(By.name(\"orderBy\")).click();\n    assertEquals(driver.findElement(By.linkText(\"iPad\")).getText(), \"iPad\");\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class NewsletterSubscription {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testNewsletterSubscription(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"My Account\")).click();\n    driver.findElement(By.id(\"loginUsername\")).click();\n    driver.findElement(By.id(\"loginUsername\")).clear();\n    driver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n    driver.findElement(By.id(\"password\")).click();\n    driver.findElement(By.id(\"password\")).clear();\n    driver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.linkText(\"Home\")).click();\n    driver.findElement(By.id(\"newsletter-input\")).click();\n    driver.findElement(By.id(\"newsletter-input\")).clear();\n    driver.findElement(By.id(\"newsletter-input\")).sendKeys(\"sakthi@yahoo.com\");\n    driver.findElement(By.id(\"newsletter-button\")).click();\n    Thread.sleep(2000);\n    assertEquals(driver.findElement(By.id(\"newsletter-msg\")).getText(), \"Subscription was successful\");\n    driver.findElement(By.linkText(\"Log Off\")).click();\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class PageTranslation {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testPageTranslation(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"My Account\")).click();\n    driver.findElement(By.id(\"loginUsername\")).click();\n    driver.findElement(By.id(\"loginUsername\")).clear();\n    driver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n    driver.findElement(By.id(\"password\")).click();\n    driver.findElement(By.id(\"password\")).clear();\n    driver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n    driver.findElement(By.id(\"continue-button\")).click();\n    driver.findElement(By.id(\"lang-selectSelectBoxIt\")).click();\n    driver.findElement(By.linkText(\"Deutsch\")).click();\n    driver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n    assertEquals(driver.findElement(By.linkText(\"Warenkorb-Inhalte\")).getText(), \"Warenkorb-Inhalte\");\n    driver.findElement(By.id(\"lang-selectSelectBoxIt\")).click();\n    driver.findElement(By.linkText(\"English\")).click();\n    driver.findElement(By.linkText(\"Log Off\")).click();\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class Review {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testReview(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"My Account\")).click();\n    driver.findElement(By.id(\"loginUsername\")).click();\n    driver.findElement(By.id(\"loginUsername\")).clear();\n    driver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n    driver.findElement(By.id(\"password\")).click();\n    driver.findElement(By.id(\"password\")).clear();\n    driver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.linkText(\"DVD Movies\")).click();\n    driver.findElement(By.xpath(\"//div[@id='banners']/a/picture/img\")).click();\n    driver.findElement(By.id(\"product-reviews-tab\")).click();\n\n    Thread.sleep(2000);\n    driver.findElement(By.xpath(\"//*[@id=\\\"average-customer-reviews-stars\\\"]/div[3]/a\")).click();\n    driver.findElement(By.name(\"reviewText\")).click();\n    driver.findElement(By.name(\"reviewText\")).clear();\n    driver.findElement(By.name(\"reviewText\")).sendKeys(\"Must watch movie\");\n    driver.findElement(By.xpath(\"(//input[@name='rating'])[5]\")).click();\n\n    driver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n    driver.findElement(By.linkText(\"Log Off\")).click();\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class SortBy {\n  private WebDriver driver;\n  private StringBuffer verificationErrors = new StringBuffer();\n\n  @BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n  @Parameters({\"url\"})\n  @Test\n  public void testSortBy(String url) throws Exception {\n    driver.get(url);\n    driver.findElement(By.linkText(\"Software\")).click();\n    driver.findElement(By.name(\"orderBy\")).click();\n    new Select(driver.findElement(By.name(\"orderBy\"))).selectByVisibleText(\"Price: high to low\");\n    driver.findElement(By.name(\"orderBy\")).click();\n    assertEquals(driver.findElement(By.xpath(\"//div[@id='item-overview']/div[2]/ul/li/div/div[3]/div\")).getText(), \"$159.99\");\n  }\n\n  @AfterClass(alwaysRun = true)\n  public void tearDown() throws Exception {\n    driver.quit();\n    String verificationErrorString = verificationErrors.toString();\n    if (!\"\".equals(verificationErrorString)) {\n      fail(verificationErrorString);\n    }\n  }\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CheckingForNullpointerException {\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testNullPointerForSingle(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tdriver.findElement(By.id(\"signup\")).click();\n\t\t\tSystem.out.println(\"here we are searching for a non existing element,which will trigger self-diagnostics\");\n\t\t\tSystem.out.println(\n\t\t\t\t\t\"please wait for a some time and let the popper closee on its own,PS make sure the user Interaction is true\");\n\t\t\tWebElement FN = driver.findElement(By.id(\"first_Name\"));\n\t\t\tSystem.out.println(FN.getAttribute(\"outerHTML\"));\n\t\t\tSystem.out.println(\"if the above tag is printing, then check if DB has any value\");\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testNullPointerForMulti(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4444/\");\n\t\t\tdriver.findElement(By.id(\"signup\")).click();\n\t\t\tSystem.out.println(\"here we are searching for a non existing element,which will trigger self-diagnostics\");\n\t\t\tSystem.out.println(\n\t\t\t\t\t\"please wait for a some time and let the popper closee on its own,PS make sure the user Interaction is true\");\n\n\t\t\tWebElement FN = driver.findElements(By.id(\"first_Name\")).get(0);\n\t\t\tSystem.out.println(FN.getAttribute(\"outerHTML\"));\n\t\t\tSystem.out.println(\"if the above tag is printing, then check if DB has any value\");\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\t\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CSPErrorReplication {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void CSPerror(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4444/\");\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"var meta = document.createElement('meta')\\r\\n\"\n\t\t\t\t\t+ \"meta.httpEquiv=\\\"Content-Security-Policy\\\" \\r\\n\"\n\t\t\t\t\t+ \"meta.content=\\\"default-src 'none'; child-src 'none'; object-src 'none';connect-src 'none'\\\";\\r\\n\"\n\t\t\t\t\t+ \"document.head.appendChild(meta)\");\n\n\t\t\tWebElement signup = driver.findElement(By.id(\"signup_not_present\"));\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tSystem.out.println(\"due to CSP error, self-diagnostics will fail\");\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void CSPerrorMulti(String FilePath) throws Exception {\n\t\tdriver.get(\"localhost:4444/\");\n\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\tjs.executeScript(\"var meta = document.createElement('meta')\\r\\n\"\n\t\t\t\t+ \"meta.httpEquiv=\\\"Content-Security-Policy\\\" \\r\\n\"\n\t\t\t\t+ \"meta.content=\\\"default-src 'none'; child-src 'none'; object-src 'none';connect-src 'none'\\\";\\r\\n\"\n\t\t\t\t+ \"document.head.appendChild(meta)\");\n\t\ttry {\n\t\t\tdriver.findElements(By.id(\"signup_not_present\")).get(0).getAttribute(\"value\");\n\t\t} catch (Error e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"As the CSP blocks any request, self diagnostics fails\");\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DemoTest {\n\t\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t  driver = Utility.ini(FilePath);\n\t}\n\n\t  @Test\n\t  public void testLogin()  throws Exception {\n\t\t  driver.get(\"https://accounts.google.com/signup/v2\");\n\n\t//location strategy is by Id\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tjs.executeScript(\"document.getElementById('firstName').id='first_Name'\");\n\n\t\tjs.executeScript(\"document.getElementById('lastName').name='Last_Name'\");\n\t    WebElement first = driver.findElements(By.id(\"firstName\")).get(0);\n\t    first.clear();\n\t    first.sendKeys(\"John\");\n\t    \n\t    \n\t//Location strategy is by Name\n\t    \n\t    WebElement lastName = driver.findElements(By.name(\"lastName\")).get(0);\n\t    lastName.clear();\n\t    lastName.click();\n\t    lastName.sendKeys(\"Doe\");\n\t    \n\t    \n\t    //Location Strategy by Css selector\n\t    \n\t    \n\t    driver.findElement(By.cssSelector(\"input[aria-label='Username']\")).sendKeys(\"John_doe\");\n\t    \n\t  //Location strategy is by relative Xpath\n\t    \n\t    driver.findElement(By.xpath(\"//*[@id='passwd']/div[1]/div/div[1]/input\")).sendKeys(\"Infy@12345\");\n\t    \n\t   //Location strategy is by Full xpath\n\t    \n\t    driver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/div[1]/div[2]/form/div[2]/div/div[1]/div[3]/div[1]/div[3]/div/div/div[1]/div/div[1]/input\")).sendKeys(\"Infy@12345\");\n\t    \n\t    //Location strategy is by inner Text\n\t    driver.findElement(By.className(\"RveJvd\")).click();\n\t  }\n\t  \n\t  \n\n\t  @AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t  }\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\n//import infosys.ivs.innovation.selfdiagnostic.LoggerFile;\n\nimport org.openqa.selenium.TimeoutException;\n\npublic class Helper {\n\n public static boolean isElementPresent(WebDriver driver, By by) {\n\t try {\n\t\t  WebElement temp = new WebDriverWait(driver,10).until(ExpectedConditions.presenceOfElementLocated(by));\n\t\t  System.out.println(temp.getAttribute(\"outerHTML\"));\n\t\t  \n\t\t driver.findElement(By.id(\"signup\"));\n\t\t return true;\n\t} catch (TimeoutException e) {\n\t\t// TODO: handle exception\n\t\tSystem.out.println(e);\n\t\t\n\t}\n\t return false;\n }\n\t\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.remote.RemoteWebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class MimicJCI {\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t  driver = Utility.ini(FilePath);\n\t}\n\n\t  @Test\n\t  public void testLogin()  throws Exception {\n\t\t driver.get(\"https://accounts.google.com/signup/v2\");\n\n\t//location strategy is by Id\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\n\t\tWebElement FirstName = driver.findElement(By.id(\"First_Name\"));\n\t\tjs.executeScript(\"arguments[0].click()\",FirstName);\n//\t\tFirstName.sendKeys(\"hi\");\n//\t\tThread.sleep(10000);\n\t\t\n\t\t\n\t  }\n\t  \n\t  \n\n\t  @AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class PopperTimeOutTest {\n\tprivate WebDriver driver;\n\n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t  driver = Utility.ini(FilePath);\n\t}\n\n\t  @SuppressWarnings(\"deprecation\")\n\t@Test\n\t  public void testNullPointerForSingle()  throws Exception {\n\t\t driver.get(\"localhost:4444/\");\n\t\t Date D1 = new Date();\n\t\t try {\n\t\t\t driver.findElement(By.id(\"dropdown_not_present\")).click();\n\t\t} catch (Error e) {\n\t\t\t// TODO: handle exception\n\t\t\tDate D2 = new Date();\n\t\t\tSystem.out.println(\"check if Popper time out is approx \"+((D2.getSeconds()-D1.getSeconds())*2) );\n\t\t\t\n\t\t}\n\t\t \n\t\t \n\t\t\n\t  }\n\t  @SuppressWarnings(\"deprecation\")\n\t@Test\n\t  public void testNullPointerForMulti()  throws Exception {\n\t\t  driver.get(\"localhost:4444/\");\n\t\t\t Date D1 = new Date();\n\t\t\t try {\n\t\t\t\t driver.findElements(By.id(\"dropdown_not_present\")).get(0).click();\n\t\t\t} catch (Error e) {\n\t\t\t\t// TODO: handle exception\n\t\t\t\tDate D2 = new Date();\n\t\t\t\tSystem.out.println(\"check if Popper time out is approx \"+(( D2.getSeconds()-D1.getSeconds() )*2) );\n\t\t\t\t\n\t\t\t}\n\t  }\n//\t  \n\n\t  @AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SerializeMapperTest {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\ttry {\n\t\t\tThread.sleep(10000);\n\n\t\t\tdriver.get(\"http://vscjnvstp-02:8080/BC140/?company=CRONUS%20International%20Ltd.&dc=0\");\n\t\t\tThread.sleep(10000);\n\t\t\tdriver.switchTo().frame(0);\n\t\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div[2]/form/div/div[2]/nav/div/div/nav/div[1]/div/div[2]/div/div/div/div[1]/div/div/div[3]/div/div[2]/div/div[49]/div/button/div[2]/span/span\")).click();\n\t\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div[2]/form/div/div[2]/nav/div/div/nav/div[2]/div[2]/div/div/div/div[2]/div/div/div/div[1]/div/div/div/div/div[2]/div/div[1]/div[3]/button/span/span\")).click();\n\t\t\tThread.sleep(10000);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t\tSystem.out.println(e);\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n//\t    \n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestFindElementsSize {\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testSize(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4200\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\")).click();\n\t\t\tThread.sleep(1000);\n//\t\t\t  driver.findElement(By.id(\"firstName\"));\n\n//\t\t\t  List<WebElement> first = driver.findElements(By.name(\"firstName\"));\n//\t\t\t  System.out.println(first.size());\n//\t\t\t  first.get(0).sendKeys(\"Pravin\");\n\t\t\tList<WebElement> first1 = driver.findElements(By.name(\"first_Name_not_present\"));\n\t\t\tSystem.out.println(first1.size() + \" this should be zero\");\n\t\t\tfirst1.get(0).sendKeys(\"Pravin\");\n\n//\t\t\t  driver.get(\"https://developer.salesforce.com/docs/component-library/bundle/lightning:textarea/example\");\n//\t\t\t  driver.findElement(By.xpath(\"//textarea[@id=\\\"input-242\\\"]\"));\n//\t\t\t  driver.getCurrentUrl();\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForCheckingBatchModeMulti {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenDatabaseEmptyMultiple(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\"));\n\t\t\t// Make the database empty to verify whether error is thrown when db is empty in\n\t\t\t// batch mode\n\n\t\t\t// Give a name which is not present in the page to verify the batch mode error\n\t\t\t// in multiple element.\n\t\t\tdriver.findElements(By.name(\"first_Name\")).get(0).sendKeys(\"John\");\n\t\t\t// Java throws error in the above code as the name is nor present and the db is\n\t\t\t// empty in batch mode.\n\t\t\tdriver.findElement(By.name(\"lastName\")).sendKeys(\"Doe\");\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForCheckingBatchModeSIngle {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenDatabaseEmptySingle(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\")).click();\n\t\t\t;\n\t\t\t// Make the database empty to verify whether error is thrown when db is empty in\n\t\t\t// batch mode\n\n\t\t\t// Give an id which is not present in the page to verify the batch mode error.\n\n\t\t\tdriver.findElement(By.id(\"first_Name\")).sendKeys(\"John\");\n\t\t\t// Java throws error in the above code as the id is nor present and the db is\n\t\t\t// empty in batch mode.\n\t\t\tdriver.findElement(By.name(\"lastName\")).sendKeys(\"Doe\");\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\t\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\n//import org.junit.Assert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForFindElement {\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void findElementUsingWebdriver(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tSystem.out.println(DiceHelper.diceCoefficient(\n\t\t\t\t\t\"<input type=\\\"text\\\" class=\\\"whsOnd zHQkBf\\\" jsname=\\\"YPqjbf\\\" autocomplete=\\\"off\\\" spellcheck=\\\"false\\\" tabindex=\\\"0\\\" aria-label=\\\"First name\\\" name=\\\"firstName\\\" value=\\\"\\\" autocapitalize=\\\"sentences\\\" id=\\\"firstName\\\" data-initial-value=\\\"\\\">\",\n\t\t\t\t\t\"\\\"<input type=\\\"text\\\" class=\\\"whsOnd zHQkBf\\\" jsname=\\\"YPqjbf\\\" autocomplete=\\\"off\\\" spellcheck=\\\"false\\\" tabindex=\\\"0\\\" aria-label=\\\"First name\\\" name=\\\"firstName\\\" value=\\\"\\\" autocapitalize=\\\"sentences\\\" id=\\\"blahblah\\\" data-initial-value=\\\"\\\">\\\"\"));\n//\t\t\t  System.out.println(DiceHelper.diceCoefficient(\"firstName\", \"blahblah\"));\n\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4200\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\")).click();\n\t\t\t;\n\t\t\tWebElement t1 = driver.findElement(By.id(\"firstName\"));\n\t\t\tString t1String = t1.getAttribute(\"outerHTML\");\n\t\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\tje.executeScript(\"document.getElementById('firstName').id=\\\"blahblah\\\"\");\n\t\t\tWebElement t2 = driver.findElement(By.id(\"firstName\"));\n\t\t\tdouble Score = DiceHelper.diceCoefficient(t1String, t2.getAttribute(\"outerHTML\").toString());\n\t\t\tSystem.out.println(Score);\n\t\t\tSystem.out.println(t2.getAttribute(\"outerHTML\"));\n\t\t\tassertEquals(Score > 0.80, true);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForFindElementByCssSelector {\n\n\tprivate RemoteWebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\n\t\tdriver = (RemoteWebDriver) Utility.iniRemoteDriver(FilePath);\n\t\tdriver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void singleElement(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"https://www.amazon.in/\");\n\n\t\t\tWebElement t1 = driver.findElementByCssSelector(\"[id=\\\"nav-link-accountList\\\"]\");\n\n\t\t\tString t1String = t1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(t1String);\n//\t\t\t\t  driver.get(\"https://www.amazon.in/\");\n\t\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\tje.executeScript(\"document.getElementById('nav-link-accountList').id = \\\"nav-link-accountListInfy\\\"\");\n\t\t\tWebElement t2 = driver.findElementByCssSelector(\"[id=\\\"nav-link-accountList\\\"]\");\n\t\t\tdouble Score = DiceHelper.diceCoefficient(t1String, t2.getAttribute(\"outerHTML\").toString());\n\t\t\tSystem.out.println(t1String + \" \" + \"original tag\");\n\t\t\tSystem.out.println(t2.getAttribute(\"outerHTML\") + \" \" + \"Tag found by Self healing\");\n\t\t\tSystem.out.println(Score);\n\n\t\t\tassertEquals(Score > 0.80, true);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t\t\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void multiElement(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"https://www.amazon.in/\");\n\n\t\t\tWebElement t1 = driver.findElementsByCssSelector(\"[id=\\\"nav-link-accountList\\\"]\").get(0);\n\n\t\t\tString t1String = t1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(t1String);\n//\t\t\t\t  driver.get(\"https://www.amazon.in/\");\n\t\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\tje.executeScript(\"document.getElementById('nav-link-accountList').id = \\\"nav-link-accountListInfy\\\"\");\n\t\t\tWebElement t2 = driver.findElementsByCssSelector(\"[id=\\\"nav-link-accountList\\\"]\").get(0);\n\t\t\tdouble Score = DiceHelper.diceCoefficient(t1String, t2.getAttribute(\"outerHTML\").toString());\n\t\t\tSystem.out.println(t1String + \" \" + \"original tag\");\n\t\t\tSystem.out.println(t2.getAttribute(\"outerHTML\") + \" \" + \"Tag found by Self healing\");\n\t\t\tSystem.out.println(Score);\n\n\t\t\tassertEquals(Score > 0.80, true);\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\t\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForFindElementsByClassName {\n\tprivate RemoteWebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t  @Parameters({\"FilePath\"})\n\t  @BeforeClass\n\t  public void setUp(String FilePath) throws Exception {\n\t    \n\t\tdriver = (RemoteWebDriver) Utility.iniRemoteDriver(FilePath);\n\t    driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);\n\t  }\n\t  @Test\n\t  @Parameters({\"FilePath\"})\n\t  public void multielementByClassname(String FilePath)  throws Exception {\n\t\t  \n\t\t  try {\n\t\t\t  driver.get(\"http://mysparshv2/Pages/Home.aspx\");\n//\t\t\t  WebElement t1 = driver.findElementsByClassName(\"icon-setlabs\").get(10);\n//\t\t\t  String t1String = t1.getAttribute(\"outerHTML\");\n//\t\t\t  System.out.println(t1String);\n\t\t\t  JavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\t  je.executeScript(\"document.getElementsByClassName('icon-setlabs')[10].className = \\\"icon-setlabs-custom\\\"\");\n\t\t\t  List<WebElement> t2 = driver.findElementsByClassName(\"icon-setlabs\");\n\t\t\t  for (Iterator<WebElement> iterator = t2.iterator(); iterator.hasNext();) {\n\t\t\t\tWebElement webElement = iterator.next();\n\t\t\t\tSystem.out.println(webElement.getAttribute(\"outerHTML\"));\n\t\t\t\t\n\t\t\t}\n//\t\t\t  double Score = DiceHelper.diceCoefficient(t1String, t2.get(10).getAttribute(\"outerHTML\").toString());\n//\t\t\t  System.out.println(t1String+\" \"+\"original tag\");\n\t\t\t  System.out.println(t2.get(10).getAttribute(\"outerHTML\")+\" \"+\"Tag found by Self healing\");\n//\t\t\t  System.out.println(Score);\n\t\t\t  \n//\t\t\t  assertEquals(Score>0.80, true);\n\t\t\t} catch (Exception e) {\n\t\t\t\t// TODO: handle exception\n\t\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t\t} catch (Error E) {\n\t\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(E);\n\t\t\t\t}\n\n\t\t\t}\n\t\t   \n\t\t \n\t  }\n\t  @AfterClass\n\t  public void tearDown() throws Exception {\n\t\t  driver.quit();\n\t  }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForFindElements_isDisplayed {\n\n\tprivate RemoteWebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\n\t\tdriver = (RemoteWebDriver) Utility.iniRemoteDriver(FilePath);\n\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void multiELementIsDisplayed(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"https://www.amazon.in/ref=cs_503_link/\");\n\t\t\tWebElement t1 = driver.findElementsByXPath(\"//*[@id=\\\"nav-logo\\\"]/a[1]\").get(0);\n\t\t\tString T1outer = t1.getAttribute(\"outerHTML\");\n\t\t\tJavascriptExecutor JS = (JavascriptExecutor) driver;\n\t\t\tSystem.out.println(t1.isDisplayed());\n\t\t\tJS.executeScript(\"document.getElementById('nav-logo').id='nav-lo'\");\n\t\t\tWebElement t2 = driver.findElementsByXPath(\"//*[@id=\\\"nav-logo\\\"]/a[1]\").get(0);\n\t\t\tString T2outer = t2.getAttribute(\"outerHTML\");\n\t\t\tdouble Score = DiceHelper.diceCoefficient(T1outer, T2outer);\n\t\t\tassertEquals(Score > 0.80, true);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Cookie;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForImplicitWait {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t\tdriver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testImplicitWait(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4200\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\")).click();//// *[@id=\"signup\"]\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"document.getElementById('firstName').id='first_Name'\");\n\n//\t\t\t\tnew Thread() {\n//\t\t\t    @Override\n//\t\t\t    public void run() {\n//\t\t\t        try {\n//\t\t\t            Thread.sleep(25000);\n//\t\t\t        } catch (InterruptedException e) {\n//\t\t\t            e.printStackTrace();\n//\t\t\t        }\n\t//\n\t//\n//\t\t\t        // your code here\n//\t\t\t        \n\t//\n//\t\t\t    }\n//\t\t\t}.start();\n\t\t\tCookie c = new Cookie(\"hello\", \"hi\");\n\t\t\tdriver.manage().addCookie(c);\n\t\t\tSystem.out.println(driver.manage().getCookieNamed(\"hello\"));\n\t\t\tSystem.out.println(driver.manage().getCookies());\n\t\t\tdriver.manage().deleteCookie(c);\n\n\t\t\tSystem.out.println(new Date());\n\t\t\tdriver.findElement(By.id(\"firstName\"));\n\t\t\tSystem.out.println(new Date());\n\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForMultiMouseOutEvent {\n\tprivate RemoteWebDriver driver;\n\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = (RemoteWebDriver) Utility.ini(FilePath);\n\t\tdriver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void MultiElementMouseOut(String FilePath) throws Exception {\n\n\t\ttry {\n\t\t\tdriver.get(\"https://www.flipkart.com/\");\n\n\t\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/button\")).click();\n\t\t\tActions actions = new Actions(driver);\n\t\t\tWebElement target = driver.findElement(By.xpath(\"//*[@id='container']/div/div[2]/div/ul/li[3]/span\"));\n\t\t\tactions.moveToElement(target).build().perform();\n\t\t\tdriver.findElementsByClassName(\"_1YVU3_\").get(2).click();\n\t\t\tdriver.findElementsByXPath(\"/html/body/div/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]/a\").get(0).click();\n\t\t\tdriver.findElement(By.xpath(\n\t\t\t\t\t\"//*[@id=\\\"container\\\"]/div/div[3]/div[2]/div[1]/div[2]/div[2]/div/div[1]/div/a/div[1]/div/div/div/img\"))\n\t\t\t\t\t.click();\n\n\t\t\tdriver.get(\"https://www.flipkart.com/\");\n\n\t\t\tdriver.findElementsByClassName(\"_1YVU3_\").get(2).click();\n\t\t\tWebElement element = driver\n\t\t\t\t\t.findElementsByXPath(\"/html/body/div/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]\").get(0);\n\n\t\t\tJavascriptExecutor JS = (JavascriptExecutor) driver;\n\t\t\tJS.executeScript(\"arguments[0].setAttribute('id','SelfDiagnosticTestCustomIdForATAg')\", element);\n\t\t\tJS.executeScript(\n\t\t\t\t\t\"document.getElementById('SelfDiagnosticTestCustomIdForATAg').innerHTML='<span><a title=\\\"Shirts\\\" href=\\\"/men/shirts/pr?sid=2oq,s9b,mg4&amp;otracker=nmenu_sub_Men_0_Shirts\\\">Shirts</a</span>'\");\n\t\t\tdriver.findElementsByXPath(\"/html/body/div/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]/a\").get(0).click();\n\t\t\tdriver.findElement(By.xpath(\n\t\t\t\t\t\"//*[@id=\\\"container\\\"]/div/div[3]/div[2]/div[1]/div[2]/div[2]/div/div[1]/div/a/div[1]/div/div/div/img\"))\n\t\t\t\t\t.click();\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\t\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\n\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForMultiSelector {\n\tprivate WebDriver driver;\n\t//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\tpublic void testThrowExceptionFindElement()  throws Exception {\n\t\t\n\t\tdriver.get(\"https://developer.salesforce.com/docs/component-library/bundle/lightning:textarea/example\");\n\t\t//\"//HTML[(count(preceding-sibling::*)+1) = 1]/BODY[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 20]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 3]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/LIGHTNING-TEXTAREA[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/TEXTAREA[(count(preceding-sibling::*)+1) = 1]\"\n\t\tString a = \"/HTML[(count(preceding-sibling::*)+1) = 1]/BODY[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 20]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 3]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 1]/LIGHTNING-TEXTAREA[(count(preceding-sibling::*)+1) = 2]/DIV[(count(preceding-sibling::*)+1) = 2]/TEXTAREA[(count(preceding-sibling::*)+1) = 1],\";\n\t\tString b = a.split(\",\")[0];\n\t\tSystem.out.println(b);\n//\t\tStringEscapeUtils.escapeHtml4(a)\n\t\tdriver.findElement(By.xpath(a.split(\",\")[0])).sendKeys(\"hi\");\n\n\n\n\t}\n\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForSingleMouseOutEvent {\n\tprivate RemoteWebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = (RemoteWebDriver) Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void SingleElementMouseOut(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"https://www.flipkart.com/\");\n//\t\t    \n\t\t\tnew WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(By.id(\"firstName_random\")));\n\t\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/button\")).click();\n\t\t\tActions actions = new Actions(driver);\n\t\t\tWebElement target = driver.findElement(By.xpath(\"//*[@id='container']/div/div[2]/div/ul/li[3]/span\"));\n\t\t\tactions.moveToElement(target).build().perform();\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"container\\\"]/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]/a\"))\n\t\t\t\t\t.click();\n\t\t\tdriver.findElement(By.xpath(\n\t\t\t\t\t\"//*[@id=\\\"container\\\"]/div/div[3]/div[2]/div[1]/div[2]/div[2]/div/div[1]/div/a/div[1]/div/div/div/img\"))\n\t\t\t\t\t.click();\n\n\t\t\tdriver.get(\"https://www.flipkart.com/\");\n\t\t\tActions actions1 = new Actions(driver);\n\t\t\tWebElement target1 = driver.findElement(By.xpath(\"//*[@id='container']/div/div[2]/div/ul/li[3]/span\"));\n\t\t\tactions1.moveToElement(target1).build().perform();\n\t\t\tWebElement element = driver\n\t\t\t\t\t.findElementsByXPath(\"/html/body/div/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]\").get(0);\n\t\t\tJavascriptExecutor JS = (JavascriptExecutor) driver;\n\t\t\tJS.executeScript(\"arguments[0].setAttribute('id','SelfDiagnosticTestCustomIdForATAg')\", element);\n\t\t\tJS.executeScript(\n\t\t\t\t\t\"document.getElementById('SelfDiagnosticTestCustomIdForATAg').innerHTML='<span><a title=\\\"Shirts\\\" href=\\\"/men/shirts/pr?sid=2oq,s9b,mg4&amp;otracker=nmenu_sub_Men_0_Shirts\\\">Shirts</a</span>'\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"container\\\"]/div/div[2]/div/ul/li[3]/ul/li/ul/li[2]/ul/li[4]/a\"))\n\t\t\t\t\t.click();\n\t\t\tdriver.findElement(By.xpath(\n\t\t\t\t\t\"//*[@id=\\\"container\\\"]/div/div[3]/div[2]/div[1]/div[2]/div[2]/div/div[1]/div/a/div[1]/div/div/div/img\"))\n\t\t\t\t\t.click();\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n//\t\t  \n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForThrowException {\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\t  \n\t@Parameters({\"FilePath\"})\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception \n\t{\t    \n\t  driver = Utility.ini(FilePath);\n\t}\n\n\t  @Test\n\t  public void testThrowExceptionFindElement()  throws Exception {\n\t\t driver.get(\"https://accounts.google.com/signup/v2\");\n\n\t\ttry {\n\t\t\tWebElement FirstName = driver.findElement(By.id(\"First_Name\"));\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\t\n\n\t\t\n\t  }\n\t  \n\t  @Test\n\t  public void testThrowExceptionFindElements()  throws Exception {\n\t\t driver.get(\"https://accounts.google.com/signup/v2\");\n\n\t\ttry {\n\t\t\tWebElement FirstName = driver.findElements(By.id(\"First_Name\")).get(0);\n\t\t\tFirstName.click();\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\t\n\n\t\t\n\t  }\n\n\t  \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.remote.RemoteWebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestForWordVector {\n\n\tprivate WebDriver driver;\n//\t  private StringBuffer verificationErrors = new StringBuffer();\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\ttry {\n\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tdriver.get(\"localhost:4444\");\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"signup\\\"]\"));\n//\t\t    Thread.sleep(10000);\n\t\t\t// Test to check the usage of cosine similiarity in the server.\n\t\t\t// even when the dias score is low due to high similiarity in the cosine\n\t\t\t// score the element was found correctly and Accept reject popover will be shown\n\n\t\t\t// Location strategy is by inner Text\n\t\t\tdriver.findElement(By.className(\"RveJvd\")).click();\n\n\t\t\t// driver.get(\"https://accounts.google.com/signup/v2\");\n\t\t\tJavascriptExecutor JS = (JavascriptExecutor) driver;\n\t\t\tJS.executeScript(\"document.getElementsByClassName('RveJvd')[0].innerText='upcoming'\");\n\t\t\tJS.executeScript(\"document.getElementsByClassName('RveJvd')[0].className='RveJ'\");\n\n\t\t\tWebElement we = driver.findElement(By.className(\"RveJvd\"));\n\t\t\tString s = we.getAttribute(\"innerText\");\n\t\t\twe.click();\n\t\t\tassertEquals(s, \"upcoming\");\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestingIframeSingleElement {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"http://vinvivstp-19:8080/ml/authentication/signin\");\n\t\t\tHelper.isElementPresent(driver, By.id(\"username\"));\n\n\t\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"ajaj\");\n\t\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Infy@12345\");\n\n\t\t\tdriver.findElement(By.cssSelector(\"#auth > div > form > div.text-center.form-group > button\")).click();\n\n\t\t\tHelper.isElementPresent(driver, By.cssSelector(\n\t\t\t\t\t\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(4) > div.container > fieldset > div > div.col-md-4.tile-all.ng-scope.tile-left > a:nth-child(2) > div > div.tile-default\"));\n\n\t\t\tdriver.findElement(By.cssSelector(\n\t\t\t\t\t\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(4) > div.container > fieldset > div > div.col-md-4.tile-all.ng-scope.tile-left > a:nth-child(2) > div > div.tile-default\"))\n\t\t\t\t\t.click();\n\n//\t\t\t  Helper.isElementPresent(driver, By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(4) > div.container-fluid.tile-ui-view.ng-scope > div:nth-child(2) > div > ul > li:nth-child(2) > div > div > a\"));\n\n\t\t\tdriver.findElement(By.cssSelector(\n\t\t\t\t\t\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(4) > div.container-fluid.tile-ui-view.ng-scope > div:nth-child(2) > div > ul > li:nth-child(2) > div > div > a\"))\n\t\t\t\t\t.click();\n\n\t\t\tdriver.switchTo().frame(\"my-iframe\");\n\n\t\t\tHelper.isElementPresent(driver, By.cssSelector(\"#input\"));\n\n//\t\t\t  Thread.sleep(30000);\n\n\t\t\tWebElement input = driver.findElement(By.cssSelector(\"#inpu\"));\n\n//\t\t\t  driver.switchTo().defaultContent();\n\n\t\t\tinput.sendKeys(\"helllo\");\n\n//\t\t\t  new WebDriverWait(driver, 40).until(ExpectedConditions.invisibilityOf(driver.findElement(By.cssSelector(\"#notify-msg-tensors\"))));\n\n\t\t\tSystem.out.println(\"element disappearredd\");\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n//\t\t  driver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestingIframeUsingDummyWebApplication {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLogin(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4200/\");\n\t\t\tThread.sleep(2000);\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"iframe\\\"]\")).click();\n\t\t\tThread.sleep(5000);\n\t\t\tdriver.switchTo().frame(\"iframe1\");\n\t\t\tThread.sleep(2000);\n\t\t\tWebElement input1 = driver.findElement(By.xpath(\"//*[@id=\\\"js-link-box-en\\\"]/strong\"));\n\t\t\tString input1String = input1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.print(\"first : \" + input1String);\n\t\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\tje.executeScript(\"document.getElementById('js-link-box-en').id = \\\"js-link-box\\\"\");\n\t\t\tWebElement input2 = driver.findElement(By.xpath(\"//*[@id=\\\"js-link-box-en\\\"]/strong\"));\n\t\t\tString input2String = input2.getAttribute(\"outerHTML\");\n\t\t\tdouble Score = DiceHelper.diceCoefficientOptimized(input1String, input2String);\n\t\t\tSystem.out.print(\"second : \" + input2String);\n\t\t\tSystem.out.print(\"Score : \" + Score);\n\t\t\tThread.sleep(2000);\n\t\t\t// assertEquals(Score>0.50, true);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(e);\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testLoginMulti(String FilePath) throws Exception {\n\t\ttry {\n\t\t\tdriver.get(\"localhost:4200/\");\n\t\t\tThread.sleep(2000);\n\t\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"iframe\\\"]\")).click();\n\t\t\tThread.sleep(5000);\n\t\t\tdriver.switchTo().frame(\"iframe1\");\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tWebElement input1 = driver.findElements(By.xpath(\"//*[@id=\\\"js-link-box-en\\\"]/strong\")).get(0);\n\t\t\tString input1String = input1.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.print(\"first : \" + input1String);\n\t\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\t\tje.executeScript(\"document.getElementById('js-link-box-en').id = \\\"js-link-box\\\"\");\n\t\t\tWebElement input2 = driver.findElements(By.xpath(\"//*[@id=\\\"js-link-box-en\\\"]/strong\")).get(0);\n\t\t\tString input2String = input2.getAttribute(\"outerHTML\");\n\t\t\tdouble Score = DiceHelper.diceCoefficientOptimized(input1String, input2String);\n\t\t\tSystem.out.print(\"second : \" + input2String);\n\t\t\tSystem.out.print(\"Score : \" + Score);\n\t\t\tThread.sleep(2000);\n\t\t\t// assertEquals(Score>0.50, true);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(e);\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\t\t\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage infosys.ivs.innovation.selfdiagnostic.testing;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TestUserInteractionFalse {\n\n\tprivate WebDriver driver;\n\n\t@Parameters({ \"FilePath\" })\n\t@BeforeClass\n\tpublic void setUp(String FilePath) throws Exception {\n\t\tdriver = Utility.ini(FilePath);\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenSimilarityIsNotMet(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tdriver.get(\"http://mysparshv2/Pages/Home.aspx\");\n\t\t\tWebElement WebApps = driver.findElement(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"));\n\t\t\tString outHtml1 = WebApps.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml1);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\n\t\t\t\t\t\"document.querySelector(\\\"#ftr > div > div.ftrCntntInner > div.dsclmr.clearfix > ul > li:nth-child(5) > a\\\").innerText='zdbsfjkdbfjksbc jsdkbcsdjkcbfasjcb xjcbasdjklcdbnaskl';\");\n\t\t\tWebElement webAppChanged = driver.findElement(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"));\n\t\t\tString outHtml2 = webAppChanged.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml2);\n\t\t\tSystem.out.println(DiceHelper.diceCoefficientOptimized(outHtml1, outHtml2));\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Test\n\t@Parameters({ \"FilePath\" })\n\tpublic void testWhenSimilarityIsNotMetInMultiElement(String FilePath) throws Exception {\n\t\ttry {\n\t\t\t// set user interaction false\n\t\t\t// set similarity to a high value\n\t\t\tdriver.get(\"http://mysparshv2/Pages/Home.aspx\");\n\t\t\tWebElement WebApps = driver.findElements(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"))\n\t\t\t\t\t.get(0);\n\t\t\tString outHtml1 = WebApps.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml1);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\n\t\t\t\t\t\"document.querySelector(\\\"#ftr > div > div.ftrCntntInner > div.dsclmr.clearfix > ul > li:nth-child(5) > a\\\").innerText='zdbsfjkdbfjksbc jsdkbcsdjkcbfasjcb xjcbasdjklcdbnaskl';\");\n\t\t\tWebElement webAppChanged = driver.findElements(By.xpath(\"//div[@id='ftr']//a[contains(text(),'Web Apps')]\"))\n\t\t\t\t\t.get(0);\n\t\t\tString outHtml2 = webAppChanged.getAttribute(\"outerHTML\");\n\t\t\tSystem.out.println(outHtml2);\n\t\t\tSystem.out.println(DiceHelper.diceCoefficientOptimized(outHtml1, outHtml2));\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(\"check if the element that threw exception is in checkList\");\n\t\t} catch (Error E) {\n\t\t\tif (CheckTheErrorStatus.check(FilePath, E.getMessage())) {\n\t\t\t\tSystem.out.println(\"test Case is pass\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(E);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Setting the ChromeDriver\nWebDriverManager.chromedriver().setup();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Retrieve the driver returned by the call\ndriver = getDriver();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Navigate to a particular site\ndriver.navigate().to(\"https://www.saucedemo.com/\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Clossing the web driver\ndriver.quit();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//check whether the page loaded \nassertTrue(loginPage.isLoaded());\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for Acceptance Test Driven Automation Test\n*/\n// Importing Retated Packages\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class AcceptanceTestDrivenAutomationTest {\n    WebDriver driver;\n    //This method will run once before all of the tests in our class\n    @BeforeClass\n    public static void setupClass() {\n         //Setting the ChromeDriver\n        WebDriverManager.chromedriver().setup();\n    }\n    @Before\n    public void setup()\n    {   // Retrieve the driver returned by the call\n        driver = getDriver();\n    }\n    @After\n    public void cleanup()\n    {   //Clossing the Current web browser\n        driver.quit();\n    }\n    @Test\n    public void shouldOpen()\n    {  \n        LoginPage loginPage = new LoginPage(driver);\n        // Opening the login page\n        loginPage.open();\n        //check whether the page loaded with the correct url and tab title\n          assertTrue(loginPage.isLoaded());\n    }\n\n    @Test\n    public void shouldLogin()\n    {\n        LoginPage loginPage = new LoginPage(driver);\n         // Opening the login page\n        loginPage.open();\n        //check whether the page loaded with the correct url and tab title\n        assertTrue(loginPage.isLoaded());\n\n        loginPage.login(\"standard_user\", \"secret_sauce\");\n          // loafing the new page\n        assertTrue(new ProductsPage(driver).isLoaded());\n    }\n\n    private WebDriver getDriver() {\n        //Using WebDriverManager package, we dopn't have to not worry about\n        //where the ChromeDriver comes from and if it's the latest\n        return new ChromeDriver();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//direct test execution to pause for a certain length of time before moving onto the next step\nwait = new WebDriverWait(driver, 10);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//waiting for visibility of element located by By.id\nreturn wait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"user-name\"))).isDisplayed();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Driver waiting for 10ms\nWebDriverWait wait = new WebDriverWait(driver, 10);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//waiting for visibility of element located by By.id\n        ExpectedConditions.presenceOfElementLocated(By.id(\"inventory_filter_container\"))).isDisplayed();\nassertTrue(isDisplayed);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Selenium webdriver driver.findElement() method return Object\nreturn driver.findElement(By.id(\"FAKE LOCATOR\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Telling the system where to find chromedriver. On Windows you also need to add .exe\nSystem.setProperty(\"webdriver.chrome.driver\", \"resources/chromedriver\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// The xPath for the element is a bit complex. Basically what we are looking for is the div that contains the product price\n// and has the same ancestor as the div that contains the itemName (so we know we are checking the price for our specific product)\nString xPath = String.format\n        (\"//div[contains(text(),'%s')]/ancestor::div[@class='inventory_item_description']//div[@class='inventory_item_price']\",\n                itemName);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for BasePage\n*/\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class BasePage {\n    public final WebDriver driver;\n    // WebDriver is directed to wait until a certain condition occurs \n    WebDriverWait wait;\n\n\n    public BasePage(WebDriver driver) {\n     \n        this.driver = driver;\n        //direct test execution to pause for a certain length of time before moving onto the next step\n        wait = new WebDriverWait(driver, 10);\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for LoginPage extends BasePage\n*/\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\n\npublic class LoginPage extends BasePage {\n\n    public LoginPage(WebDriver driver) {\n        super(driver);\n    }\n\n    public void open() {\n       \n        //Open the particular url\n        driver.get(\"http://www.saucedemo.com\");\n    }\n\n    public boolean isLoaded() {\n        //waiting for visibility of element located by By.id\n        return wait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"user-name\"))).isDisplayed();\n    }\n\n    public void login(String userName, String password) {\n        // locate web element using id and populate it\n        driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n        // locate web element using id and populate it\n        driver.findElement(By.id(\"password\")).sendKeys(password);\n        // locate web element using name and submit it\n        driver.findElement(By.className(\"btn_action\")).submit();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for ProductsPage extends BasePage\n*/\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic class ProductsPage extends BasePage{\n    public ProductsPage(WebDriver driver) {\n        super(driver);\n    }\n\n    public boolean isLoaded() {\n        return wait.until(\n                 //waiting for visibility of element located by By.id\n                ExpectedConditions.presenceOfElementLocated(By.id(\"inventory_filter_container\"))).isDisplayed();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for Duplication\n*/\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class Duplication {\n    WebDriver driver;\n    @Before\n    public void setup()\n    { // Retrieve the driver returned by the call\n        driver = getDriver();\n    }\n    @After\n    public void cleanup()\n    {// quit the driver  by the call\n        driver.quit();\n    }\n    @Test\n    public void test1() {\n        // set the URL\n        driver.get(\"http://www.saucedemo.com\");\n        // locate web element using id and populate it\n        driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n       // locate web element using id and populate it\n        driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        // locate web element using className and submit it\n        driver.findElement(By.className(\"btn_action\")).submit();\n        // Driver waiting for 10ms\n        WebDriverWait wait = new WebDriverWait(driver, 10);\n        boolean isDisplayed = wait.until(\n                //waiting for visibility of element located by By.id\n                ExpectedConditions.presenceOfElementLocated(By.id(\"inventory_filter_container\"))).isDisplayed();\n        assertTrue(isDisplayed);\n    }\n    @Test\n    public void test2() {\n         // set the URL\n        driver.get(\"http://www.saucedemo.com\");\n        // locate web element using id and populate it\n        driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n       // locate web element using id and populate it\n        driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        // locate web element using className and submit it\n        driver.findElement(By.className(\"btn_action\")).submit();\n        // Driver waiting for 10ms\n        WebDriverWait wait = new WebDriverWait(driver, 10);\n        boolean isDisplayed = wait.until(\n                //waiting for visibility of element located by By.id\n                ExpectedConditions.presenceOfElementLocated(By.id(\"inventory_filter_container\"))).isDisplayed();\n        assertTrue(isDisplayed);\n    }\n    @Test\n    public void test3() {\n        open();\n        // setting the text field by user-name\n        typeText(By.id(\"user-name\"), \"standard_user\");\n        // setting the text field by password\n        typeText(By.id(\"password\"), \"secret_sauce\");\n         // click on a button\n        clickButton(By.className(\"btn_action\"));\n          //waiting for visibility of element located by By.id\n        boolean isDisplayed = waitUntilDisplayed(By.id(\"inventory_filter_container\"));\n\n        assertTrue(isDisplayed);\n    }\n    @Test\n    public void test4() {\n        open();\n        // setting the text field by user-name\n        typeText(By.id(\"user-name\"), \"problem_user\");\n         // setting the text field by password\n        typeText(By.id(\"password\"), \"secret_sauce\");\n        // click on a button\n        clickButton(By.className(\"btn_action\"));\n          //waiting for visibility of element located by By.id\n        boolean isDisplayed = waitUntilDisplayed(By.id(\"inventory_filter_container\"));\n\n        assertTrue(isDisplayed);\n    }\n    private boolean waitUntilDisplayed(By locator) {\n       // driver wait for 10ms\n\n        WebDriverWait wait = new WebDriverWait(driver, 10);\n        return wait.until(\n                ExpectedConditions.presenceOfElementLocated(locator)).isDisplayed();\n    }\n\n    private void clickButton(By locator) {\n         \n        driver.findElement(locator).submit();\n    }\n\n    private void typeText(By locator, String string) {\n        driver.findElement(locator).sendKeys(string);\n    }\n\n    private void open() {\n        driver.get(\"http://www.saucedemo.com\");\n    }\n\n    private WebDriver getDriver() {\n        //Telling the system where to find chromedriver. On Windows you also need to add .exe\n        System.setProperty(\"webdriver.chrome.driver\", \"resources/chromedriver\");\n        return new ChromeDriver();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for loginPage\n*/\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class LoginPage {\n    //Private driver for a page object so that it's never accessible to our tests\n    private WebDriver driver;\n    //Private element locator that is never open to our tests\n    private WebElement getUserNameField()\n    {\n        return driver.findElement(By.id(\"user-name\"));\n    }\n    //Public login method, what the user does!\n    public void login(String userName, String password) {\n        getUserNameField().sendKeys(userName);\n        driver.findElement(By.id(\"password\")).sendKeys(password);\n        driver.findElement(By.className(\"btn_action\")).submit();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for PersonalInfoPage\n*/\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class PersonalInfoPage {\n    //Private driver for a page object so that it's never accessible to our tests\n    private WebDriver driver;\n    //Private element locator that is never open to our tests\n    private WebElement getFirstNameField()\n    {  //Selenium webdriver driver.findElement() method return Object\n        return driver.findElement(By.id(\"FAKE LOCATOR\"));\n    }\n    //Public login method, what the user does!\n    public void fillOutPersonalInformation() {\n       // get method\n        getFirstNameField().sendKeys(\"firstName\");\n        //get method\n        getLastNameField().sendKeys(\"firstName\");\n        getZipCodeField().sendKeys(\"firstName\");\n    }\n\n    private WebElement getZipCodeField() {\n        //Selenium webdriver driver.findElement() method return Object\n        return driver.findElement(By.id(\"FAKE LOCATOR\"));\n    }\n    private WebElement getLastNameField() {\n        //Selenium webdriver driver.findElement() method return Object\n        return driver.findElement(By.id(\"FAKE LOCATOR\"));\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for ProductsPage\n*/\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class ProductsPage {\n    private WebDriver driver;\n    private WebElement getShoppingCartElement()\n    {   //Selenium webdriver driver.findElement() method return Object\n        return driver.findElement(By.id(\"BLABHLABHLJ\"));\n    }\n    public void openShoppingCart() {\n        // get method and click\n        getShoppingCartElement().click();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for PageLoading in a web browser\n*/\n // Importing Retated Packages\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.junit.After;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class PageLoadTest {\n    private WebDriver driver;\n\n    //This method will run once before all of the tests in our class\n    @BeforeClass\n    public static void setupClass() {\n        //Setting the ChromeDriver\n        WebDriverManager.chromedriver().setup();\n    }\n\n    @Test\n    public void checkPageLoad() {\n        // Retrieve the driver returned by the call\n        driver = getDriver();\n        //Navigate to a particular site\n        driver.navigate().to(\"https://www.saucedemo.com/\");\n    }\n\n    @After\n    public void tearDown() {\n        // Clossing the web driver\n        driver.quit();\n    }\n\n    private WebDriver getDriver() {\n        //Using WebDriverManager package, we are able to not worry about\n        return new ChromeDriver();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for Synchronization\n*/\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class Synchronization {\n    WebDriver driver;\n    String elementExistsInDOM = \"https://the-internet.herokuapp.com/dynamic_loading/1\";\n    String elementRenderedAfter = \"https://the-internet.herokuapp.com/dynamic_loading/2\";\n    By locator = By.id(\"finish\");\n    @Before\n    public void setup()\n    {\n        driver = getDriver();\n    }\n    @After\n    public void cleanup()\n    {\n        driver.quit();\n    }\n    @Test\n    public void implicitWaitFindsHiddenElement() {\n        driver.get(elementExistsInDOM);\n        driver.findElement(locator);\n    }\n    @Test\n    public void implicitWaitThrowsNoSuchElementException() {\n        driver.get(elementRenderedAfter);\n        driver.findElement(locator);\n    }\n    @Test\n    public void configuredImplicitWait() {\n        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n        driver.get(elementRenderedAfter);\n        driver.findElement(locator);\n    }\n    @Test(expected = org.openqa.selenium.TimeoutException.class)\n    public void explicitWaitFixesImplicitWaitIssues() {\n        driver.get(elementExistsInDOM);\n        WebDriverWait wait = new WebDriverWait(driver, 5);\n        wait.until(ExpectedConditions.visibilityOfElementLocated(locator));\n    }\n    @Test\n    public void explicitWaitWhenElementPresent() {\n        driver.get(elementExistsInDOM);\n        WebDriverWait wait = new WebDriverWait(driver, 5);\n        wait.until(ExpectedConditions.presenceOfElementLocated(locator));\n    }\n    @Test\n    public void correctSynchronization() {\n        driver.get(elementRenderedAfter);\n        WebDriverWait wait = new WebDriverWait(driver, 5);\n//waiting for visibility of element located by By.id\n        WebElement startButton =\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"start\"))).findElement(By.xpath(\"//button\"));\n        startButton.click();\n//waiting for visibility of element located by By.id\n        WebElement helloWorldElement =\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"finish\")));\n    }\n\n    private WebDriver getDriver() {\n        //Telling the system where to find chromedriver. On Windows you also need to add .exe\n        System.setProperty(\"webdriver.chrome.driver\", \"resources/chromedriver\");\n        return new ChromeDriver();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for ShoppingCartPage\n*/\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class ShoppingCartPage {\n    //Private driver for a page object so that it's never accessible to our tests\n    private WebDriver driver;\n    //Private element locator that is never open to our tests\n    private WebElement getCheckoutButton()\n    {\n        return driver.findElement(By.id(\"FAKE LOCATOR\"));\n    }\n    //Public login method, what the user does!\n    public void startCheckout() {\n        getCheckoutButton().click();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for ProductsPage\n*/\n\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class ProductsPage {\n    private WebDriver driver;\n    private WebElement getShoppingCartElement()\n    {\n        return driver.findElement(By.id(\"BLABHLABHLJ\"));\n    }\n    public void openShoppingCart() {\n        getShoppingCartElement().click();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for CSVDataReader\n*/\nimport au.com.bytecode.opencsv.CSVReader;\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVDataReader {\n    WebDriver driver;\n\n    // We use throws IOException because this is the exception we might expect if the file is not found.\n    // Alternatively, we can wrap all our code in a try-catch block, and cath the IOException.\n    public static String[][] readCsvFile() throws IOException {\n        // Here we actually read the CSV file.\n        // We need to provide the file location, the separator used, the quotes character and the starting line.\n        // The file is read as 0-based, and since we have a header line, we wil start at the second line, which means we pass 1 as parameter\n        CSVReader csvReader = new CSVReader(new FileReader(\"src/test/java/csvDataDriven/Users.csv\"), ',', '\"', 1);\n        String[] line;\n        // Here we create a string list, which one element for each line of the CSV\n        List<String[]> userList = new ArrayList<>();\n        while ((line = csvReader.readNext()) != null) {\n            userList.add(line);\n        }\n        // After we get the number of rows and columns, we create a new array which has 2 string values,\n        // which will be the string data (username and password) from our file:\n        int rows = userList.size();\n        int cols = userList.get(0).length;\n        String[][] dataFromCSV = new String[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            String[] eachRow = userList.get(i);\n            for (int j = 0; j < cols; j++) {\n                dataFromCSV[i][j] = eachRow[j];\n            }\n        }\n        return dataFromCSV;\n    }\n\n    private WebDriver getDriver() {\n        return new ChromeDriver();\n    }\n\n    @BeforeEach\n    public void setup() {\n        WebDriverManager.chromedriver().setup();\n        driver = getDriver();\n        driver.get(\"https://www.saucedemo.com/\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        driver.quit();\n    }\n\n    @MethodSource(\"readCsvFile\")\n    @ParameterizedTest\n    public void loginTest(String userName, String password) {\n        driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n        driver.findElement(By.id(\"password\")).sendKeys(password);\n        driver.findElement(By.id(\"login-button\")).click();\n        Assert.assertTrue(driver.findElement(By.className(\"title\")).isDisplayed());\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for CSVExercise\n*/\n\nimport au.com.bytecode.opencsv.CSVReader;\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVExercise {\n    WebDriver driver;\n\n    public static String[][] readCsvFile() throws IOException {\n        CSVReader csvReader = new CSVReader(new FileReader(\"src/test/java/csvDataDriven/Prices.csv\"), ',', '\"', 1);\n        String[] line;\n        List<String[]> userList = new ArrayList<>();\n        while ((line = csvReader.readNext()) != null) {\n            userList.add(line);\n        }\n        int rows = userList.size();\n        int cols = userList.get(0).length;\n        String[][] dataFromCSV = new String[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            String[] eachRow = userList.get(i);\n            for (int j = 0; j < cols; j++) {\n                dataFromCSV[i][j] = eachRow[j];\n            }\n        }\n        return dataFromCSV;\n    }\n\n    private WebDriver getDriver() {\n        return new ChromeDriver();\n    }\n\n    @BeforeEach\n    public void setup() {\n        WebDriverManager.chromedriver().setup();\n        driver = getDriver();\n        driver.get(\"https://www.saucedemo.com/\");\n        driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        driver.findElement(By.id(\"login-button\")).click();\n    }\n\n    @AfterEach\n    public void tearDown() {\n        driver.quit();\n    }\n\n    @MethodSource(\"readCsvFile\")\n    @ParameterizedTest\n    public void loginTest(String itemName, String price) {\n        // The xPath for the element is a bit complex. Basically what we are looking for is the div that contains the product price\n        // and has the same ancestor as the div that contains the itemName (so we know we are checking the price for our specific product)\n        String xPath = String.format\n                (\"//div[contains(text(),'%s')]/ancestor::div[@class='inventory_item_description']//div[@class='inventory_item_price']\",\n                        itemName);\n        WebElement priceElement = driver.findElement(By.xpath(xPath));\n        System.out.println(priceElement.getText());\n        Assert.assertEquals(priceElement.getText(), price);\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n Java Selenium program for  EnumDataDrivenTests\n*/\n\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class EnumDataDrivenTests {\n    WebDriver driver;\n\n    private WebDriver getDriver() {\n        return new ChromeDriver();\n    }\n\n    @BeforeEach\n    public void setup() {\n        WebDriverManager.chromedriver().setup();\n        driver = getDriver();\n        driver.get(\"https://www.saucedemo.com/\");\n    }\n\n    @AfterEach\n    public void tearDown() {\n        driver.quit();\n    }\n\n    // Using the @ParameterizedTest annotation, we let our test know it will run multiple times with different parameters\n    // The @EnumSource lets the test know that the sourse is the Enum class provided as a parameter\n    @ParameterizedTest\n    @EnumSource(User.class)\n    public void loginTest(User user) {\n        driver.findElement(By.id(\"user-name\")).sendKeys(user.toString());\n        driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        driver.findElement(By.id(\"login-button\")).click();\n        Assert.assertTrue(driver.findElement(By.className(\"title\")).isDisplayed());\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n/* \n\tJava Selenium program to create a WebDriver, open a URL and close the browser\n*/\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HelloSelenium {\n    public static void main(String[] args) {\n\t\t//Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C://Selenium-java//chromedriver_win32//chromedriver.exe\");\n\t\t\n\t\t//Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t//launching the specified URL\n        driver.get(\"https://selenium.dev\");\n\n        driver.quit();\n    }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Code to create a webdriver for Chrome\n//Setting system properties of ChromeDriver\nSystem.setProperty(\"webdriver.chrome.driver\", \"C://chromedriver_win32//chromedriver.exe\");\n//Creating an object of ChromeDriver\nWebDriver driver = new ChromeDriver();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Create a Firefox webdriver \nSystem.setProperty(\"webdriver.gecko.driver\",\"Path_of_Firefox_Driver\"); // Setting system properties of FirefoxDriver\nWebDriver driver = new FirefoxDriver(); //Creating an object of FirefoxDriver\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Code to create an IE webdriver \n// Defining System Property for the IEDriver \nSystem.setProperty(\"webdriver.ie.driver\", \"D://IE Driver ServerIEDriverServer.exe\"); \n\n// Instantiate a IEDriver class. \nWebDriver driver=new InternetExplorerDriver();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//launch the URL\ndriver.get(\"https://www.google.com/\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Navigate to the desired URL  \ndriver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");  \n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n\tSelenium script that launches a web driver, navigates to URL \"https://google.com\", populates the search bar with \"Selenium\" and clicks on the search button\n*/\n\n// Java libraries for Selenium\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HelloSelenium {\n\t// main function\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C://Selenium-java//chromedriver_win32//chromedriver.exe\");\n\n\t\t// create Chrome Web Driver\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// open URL\n\t\tdriver.get(\"https://google.com\");\n\n\t\t// get the page title\n\t\tdriver.getTitle(); // => \"Google\"\n\n\t\t// Make sure the element is on the page and is in an interactable state\n\t\tdriver.manage().timeouts().implicitlyWait(Duration.ofMillis(500));\n\n\t\t// search element by name\n\t\tWebElement searchBox = driver.findElement(By.name(\"q\"));\n\t\tWebElement searchButton = driver.findElement(By.name(\"btnK\"));\n\n\t\t// populate the editable field\n\t\tsearchBox.sendKeys(\"Selenium\");\n\n\t\t// click on the button\n\t\tsearchButton.click();\n\n\t\t// search element by name\n\t\tsearchBox = driver.findElement(By.name(\"q\"));\n\t\tsearchBox.getAttribute(\"value\"); // => \"Selenium\"\n\n\t\t// close the browser\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n// locate the text field element which is an \"input\" element \"above\" the password element\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// locate the text field element which is an \"input\" element \"below\" the email element\nBy passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// locate the cancel button element which is an \"button\" element to the \"left of\" the submit element.\nBy cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// locate the submit button element using the fact that it is a \"button\" element \"to the right of\" the cancel element.\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//locate button with name \"btnK\" and click on it\n// locate button\nWebElement searchIcon = driver.findElement(By.name(\"btnK\"));\n// click on the button\nsearchIcon.click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//locate button having class name \"dialog-confirm\" and click on it\ndriver.findElement(By.className(\"dialog-confirm\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//locate search button using CSS selector and click on it\ndriver.findElement(By.cssSelector(\"button.dialog-confirm\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//locate search button using text \"Confirm\" and click on it\ndriver.findElement(By.xpath(\"//button[text()='Confirm']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//click on the search button with id \"idOfButton\"\ndriver.findElement(By.id(\"idOfButton\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Search for button with its tag name\nWebElement btnElem = driver.findElement(By.tagName(\"button\"));\n// click on the button\nbtnElem.click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium code to create a web driver, go to specified URL and click on a\n * button\n */\n\n// import java packages\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class GetButtonElement {\n\n\tpublic static void main(String[] args) {\n\n\t\t// System Property for chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\",\"C:\\chromedriver_win32\\\\chromedriver.exe\");\n\t\t// Initialize chrome Driver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t// Go to the URL\n\t\tdriver.get(\"https://www.python.org/\");\n\n\t\t// Search for text input with name \"q\"\n\t\tWebElement searchBox = driver.findElement(By.name(\"q\"));\n\t\tsearchBox.sendKeys(\"pip\");\n\n\t\t// Locate button with text \"GO\"\n\t\tWebElement btnElem = driver.findElement(By.xpath(\"//button[text()[contains(.,'GO')]]\"));\n\t\t// click on the button\n\t\tbtnElem.click();\n\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n\n\t}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n// Get link with text \"Python\" and click on it\nWebElement pyLink = driver.findElement(By.xpath(\"//a[text()[contains(.,'Python')]]\"));pyLink.click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Click on the link with class \"donate-button\"\ndriver.findElement(By.className(\"donate-button\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//\tPrint the hyperlink for link with \"Events\" as link text \nWebElement events = driver.findElement(By.linkText(\"Events\"));System.out.println(events.getAttribute(\"href\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Click on the link with text containing \"Code\"\nWebElement codes = driver.findElement(By.partialLinkText(\"code\"));codes.click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Print all the hyperlinks present in a page\nList<WebElement> allLinks = driver.findElements(By.tagName(\"a\"));for(\nWebElement link:allLinks)\n\t{\n\t\tSystem.out.println(link.getAttribute(\"href\"));\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create a webdriver and go to URL \"https://www.python.org/\" to download python for Windows\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class DownloadPython {\n\n\t// main function\n\tpublic static void main(String[] args) {\n\n\t\t// create a web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:\\\\chromedriver_win32\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// set the URL that needs to be opened\n\t\tString url = \"https://www.python.org/\";\n\n\t\t// go to the URL\n\t\tdriver.navigate().to(url);\n\n\t\t// click on the link with \"downloads\" in it's hyperlink\n\t\tdriver.findElement(By.cssSelector(\"a[href*='downloads']\")).click();\n\n\t\t// click on the link with text \"Windows\"\n\t\tdriver.findElement(By.linkText(\"Windows\")).click();\n\n\t\t// click on the link with text like \"Latest Python 3\"\n\t\tdriver.findElement(By.partialLinkText(\"Latest Python 3\")).click();\n\n\t\t// click on the link with text containing \"Windows installer (64-bit)\"\n\t\tdriver.findElement(By.xpath(\"//a[text()[contains(.,'Windows installer (64-bit)')]]\")).click();\n\n\t\t// close the driver\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n//create Select object that references a <select> element\nWebElement selectElement = driver.findElement(By.id(\"selectElementID\"));\nSelect selectObject = new Select(selectElement);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Select an <option> based upon the <select> element's internal index\nselectObject.selectByIndex(1);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Select an <option> based upon its value attribute\nselectObject.selectByValue(\"value1\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Select an <option> based upon its text\nselectObject.selectByVisibleText(\"Bread\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Return a List<WebElement> of options that have been selected\nList<WebElement> allSelectedOptions = selectObject.getAllSelectedOptions();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Return a WebElement referencing the first selection option found by walking down the DOM\nWebElement firstSelectedOption = selectObject.getFirstSelectedOption();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Return a List<WebElement> of options that the <select> element contains\nList<WebElement> allAvailableOptions = selectObject.getOptions();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Deselect an <option> based upon the <select> element's internal index\nselectObject.deselectByIndex(1);\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Deselect an <option> based upon its value attribute\nselectObject.deselectByValue(\"value1\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Deselect an <option> based upon its text\nselectObject.deselectByVisibleText(\"Bread\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Deselect all selected <option> elements\nselectObject.deselectAll();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// check if more than one options can be selected\nBoolean doesThisAllowMultipleSelections = selectObject.isMultiple();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium program to create a web driver that will go to URL\n * \"https://www.facebook.com/reg/\" and set the value of birthday using the drop\n * downs\n */\npackage testPackage;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class Dropdwn_Test  {  \n  \n    public static void main(String[] args) {  \n          \n       // System Property for Chrome Driver   \n    \tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver(); \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.facebook.com/reg/\");   \n  \n        //\tUsing Select class for selecting value from dropdown \n        // locate drop down with id \"Day\" and select the option based on text \"1\"\n\t\tSelect day = new Select(driver.findElement(By.id(\"day\")));  \n\t\tday.selectByVisibleText(\"1\");\n\t\t\n\t\t// locate drop down with id \"month\" and set it's value to the value at index 2\n\t\tSelect month = new Select(driver.findElement(By.cssSelector(\"#month\")));  \n\t\tmonth.selectByIndex(2);\n\t\t\n\t\t// locate drop down with name \"Year\" and select the option with value\"2000\"\n\t\tSelect year = new Select(driver.findElement(By.xpath(\"//select[@title='Year']\")));  \n\t\tyear.selectByValue(\"2000\");\n  \n\t\t// Close the Browser  \n        driver.close();  \n  \n    }  \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n/*\n * Java Selenium program to login to Facebook: Create Web driver for chrome and\n * go to URL \"https://www.facebook.com/reg/\" Find the input texts for First\n * name, last name, email id/phone number and password and fill the relevant\n * details Fill the date of birth using the drop downs Select gender using the\n * radio button Click on the sign up button\n */\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class FacebookLogin  {  \n  \n    public static void main(String[] args) {  \n          \n       // System Property for Chrome Driver   \n    \tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver(); \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.facebook.com/reg/\"); \n        \n        //Locate input text box having name = \"firstname\" and fill it with \"John\"\n        driver.findElement(By.name(\"firstname\")).sendKeys(\"John\");\n        \n        //Locate input text box having id = \"lastname\" and fill it with \"Doe\"\n        WebElement lName = driver.findElement(By.cssSelector(\"input[name='Doe']\"));\n        lName.sendKeys(\"Pandey\");\n        \n        //Locate input text box with \"Mobile number or email address\" as aria-label and fill it with \"12345678\"\n        WebElement email = driver.findElement(By.xpath(\"//input[@aria-label='Mobile number or email address']\"));\n        email.sendKeys(\"12345678\");\n        \n       //Locate input box for password and put \"Admin_123\" in the field\n        WebElement pswd = driver.findElement(By.cssSelector(\"input[type='password']\"));\n        pswd.sendKeys(\"Admin_123\");      \n          \n        //\tUsing Select class for selecting value from dropdown \n        // locate drop down with id \"Day\" and select the option based on text \"1\"\n\t\tSelect day = new Select(driver.findElement(By.id(\"day\")));  \n\t\tday.selectByVisibleText(\"1\");\n\t\t\n\t\t// locate drop down with name \"birthday_month\" and set it's value to the value at index 2\n\t\tSelect month = new Select(driver.findElement(By.name(\"birthday_month\")));  \n\t\tmonth.selectByIndex(2);\n\t\t\n\t\t// locate drop down with name \"Year\" and select the option with value\"2000\"\n\t\tSelect year = new Select(driver.findElement(By.xpath(\"//select[@title='Year']\")));  \n\t\tyear.selectByValue(\"2000\");\n\t\t\n\t\t// Locate the radio button with name \"sex\" and select button with value 1\n        WebElement gender = driver.findElement(By.xpath(\"//input[(@name='sex') and (@type = 'radio') and (@value = '2')]\"));\n        gender.click();\n        \n        // Locate the \"Sign Up\" button and click it\n        driver.findElement(By.xpath(\"//button[text()[contains(.,'Sign Up')]]\")).click();\n\t\n  \n\t\t// Close the Browser  \n        driver.close();  \n  \n  \n    }  \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to:\n// Launch the browser.\n// Open \"https://demoqa.com/select-menu\".\n// Select the Old Style Select Menu using the element id.\n// Print all the options of the dropdown.\n// Select 'Purple' using the index.\n// After that, select 'Magenta' using visible text.\n// Select an option using value.\n// Close the browser\nimport java.util.List;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class DropDown {\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\chromedriver.exe\");\n\t\t// Creating instance of Chrome driver\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Step#2- Launching URL\n\t\tdriver.get(\"https://demoqa.com/select-menu\");\n\n\t\t// Maximizing window\n\t\tdriver.manage().window().maximize();\n\n\t\t// Step#3- Selecting the dropdown element by locating its id\n\t\tSelect select = new Select(driver.findElement(By.id(\"oldSelectMenu\")));\n\n\t\t// Step#4- Printing the options of the dropdown\n\t\t// Get list of web elements\n\t\tList<WebElement> lst = select.getOptions();\n\n\t\t// Looping through the options and printing dropdown options\n\t\tSystem.out.println(\"The dropdown options are:\");\n\t\tfor (WebElement options : lst)\n\t\t\tSystem.out.println(options.getText());\n\n\t\t// Step#5- Selecting the option as 'Purple'-- selectByIndex\n\t\tSystem.out.println(\"Select the Option by Index 4\");\n\t\tselect.selectByIndex(4);\n\t\tSystem.out.println(\"Select value is: \" + select.getFirstSelectedOption().getText());\n\n\t\t// Step#6- Selecting the option as 'Magenta'-- selectByVisibleText\n\t\tSystem.out.println(\"Select the Option by Text Magenta\");\n\t\tselect.selectByVisibleText(\"Magenta\");\n\t\tSystem.out.println(\"Select value is: \" + select.getFirstSelectedOption().getText());\n\n\t\t// Step#7- Selecting an option by its value\n\t\tSystem.out.println(\"Select the Option by value 6\");\n\t\tselect.selectByValue(\"6\");\n\t\tSystem.out.println(\"Select value is: \" + select.getFirstSelectedOption().getText());\n\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n//Java Selenium Program to:\n//Launch the browser.\n//Open \"https://demoqa.com/select-menu\".\n//Select the Standard Multi-Select using the element id.\n//Verifying that the element is multi-select.\n//Select 'Opel' using the index and deselect the same using index.\n//Select 'Saab' using value and deselect the same using value.\n//Deselect all the options.\n//Close the browser.\n\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class MultiSelect {\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\n\t\t// Setting system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\chromedriver.exe\");\n\t\t// Creating instance of Chrome driver\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Navigate to the URL\n\t\tdriver.get(\"https://demoqa.com/select-menu\");\n\n\t\t// Maximizing window\n\t\tdriver.manage().window().maximize();\n\n\t\t// Selecting the multi-select element by locating its id\n\t\tSelect select = new Select(driver.findElement(By.id(\"cars\")));\n\n\t\t// Get the list of all the options\n\t\tSystem.out.println(\"The dropdown options are -\");\n\n\t\tList<WebElement> options = select.getOptions();\n\n\t\tfor (WebElement option : options)\n\t\t\tSystem.out.println(option.getText());\n\n\t\t// Using isMultiple() method to verify if the element is multi-select, if yes go onto next steps else eit\n\t\tif (select.isMultiple()) {\n\n\t\t\t// Selecting option as 'Opel'-- ByIndex\n\t\t\tSystem.out.println(\"Select option Opel by Index\");\n\t\t\tselect.selectByIndex(2);\n\n\t\t\t// Selecting the option as 'Saab'-- ByValue\n\t\t\tSystem.out.println(\"Select option saab by Value\");\n\t\t\tselect.selectByValue(\"saab\");\n\n\t\t\t// Selecting the option by text\n\t\t\tSystem.out.println(\"Select option Audi by Text\");\n\t\t\tselect.selectByVisibleText(\"Audi\");\n\n\t\t\t// Get the list of selected options\n\t\t\tSystem.out.println(\"The selected values in the dropdown options are -\");\n\n\t\t\tList<WebElement> selectedOptions = select.getAllSelectedOptions();\n\n\t\t\tfor (WebElement selectedOption : selectedOptions)\n\t\t\t\tSystem.out.println(selectedOption.getText());\n\n\t\t\t// Deselect the value \"Audi\" by Index\n\t\t\tSystem.out.println(\"DeSelect option Audi by Index\");\n\t\t\tselect.deselectByIndex(3);\n\n\t\t\t// Deselect the value \"Opel\" by visible text\n\t\t\tSystem.out.println(\"Select option Opel by Text\");\n\t\t\tselect.deselectByVisibleText(\"Opel\");\n\n\t\t\t// Validate that both the values are deselected\n\t\t\tSystem.out.println(\"The selected values after deselect in the dropdown options are -\");\n\t\t\tList<WebElement> selectedOptionsAfterDeselect = select.getAllSelectedOptions();\n\n\t\t\tfor (WebElement selectedOptionAfterDeselect : selectedOptionsAfterDeselect)\n\t\t\t\tSystem.out.println(selectedOptionAfterDeselect.getText());\n\n\t\t\t// Step#8- Deselect all values\n\t\t\tselect.deselectAll();\n\t\t}\n\n\t\tdriver.quit();\n\t}\n\n\t}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n\n/**\n* Validate Radio button using isSelected() method\n*/\n\nWebElement radioElement = driver.findElement(By.id(\"impressiveRadio\"));\n\tboolean selectState = radioElement.isSelected();\n\n//performing click operation only if element is not selected\n\tif(selectState==false)\n\t{\n\t\tradioElement.click();\n\t}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n* Validate Radio button using isDisplayed() methiod\n*/\n\nWebElement radioElement = driver.findElement(By.id(\"impressiveRadio\"));\n\tboolean selectState = radioElement.isDisplayed();\n\n//performing click operation only if element is not selected\n\tif(selectState==false)\n\t{\n\t\tradioElement.click();\n\t}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n* Validate Radio button using isEnabled() method\n*/\n\nWebElement radioElement = driver.findElement(By.id(\"noRadio\"));\n\tboolean selectState = radioElement.isEnabled();\n\n//performing click operation only if element is not selected\n\tif(selectState==false)\n\t{\n\t\tradioElement.click();\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\n// Create Chrome Web driver\n// launch https://github.com/\n// locate input text with placeholder = \"Search GitHub\" and fill it with text \"Machine Learning\"\n// Submit the form with action \"/search\"\n// print the number of results\npublic class GithubSearch {\n\n\tpublic static void main(String[] args)  {\n\n\t\t// Setting system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\chromedriver.exe\");\n\t\t// Creating instance of Chrome driver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// launching URL \"https://github.com/\"\n\t\tdriver.navigate().to(\"https://github.com/\");\n\t\t\n\t\t// locate input text with placeholder = Search GitHub and fill it with text \"Machine Learning\"\n\t\tdriver.findElement(By.xpath(\"//input[@placeholder='Search GitHub']\")).sendKeys(\"Machine Learning\");\n\t\t\n\t\t// loacting the form with action \"/search\"\n\t\tWebElement formElem = driver.findElement(By.cssSelector(\"form[action='/search']\"));\n\t\tformElem.submit();\n\t\t\n\t\t// Getting text from heading containing text \"result\" and displaying it \n\t\tString numResults = driver.findElement(By.xpath(\"//h3[text() [contains(.,'result')]]\")).getText();\n\t\tSystem.out.println(numResults);\n\t\t\n\t\t// close the browser\n\t\tdriver.quit();\n\t\t\n\t\t\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java selenium program to create Web driver for Firefox\n// go to the specified URL\n// find dropdown having name \"country\" and select the option with text \"ANTARCTICA\"\n// close the browser\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.By;\n\npublic class accessDropDown {\n public static void main(String[] args) {\n\t\t// Setting system properties\n\t\tSystem.setProperty(\"webdriver.gecko.driver\",\"C:\\\\geckodriver.exe\");\n\t    // Creating firefox web driver\t\t\n\t    WebDriver driver = new FirefoxDriver();\n\t\t\n\t\t// Set the value of URL\n\t\tString baseURL = \"http://demo.guru99.com/test/newtours/register.php\";\n\t\t\n\t\t// go to the URL\n\t\tdriver.get(baseURL);\n\n\t\t// locate dropdown having name \"country\" and select the option with text \"ANTARCTICA\"\n\t\tSelect drpCountry = new Select(driver.findElement(By.name(\"country\")));\n\t\tdrpCountry.selectByVisibleText(\"ANTARCTICA\");\n\t\t\n\t\t//close the web driver\n\t\tdriver.quit();\n }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium test script to: \n * 1. create a web driver for chrome \n * 2. navigate to website \"https://www.spotify.com/in-en/signup\" \n * 3. Locate input box for email with placeholder \"Enter your email.\" \n * 4. Locate input box for email with name = \"confirm\" and fill the email id \n * 5. Locate input box for password and add text \n * 6. Locate input box for text with id = \"displayname\" and put \"testUser123\" in the field \n * 7. Locate input box for text with placeholder =\\\"YYYY\\\" and put \"2000\" in the field \n * 8. locate all the drop downs and print their count \n * 9. Locate the drop down and set its value to \"January\" \n * 10.Locate input box for text with name = \"day\" and put \"10\" in the field \n * 11.Locate the radio button with id = \"gender_option_male\" and select it \n * 12.Locate the checkbox with id = \"marketing-opt-checkbox\" and check it if it is unchecked \n * 13. Locate the checkbox with name = thirdParty and uncheck it if it is checked \n * 14. Locate the button with type = \"submit\" and click it \n * 15. Close the browser\n */\nimport java.util.List;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class Spotify_Signup {\n\n\tpublic static void main(String args[]) {\n\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://www.spotify.com/in-en/signup\");\n\n\t\t// Locate input box for email with placeholder \"Enter your email.\"\n\t\tWebElement emailId = driver.findElement(By.xpath(\"//input[@type='email' and @placeholder='Enter your email.']\"));\n\t\t// fill the email id\n\t\temailId.sendKeys(\"priy1903@yahoo.com\");\n\n\t\t// Locate input box for email with name = \"confirm\" and fill the email id\n\t\tdriver.findElement(By.xpath(\"//input[@type='email' and @name='confirm']\")).sendKeys(\"priy1903@yahoo.com\");\n\n\t\t// Locate input box for password and add text \"123456@Abc\"\n\t\tdriver.findElement(By.cssSelector(\"input[type='password']\")).sendKeys(\"123456@Abc\");\n\n\t\t// Locate input box for text with id = \"displayname\" and put \"testUser123\" in the field\n\t\tdriver.findElement(By.id(\"displayname\")).sendKeys(\"testUser123\");\n\n\t\t// Locate input box for text with placeholder = \\\"YYYY\\\" and put \"2000\" in the field\n\t\tdriver.findElement(By.cssSelector(\"input[placeholder=\\\"YYYY\\\"]\")).sendKeys(\"2000\");\n\n\t\t// locate all the drop down\n\t\tList<WebElement> allSelects = driver.findElements(By.tagName(\"select\"));\n\n\t\tSystem.out.println(\"There are \" + allSelects.size() + \" drop downs present\");\n\n\t\t// Locate the drop down and set its value to \"January\"\n\t\tSelect monthSelect = new Select(driver.findElement(By.tagName(\"select\")));\n\t\tmonthSelect.selectByVisibleText(\"January\");\n\n\t\t// Locate input box for text with name = \"day\" and put \"10\" in the field\n\t\tdriver.findElement(By.name(\"day\")).sendKeys(\"10\");\n\n\t\t// Locate the radio button with id = \"gender_option_male\" and select it\n\t\tWebElement male = driver.findElement(By.id(\"gender_option_male\"));\n\t\t\n\t\t// selecting the radio button using Actions\n\t\tActions actions = new Actions(driver);\n\t\tactions.moveToElement(male).click().perform();\n\n\t\t// Locate the checkbox with id = \"marketing-opt-checkbox\" and check it if it is\n\t\t// unchecked\n\t\tWebElement marketing = driver.findElement(By.xpath(\"//input[(@type='checkbox') and (@id='marketing-opt-checkbox')]\"));\n\t\tif (!marketing.isSelected()) {\n\t\t\t// checking the box using action\n\t\t\tactions.moveToElement(marketing).click().perform();\n\t\t}\n\n\t\t// Locate the checkbox with name = thirdParty and uncheck it if it is checked\n\t\tWebElement thirdParty = driver.findElement(By.name(\"thirdParty\"));\n\t\tif (thirdParty.isSelected()) {\n\t\t\t// checking the box using action\n\t\t\tactions.moveToElement(thirdParty).click().perform();\n\n\t\t}\n\n\t\t// Locate the button with type = \"submit\" and click it\n\t\tWebElement btn = driver.findElement(By.xpath(\"//button[@type='submit']\"));\n\t\tbtn.click();\n\n\t\t// Close the Browser\n\t\tdriver.quit();\n\n\t}}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n * Locating and Clicking a CheckBox By using ID\n */\n\ndriver.findElement(By.id(\"hobbies-checkbox-1\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Selecting the first checkbox using XPath\ndriver.findElement(By.xpath(\"//label[text()='Sports']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Selecting the second checkbox using Xpath\ndriver.findElement(By.xpath(\"//label[text()='Reading']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Selecting the first checkbox\ndriver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-1']\")).click();\n\n//Selecting the second checkbox\ndriver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-2']\")).click();\n\n//Selecting the last check box\ndriver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-3']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Validate Checkbox isSelected method and click\n\n// locate the checkbox\nWebElement checkBoxElement = driver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-1']\"));\nboolean isSelected = checkBoxElement.isSelected();\n\n//performing click operation if element is not checked\nif(isSelected==false)\n{\n\tcheckBoxElement.click();\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n* Validate Checkbox using isDisplayed() and click\n*/\n// locate the checkbox\nWebElement checkBoxElement = driver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-1']\"));\nboolean isDisplayed = checkBoxElement.isDisplayed();\n\n// performing click operation if element is displayed\nif(isDisplayed==true)\n{\n\tcheckBoxElement.click();\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n* Validate checkbox using isEnabled() and then click\n*/\n\n// locate the checkbox\nWebElement checkBoxElement = driver.findElement(By.cssSelector(\"label[for='hobbies-checkbox-1']\"));\nboolean isEnabled = chckBxEnable.isEnabled();\n\n// performing click operation if element is enabled\nif(isEnabled==true)\n{\n\tcheckBoxElement.click();\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium test script to: \n * 1. Create a Fire fox web driver \n * 2. Open the website \n * 3. Find checkbox using the for attribute of its label and check it \n * 4. Find checkboxes using their names and check them \n * 5. close the browser\n * \n */\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class AWSServices {\n\n\tpublic static void main(String[] args) {\n\t\t//  System Property for Firefox Driver   \n    \tSystem.setProperty(\"webdriver.gecko.driver\",\"Path_of_Firefox_Driver\");\n\t\tWebDriver driver = new FirefoxDriver(); \n  \n        // Launch Website  \n        driver.navigate().to(\"https://aws.amazon.com/free/?all-free-tier\");\n        \n        // find the checkbox having a label with for =\"awsf-all-free-tier-tier-always-free\"\n        WebElement checkBoxElement = driver.findElement(By.cssSelector(\"label[for='awsf-all-free-tier-tier-always-free']\"));\n        // select the checkbox\n        checkBoxElement.click();\n\n        // creating a list of values that needs to be selected\n        String[] desiredCategories = {\"compute\", \"databases\", \"ai-ml\"};\n        \n        // iterating through the list\n        for (String cat : desiredCategories) {\n        \t// finding the checkboxes using their name and selecting them \n        \tdriver.findElement(By.name(cat)).click();\n        }\n        \n        // close the browser\n        driver.quit();\n        \n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// verify that the dropdown is enabled and visible\n// verify that the dropdown doesn't allow multiple option selection\n// get all the available option\n// select the desired option using visible text and verify it\n// close the browser\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class SelectByVisibleTextExample \n{ \npublic static void main(String[] args) \n{ \n\tSystem.setProperty(\"webdriver.gecko.driver\",\"Path_of_Firefox_Driver\"); // Setting system properties of FirefoxDriver\n\t// Create a driver object of Firefox class by using reference of WebDriver. \n    WebDriver driver = new FirefoxDriver(); \n\n\t// Maximize the browser. \n    driver.manage().window().maximize(); \n\n\t// Declare a variable URL of type String and store the URL. \n     String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n\n\t// Call get() method to open the web page URL and pass URL as a parameter. \n     driver.get(URL); \n\n\t// Wait for some time to load the whole web page. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n\n\t// Locate dropdown element on web page by By.xpath. \n    WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='country']\")); \n\n\t// Verify the dropdown is enabled and visible. \n\tif(dropdown.isEnabled() && dropdown.isDisplayed()) { \n\t\tSystem.out.println(\"Dropdown is enabled and visible\"); \n\t} \n\telse { \n\t  System.out.println(\"Dropdown is not visible\"); \n\t} \n\t// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n\tSelect select = new Select(dropdown); \n\n\t// Verify that dropdown does not allow the multiple selections. \n    if(select.isMultiple()) \n    { \n      System.out.println(\"Dropdown list accepts multiple choices\"); \n    } \n    else { \n      System.out.println(\"Dropdown list does not accept multiple choices\"); \n    } \n\t// Call getOptions() method to get all options of list. size() method is used to get size of list. \n\tint listSize = select.getOptions().size(); \n\tSystem.out.println(\"List size: \" +listSize); \n\n\t// Select the option \"India\" by sending visible text. \n\tselect.selectByVisibleText(\"India\"); \n\n\t// Check that \"India\" is selected as an option or not. \n\t// Use System.out.println method to display a message to indicate whether the option is chosen and verification was successful or not. \n    String getText = select.getFirstSelectedOption().getText(); \n    System.out.println(\"Option chosen: \" +getText); \n\n\t// Close the browser. \n     driver.close(); \n  } \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// select the desired option using value attribute\n// close the browser\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class SelectByValueExample \n{ \n public static void main(String[] args) \n { \n\t// create firefox web driver\n\t// set the path for the driver in system properties\n   System.setProperty(\"webdriver.gecko.driver\",\"Path_of_Firefox_Driver\"); \n   // initialize the web driver\n   WebDriver driver = new FirefoxDriver(); \n   \n   // maximize the window size\n   driver.manage().window().maximize(); \n   \n   String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n   // open the specified URL\n   driver.get(URL); \n\n\t// Wait for some time to load the whole web page. \n    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n\n\t// Locate dropdown element on web page by By.xpath. \n    WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='country']\")); \n\n\t// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n    Select select = new Select(dropdown); \n\n\t// Select the option \"USA\" by sending its value attribute. \n    select.selectByValue(\"US\"); \n    System.out.println(\"Option is successfully selected\"); \n\n\t// Close the browser. \n    driver.close(); \n  } \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// Check if that dropdown allows the multiple-choice list \n// select the different choice by using visible text and verify them\n// close the browser\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class multiple-choice\n{\n\n\tpublic static void main(String[] args) {\n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t// create firefox web driver object\n\t\tWebDriver driver;\n\t\tdriver = new FirefoxDriver();\n\t\t\n\t\t// maximize the window size\n\t\tdriver.manage().window().maximize();\n\t\t\n\t\tString URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\";\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(URL);\n\n\t\t// Wait for some time to load the whole web page. \n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\t// Locate dropdown element on web page by By.xpath. \n\t\tWebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\"));\n\n\t\t// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n\t\tSelect multiplechoicelist = new Select(dropdown);\n\n\t\t// Verify that dropdown allows the multiple-choice list or not. \n\t\tif (multiplechoicelist.isMultiple()) {\n\t\t\tSystem.out.println(\"Dropdown allows multiple-choice list\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Dropdown does not allow multiple-choice\");\n\t\t}\n\t\t// Now select the different choice by using visible text. \n\t\tmultiplechoicelist.selectByVisibleText(\"July\");\n\t\tmultiplechoicelist.selectByVisibleText(\"May\");\n\t\tmultiplechoicelist.selectByVisibleText(\"March\");\n\n\t\t// Verify that the number of choices in the list selected. \n\t\tif (multiplechoicelist.getAllSelectedOptions().size() == 3) {\n\t\t\tSystem.out.println(\"3 options have been chosen\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Code not worked\");\n\t\t}\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// Check if that dropdown allows the multiple-choice list \n// If multiple-choices are allowed, then select the different choice by sending visible texts, and verigy the selection \n// close the browser\n\nimport java.util.ArrayList; \nimport java.util.List; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n\npublic class GetAllSelectedOptions \n{ \n\tpublic static void main(String[] args) \n\t{ \n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t// instantiate the web driver object\n\t\tWebDriver driver = new FirefoxDriver(); \n\t\t\n\t\t// maximize the window size\n\t\tdriver.manage().window().maximize(); \n\t\t\n\t\t// set the URL\n\t\tString URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n\t\t// open the URL\n\t\tdriver.get(URL); \n\n\t\t// Wait for some time to load the whole web page. \n\t    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n\n\t\t// Locate dropdown element on web page by By.xpath. \n\t\tWebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\")); \n\n\t\t// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n\t\tSelect multiplechoicelist = new Select(dropdown); \n\n\t\t// Verify that dropdown allows the multiple-choice list or not. \n\t\tif(multiplechoicelist.isMultiple())\n\t\t{ \n\t\t\tSystem.out.println( \"Dropdown allows multiple-choice list\"); \n\t\t} \n\t\telse { \n\t\t\tSystem.out.println(\"Dropdown does not allow multiple-choice\"); \n\t\t} \n\t\t// If multiple-choice allow, select the different choice by sending visible texts. \n\t\tmultiplechoicelist.selectByVisibleText(\"July\"); \n\t\tmultiplechoicelist.selectByVisibleText(\"May\"); \n\t\tmultiplechoicelist.selectByVisibleText(\"March\"); \n\n\t\t// Verify that the number of choices in the list selected. \n\t\tif(multiplechoicelist.getAllSelectedOptions().size() == 3) { \n\t\t\tSystem.out.println(\"3 options have been chosen:\"); \n\t\t} \n\t\telse { \n\t\t  System.out.println(\"Code not worked\"); \n\t\t} \n\t\t// Create a List. For this, create an object of ArrayList class by using the reference of List interface. \n\t\tList<String> expectedSelection = new ArrayList<String>(); \n\n\t\t// Call add() method of List to add expected elements for selection. \n\t\texpectedSelection.add(\"July\"); \n\t\texpectedSelection.add(\"May\"); \n\t\texpectedSelection.add(\"March\"); \n\n\t\t// Iterating WebElement by using the advanced for loop to retrieve the actually selected elements and then add selected elements in the list using add() method. \n\t\tList<String> actualSelection = new ArrayList<String>(); \n\t\tfor(WebElement element : multiplechoicelist.getAllSelectedOptions()) { \n\t\t\tactualSelection.add(element.getText()); // Here, getText() method of WebElement class has been used to add the text label of all the options in the list.\n\t\t} \n\t\t// Now compare actualSelection with expectedSelection by using containsAll() method to check that correct options are selected in the list.. \n\t\tif(actualSelection.containsAll(expectedSelection)) { \n\t\t\t  System.out.println(actualSelection); \n\t\t} \n\t\t// close the browser\n\t\tdriver.close(); \n\t } \n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// Get all the options available for the drop down\n// Print the options\n// close the browser\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class GetAllDropdownValue {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t// instantiate web driver\n\t\tWebDriver driver = new FirefoxDriver();\n\t\t\n\t\t// maximize browser window\n\t\tdriver.manage().window().maximize();\n\t\t\n\t\t// set the URL\n\t\tString URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\";\n\t\t// navigate to the URL\n\t\tdriver.get(URL);\n\n\t\t// Wait for some time to load the whole web page. \n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\t// Locate dropdown element on web page by By.xpath and pass it to the Select class. \n\t\tSelect select = new Select(driver.findElement(By.xpath(\"//select[@name='Month']\")));\n\n\n\t\t// Call getOptions() method of select class to get all options available in the list. \n\t\t// Since return type of getOptions method is a list of WebElements, therefore, we will store them by creating a variable getOptions of type List of WebElement. \n\t\tList<WebElement> getOptions = select.getOptions();\n\t\n\t\t// Create a list of generic type String to add all dropdown options in the list. \n\t\tList<String> list = new ArrayList<String>();\n\n\t\t// Use advanced for loop to add all options in the list. \n\t\tfor (WebElement element : getOptions) {\n\t\t\tlist.add(element.getText()); // Here, getText() method of WebElement class has been used to add the text label of all the options in the list.\n\t\t}\n\t\tSystem.out.println(list);\n\n\t\t// close the web driver\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium program to create webdriver\n// open a URL\n// locate dropdown on the web page using xpath\n// Check if it supports multiple selection\n// Select options using value attribute, visible text and index\n// deselct option using the visible text\n// close the browser\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class DeselectOptionExample {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t\n\t\t// instantiate the web driver\n\t\tWebDriver driver = new FirefoxDriver();\n\t\tdriver.manage().window().maximize();\n\n\t\tString URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\";\n\t\t// launch the URL\n\t\tdriver.get(URL);\n\n\t\t// Wait for some time to load the whole web page. \n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\t// Locate dropdown element on the web page by By.xpath and pass it to the Select class\n\t\tSelect select = new Select(driver.findElement(By.xpath(\"//select[@name='Month']\")));\n\n\n\t\t// Verify that the dropdown supports multiple-choice or not.. \n\t\tif (select.isMultiple()) {\n\t\t\tSystem.out.println(\"Multiple choices are allowed, Select multiple options in the list \");\n\t\t} else {\n\t\t\tSystem.out.println(\"Multiple choices are not allowed\");\n\t\t}\n\t\t// Select the option \"India\" by sending visible text. \n\t\tselect.selectByVisibleText(\"May\");\n\n\t\t// Select an option by sending its value. \n\t\tselect.selectByValue(\"Ap\");\n\n\t\t// Select an option by sending its index. \n\t\tselect.selectByIndex(10);\n\n\t\t// Now, we will deselect already selected option by calling deselectByVisibleText() method of the select class. \n\t\tselect.deselectByVisibleText(\"May\");\n\t\tSystem.out.println(\"Option May is deselected successfully\");\n\t\t\n\t\t// close the browser\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium test script to create a web driver, go to a URL and select a value from drop down using visible text\nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \nimport org.openqa.selenium.support.ui.Select;  \n  \npublic class Dropdwn_Test  {  \n  \n    public static void main(String[] args) {  \n          \n       // System Property for Chrome Driver   \n        System.setProperty(\"webdriver.chrome.driver\",\"D:\\\\ChromeDriver\\\\chromedriver.exe\");  \n  \n        // Instantiate a ChromeDriver class.      \n        WebDriver driver=new ChromeDriver();  \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n\t\t//Using Select class for selecting value from dropdown  \n\t\tSelect dropdown = new Select(driver.findElement(By.id(\"testingDropdown\")));  \n\t\tdropdown.selectByVisibleText(\"Database Testing\");  \n  \n\t\t// Close the Browser  \n        driver.close();  \n  \n    }  \n}  \n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium test script to create a webdriver, open a URL and locate and check 3 check boxes\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class CheckBox {\n\tpublic static void main(String[] args) {\n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t\n\t\t// Declare WebDriver reference. \n\t\tWebDriver driver; \n\t\t// Create an object of FirefoxDriver class.\n\t\tdriver = new FirefoxDriver();\n\n\t\t// Maximize browser. \n\t\tdriver.manage().window().maximize();\n\n\t\tString URL = \"https://selenium08.blogspot.com/2019/07/check-box-and-radio-buttons.html\";\n\t\t// navigate to the URL\n\t\tdriver.get(URL);\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n\t\t// Locate checkbox \"Red\" and click on it\n\t\tWebElement red = driver.findElement(By.xpath(\"//input[@value='red']\"));\n\t\t// selecting the check box\n\t\tred.click();\n\t\tSystem.out.println(\"Red Checkbox is selected\");\n\t\t\n\t\t// Locate checkbox \"Blue\" and check it\n\t\tWebElement blue = driver.findElement(By.xpath(\"//input[@value='blue']\")).click();\n\t\tSystem.out.println(\"Blue Checkbox is selected\");\n\n\t\t// Locate checkbox \"Red\"\n\t\tWebElement orange = driver.findElement(By.xpath(\"//input[@value='orange']\"));\n\t\t// check the checkbox\n\t\torange.click();\n\t\tSystem.out.println(\"Orange Checkbox is selected\");\n\n\t\t// close the browser\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Check if a Checkbox is selected \nWebElement checkbox = driver.findElement(By.id(\"checkboxId\"));\nSystem.out.println(\"The checkbox is selection state is - \" + checkbox.isSelected());\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Check a checkbox if it is unchecked\nWebElement checkbox = driver.findElement(By.id(\"checkboxId\"));\n//If the checkbox is unchecked then isSelected() will return false \n//and NOT of false is true, hence we can click on checkbox\nif(!checkbox.isSelected())\n\tcheckbox.click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium script to open a URL using web driver and print all the links present on the web page\n\nimport java.util.List;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class GetAllLinks {\n\n\tpublic static void main(String[] args) {\n\t\t// Setting system properties of FirefoxDriver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"Path_of_Firefox_Driver\");\n\t\t// initialize the web driver\n\t\tWebDriver driver = new FirefoxDriver();\n\n\t\t// Launching website\n\t\tdriver.get(\"https://artoftesting.com/sampleSiteForSelenium\");\n\t\tdriver.manage().window().maximize();\n\n\t\t// Get list of web-elements with tagName - a\n\t\tList<WebElement> allLinks = driver.findElements(By.tagName(\"a\"));\n\n\t\t// Traversing through the list and printing its text along with link address\n\t\tfor (WebElement link : allLinks) {\n\t\t\tSystem.out.println(link.getText() + \" - \" + link.getAttribute(\"href\"));\n\t\t}\n\n\t\t// close the broswer\n\t\tdriver.quit();\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium test script to find a book on Amazon\n */\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AmazonShopping {\n\n\tpublic static void main(String args[]) {\n\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://www.amazon.in/\");\n\t\t\n\t\t// Locate the drop down and select \"Books\"\n\t\tSelect catSelect = new Select(driver.findElement(By.tagName(\"select\")));\n\t\tcatSelect.selectByVisibleText(\"Books\");\n\t\t\n\t\t// locate the search box with name 'field-keywords' and add text \"books\"\n\t\tdriver.findElement(By.name(\"field-keywords\")).sendKeys(\"Machine Learning\");\n\t\t\n\t\t// locate the submit button with value \"Go\" and click on it\n\t\tdriver.findElement(By.xpath(\"//input[(@type='submit') and (@value='Go')]\")).click();\n\t\t\n\t\t// Find the drop down with id \"s-result-sort-select\"\n\t\tSelect dropDown = new Select(driver.findElement(By.id(\"s-result-sort-select\")));\n\t\t\n\t\t// Set the value of drop down \"Newest Arrivals\" \t\t\n\t\tdropDown.selectByVisibleText(\"Publication Date\");\n\t\t\n\t\t// close the browser\n\t\tdriver.quit();\n\t\t\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium program to go to \"https://huggingface.co/\" using Chrome Web Driver, \n * search for courses and get the course for TensorFlow \n */\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HuggingFace_courses {\n\n\tpublic static void main(String[] args) {\n\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://huggingface.co/\");\n\t\t\n\t\t// find the button to expand the menu\n\t\tWebElement extra = driver.findElement(By.xpath(\"//button[@type='button']\"));\n\t\t\n\t\t// using javascriptexecutor to click on the button\n\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\texecutor.executeScript(\"arguments[0].click();\", extra);\n\n\t\t\n\t\t\n\t\t// locate the link with hyperlink '/course' and click on it\n\t\tdriver.findElement(By.cssSelector(\"a[href='/course']\")).click();\n\t\t\n\t\t// find the link for TensorFlow and click on it\n\t\tdriver.findElement(By.partialLinkText(\"TensorFlow\")).click();\n\t\t\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium program to go to \"https://huggingface.co/\" using Chrome Web Driver, \n * search for \"models\" and then for \"gpt-j\"\n */\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HuggingFace_datasets {\n\n\tpublic static void main(String[] args) {\n\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://huggingface.co/\");\n\t\t\n\t\t\n\t\t// locate the link with text 'Models' and click on it\n\t\tdriver.findElement(By.linkText(\"Models\")).click();\n\t\t\n\t\t// find the search bar with placeholder = \"Search Models\" and search for \"gpt-j\"\n\t\tdriver.findElement(By.xpath(\"//input[(@type='search') and (@placeholder='Search Models')]\")).sendKeys(\"gpt-j\");\n\t\t\n\t\t//close the browser\n\t\tdriver.close();\n\t\t\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n * Java Selenium program to go to \"https://huggingface.co/\" using Chrome Web Driver, \n * search for \"datasets\" and then for \"imdb\"\n */\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HuggingFace_models {\n\n\tpublic static void main(String[] args) {\n\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://huggingface.co/\");\n\t\t\n\t\t\n\t\t// locate the link with text 'Datasets' and click on it\n\t\tdriver.findElement(By.linkText(\"Datasets\")).click();\n\t\t\n\t\t// find the search bar with placeholder = \"Search Datasets\" and search for \"imdb\"\n\t\tdriver.findElement(By.xpath(\"//input[(@type='search') and (@placeholder='Search Datasets')]\")).sendKeys(\"imdb\");\n\t\t\n\t\t//close the browser\n\t\tdriver.close();\n\t\t\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// clear the editable field\ndriver.findElement(By.id(\"username\")).clear();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// get text from an element\nString nameText = driver.findElement(By.id(\"username\")).getText();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// get the text stored in value attribute of an element\nString nameText = driver.findElement(By.id(\"username\")).getAttribute(\"value\");\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// check if a checkbox is selected\nboolean state = driver.findElement(By.id(\"name\")).isSelected();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n * Java Selenium testscript to create a web driver, go to a specified URL and search for issues pertaining to \"installation\"\n */\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class GithubAntlrIssues {\n\n\tpublic static void main(String[] args) {\n\t\t// // System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://github.com/antlr/antlr4/blob/master/doc/python-target.md\");\n\t\t\n\t\t// search for issues tab with id\n\t\tdriver.findElement(By.id(\"issues-tab\")).click();\n\t\t\n\t\t// Locate the search bar having \"Search all issues\" as placeholder\n\t\tWebElement searchBar = driver.findElement(By.cssSelector(\"input[placeholder='Search all issues']\"));\n\t\t// clear the search bar\n\t\tsearchBar.clear();\n\t\t\n\t\t// populate the search bar with \"installation\"\n\t\tsearchBar.sendKeys(\"installation\");\n\n\t\t\n\t\t//locate form with action '/antlr/antlr4/issues' and submit it\n\t\tdriver.findElement(By.xpath(\"//form[@action='/antlr/antlr4/issues']\")).submit();\n\t\t\n\t\t// close the browser \n\t\tdriver.quit();\n\t\t\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n * Java Selenium test script to create a web driver, go to google.co.in, search for \"IIB tutorials\" and open link with \"ibm.com\" in it\n */\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class GoogleSearch {\n\n\tpublic static void main(String[] args) {\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://www.google.co.in/\");\n\t\t\n\t\t// find the form element using tag name\n\t\tWebElement formElem = driver.findElement(By.tagName(\"form\"));\n\t\t\n\t\t// find the search bar with name = \"q\" and populate it with text \"IIB tutorials\"\n\t\tdriver.findElement(By.name(\"q\")).sendKeys(\"IIB tutorials\");\n\t\t\n\t\t// submit the form\n\t\tformElem.submit();\n\t\t\n\t\t// locate the hyperlink containing text \"ibm.com\" \n\t\tWebElement ibmLink = driver.findElement(By.partialLinkText(\"ibm.com\"));\n\t\t// click on the link\n\t\tibmLink.click();\n\t\t\n\t\t// close the driver\n\t\tdriver.quit();\n\t\t\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n * Java Selenium test script to create a web driver, go to https://www.ibm.com/docs/en, and search for \"Watson\" \n */\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class IBMSearch {\n\n\tpublic static void main(String[] args) {\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// Launch Website\n\t\tdriver.navigate().to(\"https://www.ibm.com/docs/en\");\n\t\t\n\t\t// Locate the button and click on it\n\t\tdriver.findElement(By.id(\"ibmdocs-searchbar\")).sendKeys(\"Watson\");\n\n\t\t// Locate the search button and click it\n\t\tdriver.findElement(By.className(\"ibmdocs-searchbar-magnifier\")).click();\n\t\n\t\t// close the driver\n\t\tdriver.quit();\n\t\t\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// import packages for Java Selenium\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class RadioButtonTest {\n\t\n\t// main function to create a web driver\n\t// go to a specified URL\n\t// locate the radio buttons\n\t// verify if they are working fine\n\t// close the browser\n\tpublic static void main(String args[]) {\n\t\t// System Property for Chrome Driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\IVS_Innov\\\\seleniumSetup\\\\chromedriver.exe\");\n\t\t// Instantiate the driver object\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// fo to the URL\n\t\tdriver.get(\"https://pizzaonline.dominos.co.in/\");\n\t\t\n\t\t// maximize the window size\n\t\tdriver.manage().window().maximize();\n\t\t\n\t\t/* \n\t\t * verify if the radio buttons for Pickup and delivery are workig fine is working fine\n\t\t */\n\t\t// Locate the radio button for pickup using xpath\n\t\tWebElement radio_pickup = driver.findElement(By.xpath(\"//label[@data-label='Order_Type_Pickup']//input[(@type='radio') and (@name='deliveryType')]\"));\n\t\t\n\t\t// Locate the radio button for delivery using xpath\n\t\tWebElement radio_delivery = driver.findElement(By.xpath(\"//label[@data-label='Order_Type_Deliver']//input[(@type='radio') and (@name='deliveryType')]\"));\n\t\t\n\t\t// code to check if the web element is displayed\n\t\tif (radio_pickup.isDisplayed()) {\n\t\t\tSystem.out.println(\"Radio button for Pickup is displayed\");\n\t\t}\n\t\t// code to check if the web element is enabled\n\t\tif (radio_pickup.isEnabled()) {\n\t\t\tSystem.out.println(\"Radio button for Pickup is enabled\");\n\t\t}\n\t\t// code to check if the radio button for delivery  is displayed\n\t\tif (radio_delivery.isDisplayed()) {\n\t\t\tSystem.out.println(\"Radio button for Delivery is displayed\");\n\t\t}\n\t\t// code to check if the radio button for delivery  is enabled\n\t\tif (radio_delivery.isEnabled()) {\n\t\t\tSystem.out.println(\"Radio button for Delivery is enabled\");\n\t\t}\n\t\t\n\t\t//code to check if the radio button for delivery  is selected and if not, select it\n\t\tif (radio_delivery.isSelected()) {\n\t\t\tSystem.out.println(\"Radio button for Delivery is selected\");\n\t\t}\n\t\telse {\n\t\t\t// select the radio button\n\t\t\tradio_delivery.click();\n\t\t\tSystem.out.println(\"Now the radio button for delivery is selected\");\n\t\t}\n\t\t//code to check if the radio button for pickup  is selected and if not, select it\n\t\tif (radio_pickup.isSelected()) {\n\t\t\tSystem.out.println(\"Radio button for Pickup is selected\");\n\t\t}\n\t\telse {\n\t\t\t// click on the radio button\n\t\t\tradio_pickup.click();\n\t\t\tSystem.out.println(\"Now the radio button for pick up is selected\");\n\t\t}\n\n\t\t// close the browser\n\t\tdriver.quit();\n\t\t\n\t}\n\t\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Java Selenium test script to create a Web driver, click on some hyperlinks and verify the text tof one hyperlink\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\npublic class AboutUsLanguageCheck {\n\t// declare a variable for web driver\n\tprivate WebDriver driver;\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t// manage the timeout\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// navigate to a URL\n\t\tdriver.get(url);\n\t\t// wait for some time\n\t\tThread.sleep(3000);\n\t\t// find the hyperlink using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[4]/a\")).click();\n\t\t// locate the hyperlink using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/div/nav/ul/li[2]/a\")).click();\n\t\t// locate the heading 2 using xpath and verify its text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[1]/div/section[1]/h2\")).getText(),\t\"Nuestra filosof\u00ef\u00bf\u00bda\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// close the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n* Java Selenium test script to:\n* 1. create a web driver\n* 2. navigate to a URL\n* 3. locate web element with id \"usernameOrEmail\", clear its existing content and populate it with given text\n* 4. locate web element with id \"password\", clear its existing content and populate it with given text\n* 4. locate the button using xpath and click on it\n* 5. locate frames using their id and navigate to them\n* 6. navigate back to main page\n* 7. execute a JavaScript function\n* 8. close the web browser\n*/\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class AD_AnomalyCollapse {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// Set path of chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\t\t\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\t\t\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\t\n\t\t// set the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\n\t\t// instantiate the JavascriptExecutor variable\n\t\tjs = (JavascriptExecutor) driver;\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAD_AnomalyCollapse(String url) throws Exception {\n\t\t// open a specified web page\n\t\tdriver.get(url);\n\t\t\n\t\t// locate a hyperlink using xpath\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[6]/a\")).click();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and fill it with text \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\t\t\n\t\t// locate web element with id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// locate web element with id \"password\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// locate web element with id \"password\" and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\t\t\n\t\t// wiat for 55000 ms\n\t\tThread.sleep(55000);\n\t\t\n\t\t// use JavascriptExecutor to scroll to specified location\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// locate the frame with id \"iframe1\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe1\")));\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// switch the frame\n\t\tdriver.switchTo().defaultContent();\n\t\t\n\t\t// loacte the frame with id \"iframe2\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe2\")));\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// switch to the main document\n\t\tdriver.switchTo().defaultContent();\n\t\t\n\t\t// loacte the frame with id \"iframe3\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe3\")));\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// switch to the main document\n\t\tdriver.switchTo().defaultContent();\n\t\t\n\t\t// loacte the frame with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// execute Java script function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for some time\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\n/*\n* Selenium Java test script that will:\n* 1. create a web driver\n* 2. open a URL\n* 3. locate a hyperlink using xpath and click on it\n* 4. locate a web element with id \"usernameOrEmail\", clear its existing contents and populate it with given text\n* 5. locate a web element with id \"password\", clear its existing contents and populate it with given text\n* 6. locate a button with its xpath and click on it\n* 7. Locate hyperlink using xpath and click on it\n* 8. use JavaScriptExecutor to scroll\n* 9. create list of span and click on them\n* 10. run Javascript functions using JavaScriptExecutor\n* 11. close the browser\n*/\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class AD_PrevCycle {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\t\t\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\t\t\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\t\n\t\t// set the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\n\t\t// instantiate the JavascriptExecutor variable\n\t\tjs = (JavascriptExecutor) driver;\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAD_Collapse(String url) throws Exception {\n\t\t// open a specified web page\n\t\tdriver.get(url);\n\t\t\n\t\t// locate a hyperlink using xpath\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and fill it with text \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\t\t\n\t\t// locate web element with id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// locate web element with id \"password\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// locate web element with id \"password\" and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\t\t\n\t\t// locate button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// Locate hyperlink using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[6]/a\")).click();\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t\t\n\t\t// use JavaScriptExecutor to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// search for button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"anomalydetection\\\"]/section/div[1]/div[1]/div[2]/div/div/div/button\")).click();\n\t\t\t\t\n\t\t// loacte the element with link text as \"Cycle 7\" anc click on it\n\t\tdriver.findElement(By.linkText(\"Cycle 7\")).click();\n\t\t\n\t\t// wait for 45000 ms\n\t\tThread.sleep(45000);\n\t\t\n\t\t// use JavascriptExecutor to scroll to specified location\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// search for span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li/span\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// search for button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// use JavascriptExecutor to scroll to specified location\n\t\tjs.executeScript(\"window.scrollBy(0,1200)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// Locate the span element and create a list of the result\n\t\tList<WebElement> l = driver.findElements(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li[2]/span\"));\n\t\t\n\t\t// click on the web element\n\t\tl.get(0).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate the button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// Locate the span element and create a list of the result\n\t\tList<WebElement> l2 = driver.findElements(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li[3]/span\"));\n\t\t\n\t\t// click on the element\n\t\tl2.get(0).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// search for button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// use JavascriptExecutor to scroll to specified location\n\t\tjs.executeScript(\"window.scrollBy(0,2000)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on the element\n\t\tl.get(1).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// search for button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on the element\n\t\tl2.get(1).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// use JavaScriptExecutor to invoke a javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\t\t\t\n\t\t// execute JavaScript\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// Selenium test script using Java\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class AD_ViewGraph {\n\t\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\t\t\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\t\t\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\t\n\t\t// set the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\n\t\t// instantiate the JavascriptExecutor variable\n\t\tjs = (JavascriptExecutor) driver;\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAD_ViewGraph(String url) throws Exception {\n\t\t\n\t\t// navigate to the URL\n\t\tdriver.get(url);\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\t\t\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\t\t\n\t\t// locate web element using id \"usernameOrEmail\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\t\t\n\t\t// locate web element using id \"usernameOrEmail\" and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\t\t\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// locate web element using id \"password\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// locate web element using id \"password\" and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\t\t\n\t\t// locate button using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[6]/a\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(45000);\n\t\t\n\t\t// use Javascript to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li/span\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a button using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\tjs.executeScript(\"window.scrollBy(0,1200)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate all the 'span' elements using given xpath and store them in a list\n\t\tList<WebElement> l = driver.findElements(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li[1]/span\"));\n\t\t\n\t\t// click on the element\n\t\tl.get(1).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate the button using given xpath\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// find all the 'span' using xpath and store them in a list\n\t\tList<WebElement> l2 = driver.findElements(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[2]/ul/li[2]/span\"));\n\t\t\n\t\t// click on the element\n\t\tl2.get(0).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// Locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// use JavaScriptExecutor to scroll \n\t\tjs.executeScript(\"window.scrollBy(0,2000)\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on the element\n\t\tl.get(2).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on the element\n\t\tl2.get(1).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myModal\\\"]/div/div/div[3]/button\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// use JavaScriptExecutor to invoke a javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\t\t\t\n\t\t// execute JavaScript\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage dancingGoatCoreMVC31;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\npublic class Brewer {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// manage the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[2]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div/nav/div/ul/li[2]/a\")).click();\n\n\t\t// verify that the text of element located using given xpath matches the specified text\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"product-list\\\"]/div[1]/article/a/h1\")).getText(),\"AeroPress\");\n\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CC_BrowseThroughCodeCoverage {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t//add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\n\t\t// set the wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t//initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCC_BrowseThroughCodeCoverage(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[7]/a\")).click();\n\n\t\t// locate web element using \"usernameOrEmail\" as id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using \"usernameOrEmail\" as id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using \"usernameOrEmail\" as id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using \"password\" as id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using \"password\" as id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find a frame with name 'jacoco_report' and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.name(\"jacoco_report\")));\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/table/tbody/tr[1]/td[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/table/tbody/tr[1]/td[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/table/tbody/tr[1]/td[1]/a\")).click();\n\n\t\t// Locate the element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#breadcrumb > a.el_package\")).click();\n\t\t\n\t\t// Locate the element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#breadcrumb > span.info > a.el_class\")).click();\n\n\t\t// Locate the element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#breadcrumb > span.info > a.el_source\")).click();\n\n\t\t// Locate the element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#breadcrumb > span.info > a.el_session\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n\t\t\t\t\t\t\t\"  var xhr = new XMLHttpRequest();\\r\\n\" +\n\t\t\t\t\t\t\t\"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n\t\t\t\t\t\t\t\"//Send the proper header information along with the request\\r\\n\" +\n\t\t\t\t\t\t\t\"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n\t\t\t\t\t\t\t\"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n\t\t\t\t\t\t\t\"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CC_DownloadCodeCoverageReport {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\t\n\t\t// manage the timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCC_DownloadCodeCoverageReport(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[7]/a\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/div[3]/div/div/div/div[1]/div/div/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/div[3]/div/div/div/div[1]/div/ul/li[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/div[3]/div/div/button/a\")).click();\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                    \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                    \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                    \"//Send the proper header information along with the request\\r\\n\" +\n                    \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                    \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                    \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CE_APIAssociation {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCE_APIAssociation(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[1]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(1) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text of element located using CSS Selector is equal to the given value\n\t\tassertEquals(driver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(1) > text > textPath\")).getText(),\"/konkart/..\");\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CE_CorelatedRefresh {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// manage the timeout\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCE_CorelatedRefresh(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[1]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate an element with cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(12) > text > textPath\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate i element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[2]/div/div[1]/div[2]/i\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// execute Javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                    \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                    \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                    \"//Send the proper header information along with the request\\r\\n\" +\n                    \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                    \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                    \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CE_FrontEndError {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCE_FrontEndError(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[1]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(12) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(13) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > text:nth-child(59) > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CE_TestscriptAssociation {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCE_FrontEndError(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[1]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(1) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(2) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(3) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(4) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(5) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > g:nth-child(11) > text > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#chart > svg > g > text:nth-child(57) > textPath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\n\npublic class ChangePassword {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testChangePassword(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/header/div/nav/ul[2]/li/a/span\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\tdriver.findElement(By.linkText(\"Change Password\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"currentPassword\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"currentPassword\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"currentPassword\")).sendKeys(\"Testing@123\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"newPassword\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"newPassword\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"newPassword\")).sendKeys(\"Testing@123\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"verifyPassword\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"verifyPassword\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"verifyPassword\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/section/div/form/fieldset/div[5]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage contosoUniversityMVC461;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class CoursesCreateDelete {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// manage timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[1]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/ul/li[4]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/p/a\")).click();\n\n\t\t// locate element using given xpath and populate it with text \"3018\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[1]/div/input\")).sendKeys(\"3018\");\n\n\t\t// locate element using given xpath and populate it with text \"Cells\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[2]/div/input\")).sendKeys(\"Cells\");\n\n\t\t// locate element using given xpath and populate it with text \"5\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[3]/div/input\")).sendKeys(\"5\");\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[5]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/table/tbody/tr[2]/td[5]/a[3]\")).click();\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/form/div/input\")).click();\n\n\t\t// assert that the text of element located at given xpath is the same as given\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[2]/h2\")).getText(), \"Courses\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class CreatingaProject {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCreatingaProject(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// locate element with link text \"superadmin\" and click on it\n\t\tdriver.findElement(By.linkText(\"superadmin\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// locate element with link text \"Add a new project\" and click on it\n\t\tdriver.findElement(By.linkText(\"Add a new project\")).click();\n\n\t\t// locate web element using id \"projectName\" and click on it\n\t\tdriver.findElement(By.id(\"projectName\")).click();\n\n\t\t// locate web element using id \"projectName\" and clear it\n\t\tdriver.findElement(By.id(\"projectName\")).clear();\n\n\t\t// locate web element using id \"projectName\" and populate it\n\t\tdriver.findElement(By.id(\"projectName\")).sendKeys(\"Konakart\");\n\n\t\t// create a Select object with element located using id 'Test and select the option with visible text 'serial'\n\t\tnew Select(driver.findElement(By.id(\"Test\"))).selectByVisibleText(\"serial\");\n\n\t\t// create a Select object with element located using id 'Listener and select the option with visible text 'PRESENT'\n\t\tnew Select(driver.findElement(By.id(\"Listener\"))).selectByVisibleText(\"PRESENT\");\n\n\t\t// create a Select object with element located using id 'AIDevops_SourceCodeFileType and select the option with visible text 'java'\n\t\tnew Select(driver.findElement(By.id(\"AIDevops_SourceCodeFileType\"))).selectByVisibleText(\"java\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/div/form/fieldset/div[6]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate the 'tr' element using xpath and tagname and store its count\n\t\tint lastRowcount = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section/div/div/div[2]/div[2]/div[1]/div/table/tbody\")).findElements(By.tagName(\"tr\")).size();\n\n\t\t// locate web element using xpath that is given\n\t\tWebElement Lastrow = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section/div/div/div[2]/div[2]/div[1]/div/table/tbody/tr[\"+ lastRowcount + \"]\"));\n\n\t\t// assert that the text of the element is \"Konakart\"\n\t\tassertEquals(Lastrow.getText(), \"Konakart\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage carSystemWebForms452;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class CustomerCheck {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// manage the timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li/a\")).click();\n\n\t\t// locate an inout element using given xpath and fill it with text \"Admin\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[1]/div/input\")).sendKeys(\"Admin\");\n\n\t\t// locate an inout element using given xpath and fill it with text \"123456\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[2]/div/input\")).sendKeys(\"123456\");\n\n\t\t// locate an inout element using given xpath and click it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[4]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// locate a button using xpath and click on it\n\t\t// driver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[1]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li[2]/a\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// assert that the text extracted from element located using given xpath equals \"Charles\"\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/form/div[4]/div[2]/div/div/table/tbody/tr[2]/td[2]\")).getText(),\"Charles\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DataAnalyticsALMRequestTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate Map<String, Object> vars;\n\t\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\t\t// manage timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t}\n\n\t@Test\n\tpublic void dataAnalyticsALMRequest() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div.container > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[3]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using \"name\" as id and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// locate web element using \"name\" as id and populate it\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_DA_ALM\");\n\n\t\t// locate web element using \"dataset\" as id and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// locate web element using \"dataset\" as id and populate it\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"ALM_Input\");\n\n\t\t// driver.findElement(By.cssSelector(\".btn-primary:nth-child(2)\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(\n\t\t\t\tBy.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and populate it with text \"name\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[1]\")).sendKeys(\"name\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and populate it with text \"configurations-count\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[2]\")).sendKeys(\"configurations-count\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[3]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and populate it with text \"parent-name\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[3]\")).sendKeys(\"parent-name\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[4]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and populate it with text \"id\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[4]\")).sendKeys(\"id\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath populate it with \"name\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[1]\")).sendKeys(\"name\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// Find input element using xpath and fill it with \"id\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[2]\")).sendKeys(\"id\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div[2]/div[2]/div/div/div[2]/input[3]\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div[2]/div[2]/div/div/div[2]/input[3]\")).sendKeys(\"subtype-id\");\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and add text to it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[1]\")).sendKeys(\"configurations-count\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[2]\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it with text \"exec-status\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[2]\")).sendKeys(\"exec-status\");\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[3]\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it with text \"parent-name\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[3]\")).sendKeys(\"parent-name\");\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[4]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[4]\")).sendKeys(\"subtype-id\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[5]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[5]\")).sendKeys(\"id\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[1]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and fill \"name\" in it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[1]\")).sendKeys(\"name\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[2]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[2]\")).sendKeys(\"id\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[3]\")).click();\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find input element using xpath and populate it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[3]\")).sendKeys(\"subtype-id\");\n\t\t\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[4]/button\")).click();\n\t\t\n\t\t// wait for 6000 ms\n\t\tThread.sleep(6000);\n\t\t\n\t\t// Find element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// driver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\t\t// assertThat(driver.findElement(By.cssSelector(\".ng-binding >\n\t\t// .ng-scope\")).getText(), is(\"Queued\"));\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// Find element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\t\t\n\t\t// Find element using cssSelector and click it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\t\t\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DataAnalyticsRequestCreationTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void dataAnalyticsRequestCreation() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div.container > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[3]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_DA\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"dataanalytics_input\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// locate input element with given xpath and populate it with text \"Summary\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[1]\")).sendKeys(\"Summary\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and populate it with text \n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[2]\")).sendKeys(\"Severity\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[3]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and fill it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[3]\")).sendKeys(\"Detected by Name\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[4]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and add text to it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[1]/div/div/div[2]/input[4]\")).sendKeys(\"Defect ID\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and populate it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[1]\")).sendKeys(\"Summary\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and add text to it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[2]/div/div/div[2]/input[2]\")).sendKeys(\"Defect ID\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div[2]/div[2]/div/div/div[2]/input[3]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div[2]/div[2]/div/div/div[2]/input[3]\")).sendKeys(\"Module\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[1]\")).click();\n\n\n\t\t// locate element with given xpath and populate it with text \"Severity\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[1]\")).sendKeys(\"Severity\");\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[2]\")).click();\n\n\t\t// locate element with given xpath and populate it with text \"Status\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[2]\")).sendKeys(\"Status\");\n\t\t\t\t\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[3]\")).click();\n\t\t\n\t\t// locate element with given xpath and populate it with text \"Detected by Name\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[3]\")).sendKeys(\"Detected by Name\");\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[4]\")).click();\n\n\t\t// locate element with given xpath and populate it with text \"Module\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[4]\")).sendKeys(\"Module\");\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[5]\")).click();\n\n\t\t// locate element with given xpath and fill it with text \"Defect ID\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[3]/div/div/div[2]/input[5]\")).sendKeys(\"Defect ID\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[1]\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with given xpath and add \"Summary\" as text\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[1]\")).sendKeys(\"Summary\");\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[2]\")).click();\n\n\t\t// locate element with given xpath and add \"Defect ID\" as text\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[2]\")).sendKeys(\"Defect ID\");\n\n\t\t// locate element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[3]\")).click();\n\n\t\t// locate element with given xpath and add \"Module\" as text\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[3]/div/div[4]/div/div/div[2]/input[3]\")).sendKeys(\"Module\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/section/div[3]/div/div/form/div[4]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate element with link text as \"Signout\" and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DataAnalyticsViewALMResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\t\t\n\t\t// manage the timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void dataAnalyticsViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using \"username\" as id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using \"username\" as id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id = \"password\" and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate an element with cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[4]/div/fieldset/div/div[1]/a[2]/div/div[1]/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,970.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[4]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll to given dimension\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll to given dimension\n\t\tjs.executeScript(\"window.scrollTo(0,250)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate an element using \"Signout\" as link text and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DataAnalyticsViewResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void dataAnalyticsViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id = \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using \"username\" as id and populate it\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id = \"password\" and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div.container > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,970.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div.container-fluid.tile-ui-view.ng-scope > div:nth-child(2) > div > ul > li > div > div:nth-child(1) > a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll to given dimension\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".col-sm-3 > h3\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"text:nth-child(7)\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// driver.findElement(By.linkText(\"Pareto graph\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate an element using \"Signout\" as link text and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t// execute javascript function\n\t\t// js.executeScript(\"window.sendCoverageData();\");\n\t\t// wait for 10000 ms\n\t\t// Thread.sleep(10000);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DeleteJobsTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// manage timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void deleteJobs() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id and populate it with \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and populate it with \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate an element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[2]/div/div[1]/div[1]/div[2]/div[2]/div/ul/li/div/div[1]/div/button[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .col-md-10\")).click();\n\n\t\t// execute javascript function to scroll to specified dimension\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[1]/div/div[1]/span[2]/span\")).getText(), is(\"Failed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption .glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption > .btn:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[2]/div/div[1]/span[2]/span\")).getText(), is(\"Completed\"));\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".glyphicon-trash\")).click();\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".caption > .btn:nth-child(2)\")).click();\n\n\t\t// locate an element using given xpath and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[2]/div/div[1]/span[2]/span\")).getText(), is(\"Completed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using given cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption .glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using given cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption > .btn:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[1]/div/div[1]/span[2]/span[1]\")).getText(), is(\"Failed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using given cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using given cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".caption > .btn:nth-child(2)\")).click();\n\n\t\t// locate an element using given xpath and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[3]/a[2]/div/div[1]\")).click();\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[2]/div/div[1]/span[2]/span\")).getText(), is(\"Completed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption .glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption > .btn:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li[1]/div/div[1]/span[2]/span[1]\")).getText(), is(\"Failed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".caption > .btn:nth-child(2)\")).click();\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div.container > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div/ul/li[2]/div/div[1]/span[2]/span\")).getText(), is(\"Completed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption .glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) > div > .caption > .btn:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted using element located using xpath is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div/ul/li[1]/div/div[1]/span[2]/span[1]\")).getText(), is(\"Failed\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".caption > .btn:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate an element using cssSelector and click it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t// execute javascript function\n\t\t// js.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\t// Thread.sleep(10000);\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DeletingAProject {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// manage timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDeletingAProject(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it with value \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id and add \"admin\" to it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// locate an element with link text as \"superadmin user\" and click on it\n\t\tdriver.findElement(By.linkText(\"superadmin user\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// Find element using \"Add a new project\" as link text and click on it\n\t\tdriver.findElement(By.linkText(\"Add a new project\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"projectName\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"projectName\")).clear();\n\n\t\t// locate web element using id and populate it with text \"Konakart_deletion\n\t\tdriver.findElement(By.id(\"projectName\")).sendKeys(\"Konakart_deletion\");\n\n\t\t// locate web element using id and click on it\n\t\t// driver.findElement(By.id(\"Test\")).click();\n\n\t\t// create a Select object with element located using id 'Test' and select the option with visible text 'serial'\n\t\tnew Select(driver.findElement(By.id(\"Test\"))).selectByVisibleText(\"serial\");\n\n\t\t// create a Select object with element located using id 'Listener' and select the option with visible text 'PRESENT'\n\t\tnew Select(driver.findElement(By.id(\"Listener\"))).selectByVisibleText(\"PRESENT\");\n\n\t\t// create a Select object with element located using id 'AIDevops_SourceCodeFileType' and select the option with visible text 'java'\n\t\tnew Select(driver.findElement(By.id(\"AIDevops_SourceCodeFileType\"))).selectByVisibleText(\"java\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/div/form/fieldset/div[6]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate the 'tr' element using xpath and tagname and store its count\n\t\tint lastRowcount = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section/div/div/div[2]/div[2]/div[1]/div/table/tbody\")).findElements(By.tagName(\"tr\")).size();\n\n\t\t// print the value of lastRow\n\t\tSystem.out.println(lastRowcount);\n\n\t\t// locate web element using xpath that is given\n\t\tWebElement Lastrow = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section/div/div/div[2]/div[2]/div[1]/div/table/tbody/tr[\"+ lastRowcount + \"]/td/button\"));\n\n\t\t// click on the element\n\t\tLastrow.click();\n\n\t\t// create an object of Alert to handle alerts\n\t\tAlert alert = driver.switchTo().alert();\n\n\t\t// accept the alert\n\t\talert.accept();\n\n\t\t// wait for 15000 ms\n\t\tThread.sleep(15000);\n\n\t\t// locate web elements using xpath that is given and store their count \n\t\tint lastcount = driver.findElement(By.xpath(\"//*[@id=\\\"collapse2\\\"]/div[1]/div/table/tbody\")).findElements(By.tagName(\"tr\")).size();\n\n\t\t// print the count\n\t\tSystem.out.println(lastcount);\n\n\t\t// locate web elements using xpath that is given\n\t\tWebElement Lrow = driver.findElement(By.xpath(\"//*[@id=\\\"collapse2\\\"]/div[1]/div/table/tbody/tr[\" + lastcount + \"]\"));\n\n\t\t// get the text from the element\n\t\tLrow.getText();\n\n\t\t// wait for 6000 ms\n\t\tThread.sleep(6000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// assert that the text from the element \n\t\tAssert.assertNotEquals(Lrow.getText(), \"Konakart_deletion\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage contosoUniversityMVC461;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class DepartmentCreateEditDelete {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// manage the timeout setting\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[1]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/ul/li[6]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/p/a\")).click();\n\n\t\t// locate element using given xpath and populate it using text \"Zoology\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[1]/div/input\")).sendKeys(\"Zoology\");\n\n\t\t// locate element using given xpath and populate it using text \"1000000000\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[2]/div/input\")).sendKeys(\"1000000000\");\n\n\t\t// locate element using given xpath and populate it with value \"08/05/2019\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[3]/div/input\")).sendKeys(\"08/05/2019\");\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[5]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\t\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/table/tbody/tr[3]/td[5]/a[3]\")).click();\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/form/div/input\")).click();\n\n\t\t// assert that the text extracted from the element found using the given xpath equals \"Departments\"\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[2]/h2\")).getText(), \"Departments\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DL_Collapse {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDL_Collapse(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[2]/h5\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and add \"Testing@123\" as its value\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// JavascriptExecutor jse = (JavascriptExecutor)driver;\n\n\t\t// jse.executeScript(\"window.scrollBy(0,-1000)\", \"\");\n\n\t\t// execute javascript function to scroll\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\t// driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find frame with id \"iframe2\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe2\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default content\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// find frame with id \"iframe3\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe3\")));\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default content\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// find frame with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default content\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                    \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                    \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                    \"//Send the proper header information along with the request\\r\\n\" +\n                    \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                    \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                    \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DL_ReportFailFail {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDetailedReportFailFail(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[2]/h5\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using \"usernameOrEmail\" as id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using \"password\" as id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using \"password\" as id and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// JavascriptExecutor jse = (JavascriptExecutor)driver;\n\n\t\t/// jse.executeScript(\"window.scrollBy(0,-1000)\", \"\");\n\n\t\t// execute javascript function\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 4000 ms\n\t\tThread.sleep(4000);\n\t\t\n\t\t// Locate the frame with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#kibana-body > div > div > div > div.application.tab-visualize > visualize-app > div > div > div > div > div > div > div > div > div > div > div > svg > g > g.arcs > path:nth-child(12)\")).click();\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/ul/li[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DL_ReportFailPass {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// manage the timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDetailedReportFailPass(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[2]/h5\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id and populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element with \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element with \"password\" as id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element with \"password\" as id and populate it\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// JavascriptExecutor jse = (JavascriptExecutor)driver;\n\n\t\t/// jse.executeScript(\"window.scrollBy(0,-1000)\", \"\");\n\n\t\t// scroll using JavaScriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 1000 ms\n\t\tThread.sleep(1000);\n\n\t\t// locate frame with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#kibana-body > div > div > div > div.application.tab-visualize > visualize-app > div > div > div > div > div > div > div > div > div > div > div > svg > g > g.arcs > path:nth-child(25)\")).click();\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/ul/li[4]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DL_ReportsPassFail {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// add timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDetailedReportFailPass(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[2]/h5\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and add value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id  \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and populate it and add value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// JavascriptExecutor jse = (JavascriptExecutor)driver;\n\n\t\t/// jse.executeScript(\"window.scrollBy(0,-1000)\", \"\");\n\n\t\t// scroll using JavascriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 1000 ms\n\t\tThread.sleep(1000);\n\n\t\t// locate frame using id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#kibana-body > div > div > div > div.application.tab-visualize > visualize-app > div > div > div > div > div > div > div > div > div > div > div > svg > g > g.arcs > path:nth-child(20)\")).click();\n\n\t\t// driver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/ul/li[4]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http:\t//localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"\t//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n\t\t\t\t// execute javascript function\n\t\t\t\t\"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class DL_ReportsPassPass {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testDetailedReportPassPass(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[2]/h5\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and use \"testuser\" to populate it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and populate it using \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 35000 ms\n\t\tThread.sleep(35000);\n\n\t\t// JavascriptExecutor jse = (JavascriptExecutor)driver;\n\n\t\t/// jse.executeScript(\"window.scrollBy(0,-1000)\", \"\");\n\n\t\t// using JavascriptExecutor to perform scrolling\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate frame with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#kibana-body > div > div > div > div.application.tab-visualize > visualize-app > div > div > div > div > div > div > div > div > div > div > div > svg > g > g.arcs > path:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http:\t//localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"\t//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DownloadinputoutputTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// create a map object using HashMap\n\t\tMap<String, Object> chromePrefs = new HashMap<String, Object>();\n\n\t\t// setting properties for driver\n\t\tchromePrefs.put(\"profile.default_content_settings.popups\", 0);\n\n\t\t// create and empty variable\n\t\tObject folder = null;\n\n\t\t// setting properties for driver\n\t\tchromePrefs.put(\"download.default_directory\", folder);\n\n\t\t// setting properties for driver\n\t\tchromePrefs.put(\"profile.content_settings.exceptions.automatic_downloads.*.setting\", 1);\n\n\t\t// setting properties for driver\n\t\tchromePrefs.put(\"download.prompt_for_download\", false);\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\t// initialize the variable for HashMap\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// setting driver timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\tpublic String waitForWindow(int timeout) {\n\t\t// try catch block\n\t\ttry {\n\t\t\t// wait for timeout ms\n\t\t\tThread.sleep(timeout);\n\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\n\t\t}\n\t\t// create a set of handle of web page\n\t\tSet<String> whNow = driver.getWindowHandles();\n\n\t\t// create a set of String\n\t\tSet<String> whThen = (Set<String>) vars.get(\"window_handles\");\n\n\t\tif (whNow.size() > whThen.size()) {\n\t\t\twhNow.removeAll(whThen);\n\n\t\t}\n\t\treturn whNow.iterator().next();\n\n\t}\n\n\t@Test\n\tpublic void downloadinputoutput() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using \"username\" as id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using \"username\" as id and fill it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using \"password\" as id and fill it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[1]/div[2]/div[2]/div/ul/li/div/div[1]/div/button[1]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[1]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[2]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(2) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[1]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[2]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[3]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(3) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[1]/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[2]/i\")).click();\n\n\t\t// driver.findElement(By.xpath(\"\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div/ul/li/div/div[1]/p/a[1]/i\")).click();\n\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate element using given link text and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t// execute javascript function\n\t\t// js.executeScript(\"window.sendCoverageData();\");\n\t\t// wait for 10000 ms\n\t\t// Thread.sleep(10000);\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class EditaCreatedProject {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testEditaCreatedProject(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"\t//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and populate it with value \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// locate web element with \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element with \"password id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element with \"password\" id and fill it with text \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// click on an element located using link text \"superadmin user\"\n\t\tdriver.findElement(By.linkText(\"superadmin user\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// click on an element located using link text \"Edit an existing project\"\n\t\tdriver.findElement(By.linkText(\"Edit an existing project\")).click();\n\n\t\t// create a Select object with element located using id 'proj' and select the option with visible text 'Konakart'\n\t\tnew Select(driver.findElement(By.id(\"proj\"))).selectByVisibleText(\"Konakart\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/div/div[2]/form/fieldset/div[2]/button\"))\n\t\t\t\t.click();\n\n\t\t// create a Select object with element located using id \"impacted\" and select the option with visible text 'Konakart'\n\t\tnew Select(driver.findElement(By.id(\"impacted\"))).selectByVisibleText(\"Git-Lab\");\n\n\t\t// locate web element with \"AIDevOps_GitCode\" as id and click on it\n\t\tdriver.findElement(By.id(\"AIDevOps_GitCode\")).click();\n\n\t\t// locate web element with \"AIDevOps_GitCode\" as id and clear it\n\t\tdriver.findElement(By.id(\"AIDevOps_GitCode\")).clear();\n\n\t\t// locate web element with \"AIDevOps_GitCode\" as id and populate it using value \"38077\" \n\t\tdriver.findElement(By.id(\"AIDevOps_GitCode\")).sendKeys(\"38077\");\n\n\t\t// locate web element using id \"AIDevops_GitUrl\" and click on it\n\t\tdriver.findElement(By.id(\"AIDevops_GitUrl\")).click();\n\n\t\t// locate web element using id \"AIDevops_GitUrl\" and clear it\n\t\tdriver.findElement(By.id(\"AIDevops_GitUrl\")).clear();\n\n\t\t// locate web element using id \"AIDevops_GitUrl\" and populate it with value \"https://infygit.ad.infosys.com/\"\n\t\tdriver.findElement(By.id(\"AIDevops_GitUrl\")).sendKeys(\"https://infygit.ad.infosys.com/\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/div/div[2]/form/fieldset/div[8]/button\")).click();\n\n\t\t// wait for 4000 ms\n\t\tThread.sleep(4000);\n\t\t\n\t\t// assert that the element located using given xpath is displayed\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div/div\")).isDisplayed(), true);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class EditProfile {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testEditProfile(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id \"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// locate web element using id \"usernameOrEmail\" and populate it using value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// locate web element using id \"password\" and populate it using value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/header/div/nav/ul[2]/li/a/span\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// Click on the the web element with \"Edit Profile\" as link text \n\t\tdriver.findElement(By.linkText(\"Edit Profile\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate web element using id \"email\" and click on it\n\t\tdriver.findElement(By.id(\"email\")).click();\n\n\t\t// locate web element using id \"email\" and clear it\n\t\tdriver.findElement(By.id(\"email\")).clear();\n\n\t\t// locate web element using id \"email\" and use \"testinguser@yahoo.com\" to fill it\n\t\tdriver.findElement(By.id(\"email\")).sendKeys(\"testinguser@yahoo.com\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/section/div/form/fieldset/div[4]/button\")).click();\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class EditProfileChangePasswordTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void editProfileChangePassword() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id \"username\" and fill it with \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element with id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and fill it with \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on a button located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on a button located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on a button located using cssSelector\n\t\tdriver.findElement(By.linkText(\"Edit Profile\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using \"firstName\" as id and click on it\n\t\tdriver.findElement(By.id(\"firstName\")).click();\n\n\t\t// locate web element using id \"firstName\" and set it to \"Test\"\n\t\tdriver.findElement(By.id(\"firstName\")).sendKeys(\"Test\");\n\n\t\t// locate web element using \"lastName\" as id and click on it\n\t\tdriver.findElement(By.id(\"lastName\")).click();\n\n\t\t// locate web element using id \"lastName\" and populate it with text \"User\"\n\t\tdriver.findElement(By.id(\"lastName\")).sendKeys(\"User\");\n\n\t\t// locate web element using \"username\" as id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id \"username\" and populate it using \"Testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"Testuser\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on a button located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on a web element with partial text = \"Change Password\"\n\t\tdriver.findElement(By.linkText(\"Change Password\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id \"currentPassword\" and click on it\n\t\tdriver.findElement(By.id(\"currentPassword\")).click();\n\n\t\t// locate web element using id \"currentPassword\" and populate it with \"Testing@123\"\n\t\tdriver.findElement(By.id(\"currentPassword\")).sendKeys(\"Testing@123\");\n\n\t\t// locate web element using id \"newPassword\" and click on it\n\t\tdriver.findElement(By.id(\"newPassword\")).click();\n\n\t\t// locate web element using id \"newPassword\" and populate it with text \"Testuser@123\"\n\t\tdriver.findElement(By.id(\"newPassword\")).sendKeys(\"Testuser@123\");\n\n\t\t// locate web element using id \"verifyPassword\" and click on it\n\t\tdriver.findElement(By.id(\"verifyPassword\")).click();\n\n\t\t// locate web element using id \"verifyPassword\" and populate it using \"Testuser@123\"\n\t\tdriver.findElement(By.id(\"verifyPassword\")).sendKeys(\"Testuser@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a web element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text of element located using cssSelector is same as given value\n\t\tassertThat(driver.findElement(By.cssSelector(\".text-success > .ng-binding\")).getText(),is(\"Password Changed Successfully\"));\n\n\t\t// locate a web element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate a web element using link text \"Signout\" and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class ExportPDFTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// create an object to store the chrome preferences\n\t\tMap<String, Object> chromePrefs = new HashMap<String, Object>();\n\n\t\t// setting chrome preference \n\t\tchromePrefs.put(\"profile.default_content_settings.popups\", 0);\n\n\t\tObject folder = null;\n\n\t\t// setting chrome preference \n\t\tchromePrefs.put(\"download.default_directory\", folder);\n\n\t\t// setting chrome preference \n\t\tchromePrefs.put(\"profile.content_settings.exceptions.automatic_downloads.*.setting\", 1);\n\n\t\t// setting chrome preference \n\t\tchromePrefs.put(\"download.prompt_for_download\", false);\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void exportPDF() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id: \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id \"username\" and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using \"password\" as id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and fill it with \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// click on the element located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on the element located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on the element located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".btn-primary:nth-child(2)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on the element located using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".col-xs-7 > .ng-binding\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on a web element with the value of link text as \"Signout\" \n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tdriver.findElement(By.linkText(\"Click here to download csv\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a web element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".col-xs-7 > .ng-binding\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a web element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#wrapper > div.MLbody.row.page-row.page-row-expanded.indexViewDiv > div > div:nth-child(3) > div:nth-child(3) > div > fieldset > div > div > a:nth-child(2) > div > div.tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a web element using link text \"Request_DA\" and click on it\n\t\tdriver.findElement(By.linkText(\"Request_DA\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"WC_div\\\"]/center/h3/div/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"Heat Map\\\"]/center/div/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a web element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate a web element using link text \"Signout\" and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage carSystemWebForms452;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\n\nimport cookie.Utility;\n\npublic class FilterCheck {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set the timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li/a\")).click();\n\n\t\t// find input element using given xpath and fill it with value \"Admin\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[1]/div/input\")).sendKeys(\"Admin\");\n\n\t\t// find element using given xpath and fill it with value \"123456\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[2]/div/input\")).sendKeys(\"123456\");\n\n\t\t// find element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[4]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li[1]/a\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/ul/li[2]/a\")).click();\n\n\t\t// assert that the text of element found using given xpath is same as the value given\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/form/div[4]/div[1]/div/h1\")).getText(),\"All cars which vignette expires soon!\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class FindMissingTCALMRequestTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// driver timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void findMissingTCALMRequest() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// find web element by id \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element by id \"username\" and fill it with text \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element by id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element by id \"password\" and fill it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find an element by cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element by id \"name\" and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// find web element by id \"name\" and fill it with text \"Request_FMTC_ALM\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_FMTC_ALM\");\n\n\t\t// find web element by id \"requirementsDataset\" and click on it\n\t\tdriver.findElement(By.id(\"requirementsDataset\")).click();\n\n\t\t// find web element by id \"requirementsDataset\" and fill it with text \"ALM_Input\"\n\t\tdriver.findElement(By.id(\"requirementsDataset\")).sendKeys(\"ALM_Input\");\n\n\t\t// find web element by name \"reqidcoloumn\" and click on it\n\t\tdriver.findElement(By.name(\"reqidcoloumn\")).click();\n\n\t\t// find web element by name \"reqidcoloumn\" and fill it with text \"description\"\n\t\tdriver.findElement(By.name(\"reqidcoloumn\")).sendKeys(\"description\");\n\n\t\t// find web element by id \"testDataset\" and click on it\n\t\tdriver.findElement(By.id(\"testDataset\")).click();\n\n\t\t// find web element by id \"testDataset\" and populate it using \"ALM_Input\n\t\tdriver.findElement(By.id(\"testDataset\")).sendKeys(\"ALM_Input\");\n\n\t\t// find element by name \"tcidcoloumn\" and click it\n\t\tdriver.findElement(By.name(\"tcidcoloumn\")).click();\n\n\t\t// find element by name \"tcidcoloumn\" and populate it with text \"name\"\n\t\tdriver.findElement(By.name(\"tcidcoloumn\")).sendKeys(\"name\");\n\n\t\t// find element by cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// execute javascript function to scroll to given loaction\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 6000 ms\n\t\tThread.sleep(6000);\n\n\t\t// find element by cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\n\t\t// find element by cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on web element having link text \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class FindMissingTCRequestCreationTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void findMissingTCRequestCreation() throws Exception {\n\t\t\n\t\t// go to the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element by id \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find element by id \"username and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element by id \"password and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element by id \"password and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on button found using cssSelector\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on button found using specified xpath\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on button found using specified xpath\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element by id \"name and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// find element by id \"name\" and populate it with value \"Request_FMTC\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_FMTC\");\n\n\t\t// find web element by id \"requirementsDataset and click on it\n\t\tdriver.findElement(By.id(\"requirementsDataset\")).click();\n\n\t\t// find element by id \"requirementsDataset\" and populate it with value \"missingtc_req_input\"\n\t\tdriver.findElement(By.id(\"requirementsDataset\")).sendKeys(\"missingtc_req_input\");\n\n\t\t// find element by name \"reqidcoloumn\" and click on it\n\t\tdriver.findElement(By.name(\"reqidcoloumn\")).click();\n\n\t\t// find element by name \"reqidcoloumn\" and set its value to \"Name\"\n\t\tdriver.findElement(By.name(\"reqidcoloumn\")).sendKeys(\"Name\");\n\n\t\t// find web element by id = \"testDataset\" and click on it\n\t\tdriver.findElement(By.id(\"testDataset\")).click();\n\n\t\t// find element by id = \"testDataset\" and set its value to \"missingtc_tc_input\"\n\t\tdriver.findElement(By.id(\"testDataset\")).sendKeys(\"missingtc_tc_input\");\n\t\n\t\t// find element by name \"tcidcoloumn\" and click it\n\t\tdriver.findElement(By.name(\"tcidcoloumn\")).click();\n\n\t\t// find element by name \"tcidcoloumn\" and fill it with value \"TS NAME\"\n\t\tdriver.findElement(By.name(\"tcidcoloumn\")).sendKeys(\"TS NAME\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll by executing javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class FindMissingTCViewALMResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// driver timeout setting\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void findMissingTCViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element by id : \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find element having id as \"password\" by id and set it to \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id \"password\" by id  and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element by id \"password\" and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using given cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll using javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll using javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t{\n\t\t\t// find element with id \"REQs\"\n\t\t\tWebElement element = driver.findElement(By.id(\"REQs\"));\n\n\t\t\t// create object of action class \n\t\t\tActions builder = new Actions(driver);\n\n\t\t\t// perform mouse over funtion\n\t\t\tbuilder.moveToElement(element).perform();\n\n\t\t}\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using cssSelector with value \".header-profile-image\" and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class FindMissingTCViewResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// close the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void findMissingTCViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id as \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find element by id with id = \"username\" and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element by id with id as \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id as \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by cssSelector using value \".btn-primary\" and click it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by xpath using given value and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[2]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll using javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t{\n\t\t\t// find element with id \"REQs\"\n\t\t\tWebElement element = driver.findElement(By.id(\"REQs\"));\n\n\t\t\t// create object of action class \n\t\t\tActions builder = new Actions(driver);\n\n\t\t\t// perform mouse over funtion\n\t\t\tbuilder.moveToElement(element).perform();\n\n\t\t}\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using cssSelector with value \".header-profile-image\" and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class ForgotPassword {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\t\t\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\t\t\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testForgotPassword(String url) throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[4]/a\")).click();\n\t\t\n\t\t// find web element by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\t\t\n\t\t// locate web element by id \"username\" and clear it\n\t\tdriver.findElement(By.id(\"username\")).clear();\n\t\t\n\t\t// find element by id \"username\" and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/ui-view/section/div/form/fieldset/div[2]/button\")).click();\n\t\t\t\t\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http:\t//localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"\t//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class HL_Reports1cycle {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testReportsTestScriptExecution(String url) throws Exception {\n\t\t\n\t\t// go to the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// find element using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[1]/h5\")).click();\n\n\t\t// find web element by id with value = \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element using id =\"usernameOrEmail\" and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element by id using id = \"usernameOrEmail\" and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element having id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id with id = \"password\" and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// scroll using JavascriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class HL_Reports3cycles {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// manage timeout\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testReportsTestScriptExecution(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// find element by the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[1]/h5\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// locate web element with id = \"usernameOrEmail\" using id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with text \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element with id = \"password\" using id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and set its value to \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find a button by using the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// scroll using JavascriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[1]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[1]/div/div[2]/div[1]/div[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class HL_ReportsCollapse {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testReportsCollapse(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// find element by the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[1]/h5\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on itand clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with txt \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and fill it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// scroll using JavascriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find frame element with id \"iframe1\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe1\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default contents\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find frame element with id \"iframe2\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe2\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default contents\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find frame element with id \"iframe3\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe3\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default contents\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find frame element with id \"iframe4\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe4\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default contents\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find frame element with id \"iframe5\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe5\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// switch to the default contents\n\t\tdriver.switchTo().defaultContent();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find frame element with id \"iframe5\" and switch to it\n\t\tdriver.switchTo().frame(driver.findElement(By.id(\"iframe6\")));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div/div/div[3]/visualize-app/div/div/div/div/div/div/vislib-legend/div/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class HL_ReportsPrevCycle {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// manage timeout settings\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testReportsTestScriptExecution(String url) throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/a\")).click();\n\n\t\t// find element by the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[8]/ul/li[1]/h5\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on itand clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with txt \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and fill it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\n\t\t// wait for 55000 ms\n\t\tThread.sleep(55000);\n\n\t\t// scroll using JavascriptExecutor\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[2]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div[2]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[2]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[3]/div[2]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[2]/div/div[2]/div[1]/div[1]/div/div/button\")).click();\n\n\t\t// find hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[4]/div[2]/div/div[2]/div[1]/div[1]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage contosoUniversityMVC461;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class InstructorsCreateDelete {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\n\t\t// manage the timeout duration\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[1]/button\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/ul/li[5]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/p/a\")).click();\n\n\t\t// find element by given xpath and set its value to \"Charles\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[1]/div/input\")).sendKeys(\"Charles\");\n\n\t\t// find element by given xpath and set its value to \"Benedict\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[2]/div/input\")).sendKeys(\"Benedict\");\n\n\t\t// find element by given xpath and set its value to \"08/05/1992\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[3]/div/input\")).sendKeys(\"08/05/1992\");\n\n\t\t// find element by given xpath and set its value to \"Nagercoil\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[4]/div/input\")).sendKeys(\"Nagercoil\");\n\n\t\t// find element by given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[6]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// click on the element found by using given xpath\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/table/tbody/tr[2]/td[6]/a[2]\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// find element by given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[4]/div/input\")).clear();\n\n\t\t// find element by given xpath and set its value to \"Thittuvilai\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[4]/div/input\")).sendKeys(\"Thittuvilai\");\n\n\t\t// find element by given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[6]/div/input\")).click();\n\n\t\t// find element by given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/table/tbody/tr[2]/td[6]/a[4]\")).click();\n\n\t\t// find element by given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/form/div/input\")).click();\n\n\t\t// assert that the text extracted from the elementfound using the given xpath is equal to \"Instructors\"\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[2]/h2\")).getText(), \"Instructors\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class InvalidUserLoginTest {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t}\n\n\t@Test\n\tpublic void invalidUserLogin() throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by id with id = \"username\" and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find element by id with id = \"username\" and populate it with value = \"test\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"test\");\n\n\t\t// find element by id with id = \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element by id with id = \"password\" and populate it with value = \"test\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"test\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text extracted from element located using cssSelector is the given value\n\t\tassertThat(driver.findElement(By.cssSelector(\".text-center > div > .ng-binding\")).getText(), is(\"Invalid username or password\"));\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class IT_Calendar {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testIT_Calendar(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i \")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/div/ul/li[2]/span/button[1]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i \")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/div/ul/li[2]/span/button[2]\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i \")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/div/ul/li[2]/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i \")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/thead/tr[1]/th[1]/button/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/thead/tr[1]/th[3]/button\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find element using the given xpath and store it in a variable\n\t\tWebElement e = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/thead/tr[1]/th[2]/button/strong\"));\n\n\t\t// print the text present inside the element\n\t\tSystem.out.println(e.getText());\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/thead/tr[1]/th[2]/button/strong\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/thead/tr/th[2]/button/strong\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[4]/td[5]/button/span\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[1]/td[1]/button/span\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[1]/td[5]/button/span\")).click();\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class IT_DownloadCsv {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testIT_DownloadCsv(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[4]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[2]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[2]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[5]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[3]/button[1]\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement( By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[3]/button[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\tThread.sleep(10000);\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class ProcessPredictionRequestCreationTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void processPredictionRequestCreation() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id \"username and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id \"username\" and fill it with \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and set its value to \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by given cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by given xpath and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[3]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll using JavascriptExecutor\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 6000 ms\n\t\tThread.sleep(6000);\n\n\t\t// find an element by xpath and click it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element by id \"name\" and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// Find web element by id \"name\" and populate it with text \"Request_ProcessPred\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_ProcessPred\");\n\n\t\t// Find web element by id \"dataset\" and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// find web element by id \"dataset\" and set it to \"processpred_input\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"processpred_input\");\n\n\t\t// find web element by id \"coloumn\" and click on it\n\t\tdriver.findElement(By.id(\"coloumn\")).click();\n\n\t\t// find web element by id \"coloumn\" and fill it with value \"No.of.Defects\"\n\t\tdriver.findElement(By.id(\"coloumn\")).sendKeys(\"No.of.Defects\");\n\n\t\t// find web element by id \"modeltype\" and click on it\n\t\tdriver.findElement(By.id(\"modeltype\")).click();\n\n\t\t// find web element by id \"modeltype\" and populate it with text \"Regressor\"\n\t\tdriver.findElement(By.id(\"modeltype\")).sendKeys(\"Regressor\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// find element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with class 'header-profile-image' using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate element with link text 'Signout' and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class ProcessPredictionALMRequestTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\tprivate Map<String, Object> vars;\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t}\n\n\t@Test\n\tpublic void processPredictionALMRequest() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element using id \"username and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// locate web element using id \"username\" and fill it with \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// locate web element using id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// locate web element using id \"password\" and set its value to \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find element using cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// find element using given xpath and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[3]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using given xpath and click it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element by id \"name\" and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// Find web element by id \"name\" and populate it with text \"Request_ProcessPred_ALM\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_ProcessPred_ALM\");\n\n\t\t// Find web element by id \"dataset\" and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// find web element by id \"dataset\" and set it to \"ALM_Input\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"ALM_Input\");\n\n\t\t// find web element by id \"coloumn\" and click on it\n\t\tdriver.findElement(By.id(\"coloumn\")).click();\n\n\t\t// find web element by id \"coloumn\" and fill it with value \"configurations-count\"\n\t\tdriver.findElement(By.id(\"coloumn\")).sendKeys(\"configurations-count\");\n\n\t\t// find web element by id \"modeltype\" and click on it\n\t\tdriver.findElement(By.id(\"modeltype\")).click();\n\n\t\t// find web element by id \"modeltype\" and populate it with text \"Regressor\"\n\t\tdriver.findElement(By.id(\"modeltype\")).sendKeys(\"Regressor\");\n\n\t\t// find element by cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with class 'header-profile-image' using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// locate element with link text 'Signout' and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage dancingGoatCoreMVC31;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\nimport cookie.Utility;\n\npublic class PartnershipRequestCheck {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[7]/a\")).click();\n\n\t\t// find element by xpath and populate it with value \"Stark Industies\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[1]/div[2]/input\")).sendKeys(\"Stark Industies\");\n\n\t\t// find element by xpath and populate it with value \"Anthony\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[2]/div[2]/input\")).sendKeys(\"Anthony\");\n\n\t\t// find element by xpath and populate it with value \"Stark\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[3]/div[2]/input\")).sendKeys(\"Stark\");\n\n\t\t// find element by xpath and populate it with value \"3123152055\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[4]/div[2]/input\")).sendKeys(\"3123152055\");\n\n\t\t// find element by xpath and populate it with value \"ironman@stark.com\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[5]/div[2]/input\")).sendKeys(\"ironman@stark.com\");\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[6]/fieldset/span[1]/label\")).click();\n\n\t\t// find element by xpath and click it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/form/div[7]/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// assert that the text in element located at the given xpath is equal to the fiven text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[1]/div/section[2]/div/div/div[2]/div/span\")).getText(),\n\t\t\t\t\"We'll contact you within 48 hours to discuss details and explain any question of yours regarding the partnership.\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class OT_SearchBar {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testOT_SearchBar(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"optimization-scripts\\\"]/div[3]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\"\n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element having id = \"dataset\" by id and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// find element having id = \"dataset\" by id and clear it\n\t\tdriver.findElement(By.id(\"dataset\")).clear();\n\n\t\t// find element having id = \"dataset\" by id and populate it with value \"Suite.Test.seleniumpack.AddingTwoProducts.addingTwoProducts\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"Suite.Test.seleniumpack.AddingTwoProducts.addingTwoProducts\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using cssSelector and assign it to the variable 'element'\n\t\tWebElement element = driver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(3)\"));\n\n\t\t// create object of JavascriptExecutor\n\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\n\t\t// scroll\n\t\tjse.executeScript(\"arguments[0].scrollIntoView()\", element);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// click on the element\n\t\telement.click();\n\n\t\t// assert that the text in element found using xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"popup-table\\\"]/div[2]/div[1]/table/tbody/tr/td[2]\")).getText(), \"Suite.Test.seleniumpack.AddingTwoProducts.addingTwoProducts\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"popup-table\\\"]/div[2]/div[2]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class OT_PrevCycle {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testOT_PrevCycle(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"optimization-scripts\\\"]/div[3]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 3\"\n\t\tdriver.findElement(By.linkText(\"Cycle 3\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(6)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"popup-table\\\"]/div[2]/div[2]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by cssSelector and click it\n\t\tdriver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(8)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"popup-table\\\"]/div[2]/div[2]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\tThread.sleep(10000);\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class OT_OptimizedThreshold {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testOT_OptimizedThreshold(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// scroll\n\t\t((JavascriptExecutor) driver).executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n\n\t\t// wait for 1000 ms\n\t\tThread.sleep(1000);\n\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/div[3]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// find element by the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/div[3]/div/div/div[1]/div/ul/li[5]\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find an element by cssSelector\n\t\tWebElement slider = driver.findElement(By.cssSelector(\"#myRange\"));\n\n\t\t// create object of Actions class\n\t\tActions move = new Actions(driver);\n\n\t\t// create object of the Action class\n\t\tAction action = (Action) move.dragAndDropBy(slider, 100, 0).build();\n\t\t// perform the action\n\t\taction.perform();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// create object of the Action class\n\t\tAction action1 = (Action) move.dragAndDropBy(slider, 50, 0).build();\n\t\t// perform the action\n\t\taction1.perform();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class IT_RunImpactedTestscript {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testIT_RunImpactedTestscript(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[4]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[2]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[2]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[5]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[3]/button[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[2]/div[1]/h4/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(]\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[2]/div[2]/div/table/tbody/tr[2]/td[2]/input\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[2]/div[2]/div/table/tbody/tr[1]/th/input\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[2]/div[2]/div/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class IT_SearchCommit {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testIT_SearchCommit(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find element with id = \"usernameOrEmail\" by id and populate it with value = \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[2]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[2]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[2]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[3]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[3]/button[1]\")).click();\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[1]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[1]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[4]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[2]/div/span/i\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/form/div/div[2]/div/div/ul/li[1]/div/table/tbody/tr[2]/td[5]/button/span\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"impacted-scripts\\\"]/section/div/form/div/div[3]/button[1]\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[1]/div[1]/h4/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[1]/div[2]/div/div/ul/li[5]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[1]/div[2]/div/div/ul/li[4]/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div/div[2]/div/uib-accordion/div/div[2]/div[1]/h4/a\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage carSystemWebForms452;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class LoginAdmin {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\n\t\t// set the wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li/a\")).click();\n\n\t\t// find an element by xpath and set its value to \"Admin\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[1]/div/input\")).sendKeys(\"Admin\");\n\n\t\t// find an element by xpath and set its value to \"123456\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[2]/div/input\")).sendKeys(\"123456\");\n\n\t\t// find an element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[4]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// assert that the text in element found usig xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li[5]/a\")).getText(),\t\"Hello, Admin !\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class LoginTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void login() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find element with id = \"username\" by id and populate it with value = \"testuser@123\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find element with id = \"password\" by id and populate it with value = \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate element with class 'btn-primary' using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate element with class 'header-profile-image' using cssSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\t\t\n\t\t// locate element with link text 'Signout' and click on it\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class Login_Admin {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testLogin_Admin(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t//find element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t//find element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t//find element with id = \"usernameOrEmail\" by id and populate it with value \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t//find element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t//find element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t//find element with id = \"password\" by id and populate it with value \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// assert that the text in the element with link text \"superadmin\" is equal to \"superadmin\"\n\t\tassertEquals(driver.findElement(By.linkText(\"superadmin\")).getText(), \"superadmin\");\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\n\" + \"  var xhr = new XMLHttpRequest();\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", '/ml/coverage/client', true);\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\n\" + \"  }\\n\" + \"\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage carSystemWebForms452;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class LogOffAdmin {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li/a\")).click();\n\n\t\t// find an element by using the given xpath and fill it with value \"Admin\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[1]/div/input\")).sendKeys(\"Admin\");\n\n\t\t// find an element by using the given xpath and set it to \"123456\"\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[2]/div/input\")).sendKeys(\"123456\");\n\n\t\t// find an element by using the given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[4]/div/div/section/div/div[4]/div/input\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/form/div[3]/div/div[2]/ul[2]/li[6]/a\")).click();\n\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\n\t\t// assert that the text in the element found using the given xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/form/div[4]/div/h2/strong\")).getText(), \"ASP.NET Web Forms Cars system application.\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage dancingGoatCoreMVC31;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\nimport cookie.Utility;\n\npublic class NavigateTabs {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[2]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[3]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[4]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[5]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[6]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[7]/a\")).click();\n\n\t\t// assert that the text in the element found using the given xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[1]/div/div/div[1]/div/h3\")).getText(), \"Wholesale Partner Program\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class OT_Compare {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// create options for Chrome WebDriver\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// Set path of chrome web driver in system properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// add options for the browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize the driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavaScriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testOT_Compare(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// locate a web element with id \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\t\t\n\t\t// locate a web element with id \"usernameOrEmail\" and fill it with text \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\t\t\n\t\t// locate web element with id \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// locate web element with id \"password\" and clear its existing contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// locate web element with id \"password\" and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"optimization-scripts\\\"]/div[3]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text = \"Cycle 5\"\n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// create an object of Actions class\n\t\tActions actions = new Actions(driver);\n\n\t\t// find an element by cssSelector and store it in a variable\n\t\tWebElement element = driver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(3)\"));\n\n\t\t// execute javascript function to scroll\n\t\tjs.executeScript(\"arguments[0].scrollIntoView()\", element);\n\n\t\t// find an element by cssSelector and store it in a variable\n\t\tWebElement elementLocator = driver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(3)\"));\n\n\t\t// right click on the element\n\t\tactions.contextClick(elementLocator).perform();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/div/ul/li\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by cssSelector and store it in a variable\n\t\tWebElement elementLocator2 = driver.findElement(By.cssSelector(\"#c > svg > g > circle:nth-child(5)\"));\n\n\t\t// right click on the element\n\t\tactions.contextClick(elementLocator2).perform();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/div/ul/li\")).click();\n\n\t\t// assert that the text of element located using xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"comparepopup-table\\\"]/div[2]/div[1]/div[1]/div/div[2]\")).getText(), \"Test case : 19\");\n\n\t\t// assert that the text of element located using xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"comparepopup-table\\\"]/div[2]/div[1]/div[2]/div/div[2]\")).getText(), \"Testcase : 8\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"comparepopup-table\\\"]/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n// create options for Chrome WebDriver\n\n// Set path of chrome web driver in system properties\nSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n// add options for the browser\noptions.addArguments(\"start-maximized\");\n\n// initialize the driver with options\ndriver = new ChromeDriver(options);\n\n// set the timeout duration\ndriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n// instantiate the JavascriptExecutor variable\njs = (JavascriptExecutor) driver;\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\n* Java Selenium program to :\n* 1. create a web driver, \n* 2. navigate to the URL, \n* 3. locate the text fields and fill them,\n* 4. login using the login button\n* 5. close the browser\n*/\n//Import Related Packages\nimport org.openqa.selenium.By;\t\t\nimport org.openqa.selenium.WebDriver;\t\t\nimport org.openqa.selenium.chrome.ChromeDriver;\t\t\nimport org.openqa.selenium.*;\t\t\n\npublic class Form {\t\t\t\t\n    public static void main(String[] args) {\t\t\t\t\t\t\t\t\t\n    \t\n\t\t/* Create Web driver*/\n        //Setting system properties of ChromeDriver\t\t\n        System.setProperty(\"webdriver.chrome.driver\",\"G:\\\\chromedriver.exe\");\n\t\t\n        //Creating an object of ChromeDriver\t\t\t\t\t\n        WebDriver driver = new ChromeDriver();\t\t\t\t\t\n\t\t\n        //launching the specified URL\t\t\n        String baseUrl = \"http://demo.guru99.com/test/login.html\";\n\t\t\n        //opens URL on web page.\n        driver.get(baseUrl);\t\t\t\t\t\n\t\t\n        // Get the WebElement having id = \"email\"\n        WebElement email = driver.findElement(By.id(\"email\"));\t\t\t\t\t\t\t\n\n        // Get the WebElement having id = \"passwd\"\n        WebElement password = driver.findElement(By.name(\"passwd\"));\t\t\t\t\t\t\t\n\n\t\t// populate the editable field\n        email.sendKeys(\"abcd@gmail.com\");\t\t\t\t\t\n\t\t\n\t\t// populate the editable field\n        password.sendKeys(\"abcdefghlkjl\");\t\t\t\t\t\n\t\t\n        System.out.println(\"Text Field Set\");\t\t\t\t\t\n         \n        // Deleting values in the text box\t\t\n        email.clear();\t\t\t\n        password.clear();\t\n\t\t\n        System.out.println(\"Text Field Cleared\");\t\t\t\t\t\n\n        // Find the submit button having id = \"SubmitLogin\"\t\t\n        WebElement login = driver.findElement(By.id(\"SubmitLogin\"));\t\t\t\t\t\t\t\n                    \t\t\n        // populate the editable fields\t\t\n        email.sendKeys(\"abcd@gmail.com\");\n\t\t\n\t\t// populate the editable fields\t\t\n        password.sendKeys(\"abcdefghlkjl\");\t\n\n\t\t// login by clicking on the web element\n        login.click();\t\n\t\t\n        System.out.println(\"Login Done with Click\");\t\t\t\t\t\n        \t\t\n        //using submit method to submit the form. Submit used on password field\t\n\t\t\n\t\t// navigate to the URL specified\n        driver.get(baseUrl);\n\t\t\n\t\t// find element witj id = \"email\" by id and set its value to \"abcd@gmail.com\"\n        driver.findElement(By.id(\"email\")).sendKeys(\"abcd@gmail.com\");\t\t\t\t\t\t\t\n\t\t\n\t\t// find element witj id = \"passwd\" by id and set its value to \"abcdefghlkjl\"\n        driver.findElement(By.name(\"passwd\")).sendKeys(\"abcdefghlkjl\");\t\t\t\t\n\n\t\t// find element witj id = \"SubmitLogin\" by id and submit it\n        driver.findElement(By.id(\"SubmitLogin\")).submit();\t\n\t\t\n        System.out.println(\"Login Done with Submit\");\t\t\t\t\t\n\t\t\n         // clossing the driver\n\t\tdriver.close();\t\t\n        \t\t\n    }\t\t\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Import Packages for Java Selenium\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementById {\n\n     public static void main(String[] args) {\n\t\t \n\t//Setting system properties of ChromeDriver\t\n\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\t\n\t\n\t//Creating an object of ChromeDriver\t\n\tWebDriver driver = new ChromeDriver();\n\t\n\t//opens URL on web page.\t\n\tdriver.get(\"https://demoqa.com/text-box/\");\n    \n\t// find an element with id = \"submit\" by id\n    WebElement element = driver.findElement(By.id(\"submit\"));\n\t\t\n\t\t\n\tif(element != null) {\n\t    System.out.println(\"Element found by ID\");\n\t}\n   }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium program for Finding input text by name \nWebElement val = driver.findElement(By.name(\"AccToken\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium program for Finding input text by name and storing its text in s variable\nString val = driver.findElement(By.name(\"AccToken\")).getText();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/*\nJava Selenium program that creates a web driver, navigates to specified URL and verify if an element with given name exists\n\n*/\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByName {\n     public static void main(String[] args) {\n        //Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\n        \n\t\t//Creating an object of ChromeDriver\t\t\n\t\tWebDriver driver = new ChromeDriver();\n        \n\t\t//opens URL on web page.\t\n\t\tdriver.get(\"https://demoqa.com/automation-practice-form\");\n        \n\t\t// find input text having name = \"gender\" by name and store it in a variable\n\t\tWebElement element = driver.findElement(By.name(\"gender\"));\n\t   \n\t\t// check if the element exists\n\t\tif(element != null) {\n\t\t\tSystem.out.println(\"Element found by Name\");\n\t\t}\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium program for Finding input text by name\n WebElement element = driver.findElement(By.name(\"gender\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport java.util.concurrent.TimeUnit;\n \nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n \npublic class ClassNameLocator {\n \n    public static void main(String[] args) {\n\t\t\n        //Setting system properties of ChromeDriver\n        System.setProperty(\"webdriver.chrome.driver\", \".\\\\ChromeDriver\\\\chromedriver.exe\");\n        //Creating an object of ChromeDriver\t\n        WebDriver driver=new ChromeDriver();\n\t\t\n        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n        \n\t\t// maximize the browser window\n        driver.manage().window().maximize();\n        \n        //Opening the air bnb home page\n        driver.get(\"https://www.airbnb.co.in/\");\n        \n        //Locating location field for the search  form via class name and populating it with text \"Goa\"\n        driver.findElement(By.className(\"_up0kwni\")).sendKeys(\"Goa\", Keys.ENTER);\n \n        //Locating check-in field for the search  form via class name  and clicking on it\n        driver.findElement(By.className(\"_14fdu48d\")).click();\n        \n        //Locating the date 12th June for check-in field and clicking on it\n        driver.findElement(By.className(\"_1wh4xpp1\")).click();\n                \n        //closing the driver\n        driver.quit();       \n    } \n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByClassName {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\t\t\n        \n        //Creating an object of ChromeDriver\t\n\t\tWebDriver driver = new ChromeDriver();\n\n        //opens URL on web page.\n\t\tdriver.get(\"https://demoqa.com/automation-practice-form\");\n\n\t\t// locate the element having class = \"button\" by className and store it in a variable\n\t\tWebElement parentElement = driver.findElement (By.className(\"button\"));\n\t\t\n\t\t// check if the element exists\n\t\tif(parentElement != null) {\n\t\t\tSystem.out.println(\"Element found by ClassName\");\n\t\t}\n\t\t\n\t\tdriver.close();\n\t\t\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium statement for Finding element by className\nWebElement parentElement = driver.findElement (By.className(\"button\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByTagName {\n\n     public static void main(String[] args) {\n          \n\t\t//Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\t\t\n        \n\t\t//Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n        \n\t\t//opens URL on web page.\n\t\tdriver.get(\"https://demoqa.com/automation-practice-form\");\n        \n\t\t// find \"input\" element using its tag name\n\t\tWebElement element = driver.findElement (By.tagName(\"input\"));\n\t\t\n\t\t// verify if the element exists\n\t\tif(element != null) {\n\t\t\tSystem.out.println(\"Element found by tagName\");\n\t\t}\n\t\t\n\t\tdriver.close();\n     }\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium code for Finding input text by tagName\nWebElement element = driver.findElement (By.tagName(\"input\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByCssSelector {\n\t\n\tpublic static void main(String[] args) {\n\t\t        \n\t\t//Setting system properties of ChromeDriver\n\t    System.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\n        \n\t\t//Creating an object of ChromeDriver\t\n\t\tWebDriver driver = new ChromeDriver();\n\n        //opens URL on web page.\n        driver.get(\"https://demoqa.com/automation-practice-form\");\n\n\t\t// find the element by cssSelector and store it in a variable\n\t\tWebElement inputElem = driver.findElement (By.cssSelector(\"input[id = 'firstName']\"));\n\t\t \n\t\t// Verify if the element exists \n\t\tif(inputElem != null) {\n\t\t\tSystem.out.println(\"Element found by cssSelector\");\n\t\t}\n\t\t\n\t\t// close the browser\n\t\tdriver.close();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium code for Finding input text by cssSelector\nWebElement inputElem = driver.findElement (By.cssSelector(\"input[id = 'firstName']\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByXpath {\n\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// opens URL on web page.\n\t\tdriver.get(\"https://demoqa.com/automation-practice-form\");\n\n\t\t// find button using xpath and store it in a variable\n\t\tWebElement buttonSubmit = driver.findElement(By.xpath(\"//button[@id = 'submit']\"));\n\t\t\n\t\t// verify that the element exists\n\t\tif (buttonSubmit != null) {\n\t\t\tSystem.out.println(\"Element found by xpath\");\n\t\t}\n\t\t\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium statement for Finding button by By.xpath\nWebElement buttonSubmit = driver.findElement( By.xpath(\"//button[@id = 'submit']\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage testPackage;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByLinkTextAndPartialLinkText {\n\n\tpublic static void main(String[] args) {\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// opens URL on web page.\n\t\tdriver.get(\"https://demoqa.com/links\");\n\t\t\n\t\t// find element with partial link text = \"HomehY\" and store it in a variable\n\t\tWebElement LinkText = driver.findElement(By.partialLinkText(\"HomehY\"));\n\n\t\t// check if the element exists\n\t\tif (LinkText != null) {\n\t\t\tSystem.out.println(\"Element found by PartialLinkText\");\n\t\t}\n\t\t\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium program for Finding element by partialLinkText\nelement= driver.findElement(By.partialLinkText(\"HomehY\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FindElementByLinkTextAndPartialLinkText {\n\tpublic static void main(String[] args) {\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:/testSelenium/chromedriver.exe\");\n\t\t\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// opens URL on web page.\n\t\tdriver.get(\"https://demoqa.com/links\");\n\t\t\n\t\t// find element having link text = \"Home\" and store it in a variable\n\t\tWebElement element = driver.findElement(By.linkText(\"Home\"));\n\n\t\tif (element != null) {\n\t\t\tSystem.out.println(\"Element found by LinkText\");\n\t\t}\n\t\t\n\t\tdriver.quit();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium statement for Finding element using By.linkText\nWebElement element = driver.findElement(By.linkText(\"Home\"));\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport java.util.Scanner;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class Clear {\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\t// take input from the user and store it in a variable\n\t\tSystem.out.println(\"enter the string which you want to send and then clean\");\n\t\tString input = in.next();\n\t\t\n\t\tSystem.setProperty(\"webdriver.gecko.driver\",\"Path_of_Firefox_Driver\"); // Setting system properties of FirefoxDriver\n\t\t// Creating an object of FireFox\n\t\tWebDriver driver = new FirefoxDriver();\n\t\t\n\t\t// opens URL on web page.\n\t\tdriver.get(\"https://www.google.co.in/?gfe_rd=cr&ei=zQmQU9D3OoyK8QfpxoDQBA&gws_rd=ssl\");\n\t\t\n\t\t// find element with name = \"q\" and store it in a variable\n\t\tWebElement box = driver.findElement(By.name(\"q\"));\n\t\t\n\t\t// set the value of the element to the user's input\n\t\tbox.sendKeys(input);\n\t\t\n\t\tThread.sleep(5000); // simply wait to see that input string has been sent to box\n\n\t\t// this for block is used to clear the input from box\n\t\tbox.sendKeys(Keys.chord(Keys.CONTROL, \"a\"));\n\t\tbox.sendKeys(Keys.BACK_SPACE);\n\t\t\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Java Selenium statement for clear the input Text\ndriver.findElement(By.id(\"Form:asof_input\")).clear();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/**\n* Validate whether the Radio button is selected or not\n*/\n \nBoolean selectState=driver.findElement(By.id(\"radio1\")).isSelected();\n \n//Selecting radio button if it is already not selected\nif(selectState==false)\n{\n   driver.findElement(By.id(\"radio1\")).click();\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n/** \n* Validate whether the Radio button is visible and enabled \n*/\n \nBoolean visibleState = driver.findElement(By.id(\"radio1\")).isDisplayed();\nSystem.out.println(\"The radio button visibility is: \"+visibleState);\n \nif(visibleState)\n{\n    Boolean status =driver.findElement(By.id(\"radio1\")).isEnabled();\n    System.out.println(\"The status of radio button is: \"+status);\n \n    //If radio button is enabled select it\n    if(status)\n    {\n      driver.findElement(By.id(\"radio1\")).click();\n    }\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Select a Radio Button Using XPath When a Unique property is not found\ndriver.findElement(By.xpath(\"//input[@name='gender'][1]\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Select a Radio Button Using XPath In Selenium WebDriver\ndriver.findElement(By.xpath(\"//input[@id='radio2']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Select a Radio Button using CSS Selector Class attribute In Selenium WebDriver\ndriver.findElement(By.cssSelector(\"input.radio-grp2\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Select a Radio Button Using CSS Selector ID attribute In Selenium WebDriver\ndriver.findElement(By.cssSelector(\"input[id='radio3']\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\n//Select a Radio Button in Selenium Webdriver By ID\ndriver.findElement(By.id(\"radio1\")).click();\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.*;\n\npublic class First {\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\",\"C:\\\\chromedriver_win32\\\\chromedriver.exe\");\n\t\t\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// launching the specified URL\n\t\tdriver.get(\"http://demo.guru99.com/test/radio.html\");\n\t\t\n\t\t// Get the WebElement corresponding to tagName\n\t\tWebElement radio1 = driver.findElement(By.tagName(\"vfb-7-1\"));\n\t\t\n\t\t// Get the WebElement corresponding to tagName\n\t\tWebElement radio2 = driver.findElement(By.tagName(\"vfb-7-2\"));\n\n\t\t// Radio Button1 is selected\n\t\tradio1.click();\n\t\tSystem.out.println(\"Radio Button Option 1 Selected\");\n\n\t\t// Radio Button1 is de-selected and Radio Button2 is selected\n\t\tradio2.click();\n\t\tSystem.out.println(\"Radio Button Option 2 Selected\");\n\n\t\t// Selecting CheckBox by using tagName\n\t\tWebElement option1 = driver.findElement(By.tagName(\"vfb-6-0\"));\n\n\t\t// This will Toggle the Check box\n\t\toption1.click();\n\n\t\t// Check whether the Check box is toggled on\n\t\tif (option1.isSelected()) {\n\t\t\tSystem.out.println(\"Checkbox is Toggled On\");\n\n\t\t} else {\n\t\t\tSystem.out.println(\"Checkbox is Toggled Off\");\n\t\t}\n\n\t\t// Selecting Checkbox and using isSelected Method\n\t\tdriver.get(\"http://demo.guru99.com/test/facebook.html\");\n\t\t\n\t\tWebElement chkFBPersist = driver.findElement(By.tagName(\"persist_box\"));\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tchkFBPersist.click();\n\t\t\tSystem.out.println(\"Facebook Persists Checkbox Status is -  \" + chkFBPersist.isSelected());\n\t\t}\n\t\t// Closing the webdriver\n\t\tdriver.close();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class radio {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t// set the path for firefox driver\n\t\tSystem.setProperty(\"webdriver.gecko.driver\", \"C:\\GeckoDriver\\geckodriver.exe\");\n\t\t\n\t\t// Creating an object of FirefoxDriver\n\t\tWebDriver driver = new FirefoxDriver();\n\t\t\n\t\t// setting timeout\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\t\n\t\t// setting the screen size\n\t\tdriver.manage().window().maximize();\n\t\t\n\t\t// launching the specified URL\n\t\tdriver.get(\"file:///E:/Selenium class/Programs/Sonali/bin/project1/form2selenium.html\");\n\t\t\n\t\t// Get the WebElement corresponding to xpath\n\t\tWebElement radio = driver.findElement(By.xpath(\"//input[@id='i-green']\"));\n\t\t// select the element\n\t\tradio.click();\n\n\t\t// Get the WebElement corresponding to xpath\n\t\tWebElement radio2 = driver.findElement(By.xpath(\"//input[@value='Medium']\"));\n\t\t// select the element\n\t\tradio2.click();\n\t\t\n\t\tdriver.quit();\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.*;\n\npublic class First {\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Users\\\\sumitsingh.chauhan\\\\Downloads\\\\chromedriver_win32\\\\chromedriver.exe\");\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// launching the specified URL\n\t\tdriver.get(\"http://demo.guru99.com/test/radio.html\");\n\t\t\n\t\t// Get the WebElement corresponding to cssSalector\n\t\tWebElement radio1 = driver.findElement(By.cssSelector(\"vfb-7-1\"));\n\t\t\n\t\t// Get the WebElement corresponding to cssSalector\n\t\tWebElement radio2 = driver.findElement(By.cssSelector(\"vfb-7-2\"));\n\n\t\t// Radio Button1 is selected\n\t\tradio1.click();\n\t\tSystem.out.println(\"Radio Button Option 1 Selected\");\n\n\t\t// Radio Button1 is de-selected and Radio Button2 is selected\n\t\tradio2.click();\n\t\tSystem.out.println(\"Radio Button Option 2 Selected\");\n\n\t\t// Selecting CheckBox\n\t\tWebElement option1 = driver.findElement(By.cssSelector(\"vfb-6-0\"));\n\n\t\t// This will Toggle the Check box\n\t\toption1.click();\n\n\t\t// Check whether the Check box is toggled on\n\t\tif (option1.isSelected()) {\n\t\t\tSystem.out.println(\"Checkbox is Toggled On\");\n\n\t\t} else {\n\t\t\tSystem.out.println(\"Checkbox is Toggled Off\");\n\t\t}\n\n\t\t// Selecting Checkbox and using isSelected Method\n\t\tdriver.get(\"http://demo.guru99.com/test/facebook.html\");\n\t\t\n\t\tWebElement chkFBPersist = driver.findElement(By.cssSelector(\"persist_box\"));\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tchkFBPersist.click();\n\t\t\tSystem.out.println(\"Facebook Persists Checkbox Status is -  \" + chkFBPersist.isSelected());\n\t\t}\n\t\t\n\t\t// Closing the webdriver\n\t\tdriver.close();\n\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.*;\n\npublic class First {\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\",\"C:\\\\Users\\\\sumitsingh.chauhan\\\\Downloads\\\\chromedriver_win32\\\\chromedriver.exe\");\n\t\t\t\t\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\t\t\n\t\t// launching the specified URL\n\t\tdriver.get(\"http://demo.guru99.com/test/radio.html\");\n\t\t\n\t\t// Get the WebElement corresponding to name\n\t\tWebElement radio1 = driver.findElement(By.name(\"vfb-7-1\"));\n\t\t\n\t\t// Get the WebElement corresponding to name\n\t\tWebElement radio2 = driver.findElement(By.name(\"vfb-7-2\"));\n\n\t\t// Radio Button1 is selected\n\t\tradio1.click();\n\t\t\n\t\tSystem.out.println(\"Radio Button Option 1 Selected\");\n\n\t\t// Radio Button1 is de-selected and Radio Button2 is selected\n\t\tradio2.click();\n\t\t\n\t\tSystem.out.println(\"Radio Button Option 2 Selected\");\n\n\t\t// Selecting CheckBox\n\t\tWebElement option1 = driver.findElement(By.name(\"vfb-6-0\"));\n\n\t\t// This will Toggle the Check box\n\t\toption1.click();\n\n\t\t// Check whether the Check box is toggled on\n\t\tif (option1.isSelected()) {\n\t\t\tSystem.out.println(\"Checkbox is Toggled On\");\n\n\t\t} else {\n\t\t\tSystem.out.println(\"Checkbox is Toggled Off\");\n\t\t}\n\n\t\t// Selecting Checkbox and using isSelected Method\n\t\tdriver.get(\"http://demo.guru99.com/test/facebook.html\");\n\t\t\n\t\tWebElement chkFBPersist = driver.findElement(By.name(\"persist_box\"));\n\t\t\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tchkFBPersist.click();\n\t\t\tSystem.out.println(\"Facebook Persists Checkbox Status is -  \" + chkFBPersist.isSelected());\n\t\t}\n\t\t\n\t\t// Closing the webdriver\n\t\tdriver.close();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.*;\n\npublic class Form {\n\tpublic static void main(String[] args) {\n\n\t\t// Setting system properties of ChromeDriver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"G:\\\\chromedriver.exe\");\n\t\t\n\t\t// Creating an object of ChromeDriver\n\t\tWebDriver driver = new ChromeDriver();\n\n\t\t// launching the specified URL\n\t\tdriver.get(\"http://demo.guru99.com/test/radio.html\");\n\n\t\t// Get the WebElement corresponding to id\n\t\tWebElement radio1 = driver.findElement(By.id(\"vfb-7-1\"));\n\t\tWebElement radio2 = driver.findElement(By.id(\"vfb-7-2\"));\n\n\t\t// Radio Button1 is selected\n\t\tradio1.click();\n\t\tSystem.out.println(\"Radio Button Option 1 Selected\");\n\n\t\t// Radio Button1 is de-selected and Radio Button2 is selected\n\t\tradio2.click();\n\t\tSystem.out.println(\"Radio Button Option 2 Selected\");\n\n\t\t// Selecting CheckBox\n\t\tWebElement option1 = driver.findElement(By.id(\"vfb-6-0\"));\n\n\t\t// This will Toggle the Check box\n\t\toption1.click();\n\n\t\t// Check whether the Check box is toggled on\n\t\tif (option1.isSelected()) {\n\t\t\tSystem.out.println(\"Checkbox is Toggled On\");\n\n\t\t} else {\n\t\t\tSystem.out.println(\"Checkbox is Toggled Off\");\n\t\t}\n\n\t\t// Selecting Checkbox and using isSelected Method\n\t\tdriver.get(\"http://demo.guru99.com/test/facebook.html\");\n\t\tWebElement chkFBPersist = driver.findElement(By.id(\"persist_box\"));\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tchkFBPersist.click();\n\t\t\tSystem.out.println(\"Facebook Persists Checkbox Status is -  \" + chkFBPersist.isSelected());\n\t\t}\n\t\t// Closing the webdriver\n\t\tdriver.close();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class ProcessPredictionViewALMResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// set the path for chrom web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrom driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\t// initialize variable \n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void processPredictionViewResult() throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[3]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\t\t\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class ProcessPredictionViewResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrom web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrom driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\t// initialize variable \n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void processPredictionViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSSSelector using class \"btn-primary\" and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[3]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll using JavascriptExecutor\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage dancingGoatCoreMVC31;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\nimport cookie.Utility;\n\npublic class ProductCatalogCheck {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/header/div[1]/div/nav/ul/li[2]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div/nav/div/ul/li[2]/a\")).click();\n\n\t\t// assert that the text in the element located using specified xpath is equal to the given text\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[1]/div/div/div/div/div/div[2]/article/a/h1\")).getText(),\"Hario V60\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t\tString verificationErrorString = verificationErrors.toString();\n\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SC_ExportPdf {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrom web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSC_ExportPdf(String url) throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id  and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id  and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"sidebar\\\"]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner1\\\"]/div[1]/div/div/button\")).click();\n\n\t\t// Click on the element with link text having value \"Cycle 5\"\n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n    \t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SC_PrevCycle {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSC_PrevCycle(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and set its value to \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on ir\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"sidebar\\\"]/div/ul/li[2]/a\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner1\\\"]/div[1]/div/div/button\")).click();\n\n\t\t// Click on the element with link text having value \"Cycle 4\" \n\t\tdriver.findElement(By.linkText(\"Cycle 4\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myTab\\\"]/li[1]/a\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner3\\\"]/div[2]/div/div/div/button\")).click();\n\n\t\t// find the element with given link text and clik on it\n\t\tdriver.findElement(By.linkText(\"Suite.Test.seleniumpack.AddingOneProductNotifyMe.testAddingOneProductNotifyMe\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SC_Report {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver witj options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSC_Report(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and set its value to \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"sidebar\\\"]/div/ul/li[2]/a\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner1\\\"]/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text having value \"Cycle 5\"\n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myTab\\\"]/li[2]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find an element by css selector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#myTab > li.active > a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find an element by css selector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#report > table > tbody:nth-child(3) > tr:nth-child(1) > td.ng-binding.ng-scope\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by css selector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#info00 > table > tbody\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and assert that the value of its text is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"\t//*[@id=\\\"imageModal\\\"]/div/div/div[6]/p[2]\")).getText(),\"XPath: BODY/DIV[3]/DIV[1]/A[0]\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"imageModal\\\"]/div/div/div[6]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath  and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"report\\\"]/table/tbody[2]/tr[1]/td[3]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath  and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[6]/div/div[2]/table/tbody[2]/tr[2]/td[3]/div/table/tbody/tr[2]/td\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and store it in a varaible\n\t\tWebElement element = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[2]/div/div/div[2]/canvas\"));\n\n\t\t// create an object for Actions class\n\t\tActions actions = new Actions(driver);\n\t\t\n\t\t// perform the action\n\t\tactions.moveToElement(element).click().perform();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"imageModal\\\"]/div/div/div[6]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SC_ViewScreenChanges {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSC_ViewScreenChanges(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id set its value to \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with text \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"sidebar\\\"]/div/ul/li[2]/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner1\\\"]/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text having value \"Cycle 5\"\n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"inner3\\\"]/div[2]/div/div/div/button\")).click();\n\n\t\tdriver.findElement(By.linkText(\"Suite.Test.seleniumpack.AddingOneProduct.addingToShoppingCart\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"myTab\\\"]/li[1]/a\")).click();\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[5]/div[1]/div/div/h5/i[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[5]/div[1]/div/div/h5/i[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[5]/div[1]/div/div/h5/i[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[5]/div[1]/div/div/h5/i[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div[5]/div[1]/div/div/h5/i[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class SearchinputFileRequestTest {\n\t\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void searchinputFileRequest() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element using CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div/div/div[5]/div/input\")).click();\n\n\t\t// find an element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div/div/div[5]/div/input\")).sendKeys(\"tso_input\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div/div/div[5]/div/span/button/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element with given xpath and assert that its text is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div/div[2]/div[2]/div/ul/li/div/div/span\")).getText(), is(\"Name : tso_input\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate and element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div/fieldset/div/div/a[2]/div/div/div\")).click();\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate and element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div/div/div/input\")).click();\n\n\t\t// locate and element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div/div/div/input\")).sendKeys(\"Request_TSO\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div/div/div/span/button/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find an element by xpath and assert that its text is same as the given value\n\t\tassertThat(driver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).getText(), is(\"Request_TSO\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class SignUpTest {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void signUp() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// click on the element with link text \"New Users\"\n\t\tdriver.findElement(By.linkText(\"New Users\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"firstName\" by id and click on it\n\t\tdriver.findElement(By.id(\"firstName\")).click();\n\n\t\t// find web element with id = \"firstName\" by id and populate it with value \"test01\"\n\t\tdriver.findElement(By.id(\"firstName\")).sendKeys(\"test01\");\n\n\t\t// find web element with id = \"lastName\" by id and click on it\n\t\tdriver.findElement(By.id(\"lastName\")).click();\n\n\t\t// find web element with id = \"lastName\" by id and populate it with value \"user01\"\n\t\tdriver.findElement(By.id(\"lastName\")).sendKeys(\"user01\");\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser01\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser01\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t{\n\t\t\t// find the dropdown with id = \"project\" by id\n\t\t\tWebElement dropdown = driver.findElement(By.id(\"project\"));\n\n\t\t\t// select the option from dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//option[. = 'trialProject']\")).click();\n\n\t\t}\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class WriteToALMTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void writeToALM() throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"pdf\\\"]/div[1]/div[1]/div/span[2]/button[3]\")).click();\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'pdf\\']/div/div/div/span[2]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[2]/div/div/div/div[3]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element having name \"almpassword\" by name and click on it\n\t\tdriver.findElement(By.name(\"almpassword\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate an element having name \"almpassword\" by name fill it with value \"sysdb@123\"\n\t\tdriver.findElement(By.name(\"almpassword\")).sendKeys(\"sysdb@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[2]/div/div[2]/form/div/div/button\")).click();\n\n\t\t// wait for 8000 ms\n\t\tThread.sleep(8000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[2]/div/div[2]/form/div/div/div[2]/button/i\")).click();\n\n\t\t// wait for 8000 ms\n\t\tThread.sleep(8000);\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"almtestfolderidandpath\")).click();\n\n\t\t// create a Select object with element located using name \"almtestfolderidandpath\" and select the option with visible text '/Subject/Sample/'\n\t\tnew Select(driver.findElement(By.name(\"almtestfolderidandpath\"))).selectByVisibleText(\"/Subject/Sample/\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element having id = \"almtestfolderidandpath\" by id and click on it\n\t\tdriver.findElement(By.id(\"almtestfolderidandpath\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[2]/div/div[2]/form/div/div[2]/div[3]/button\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find an element by xpath and assert that its text is same as the given text\n\t\tassertThat(driver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[2]/div/div[2]/form/div[2]/strong\")).getText(), is(\"ALM data written succesfully\"));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id=\\'optionsmenu\\']/div/div/div[3]/button\")).click();\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t\t\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class ViewAnExistingProject {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testViewAnExistingProject(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and set its value to \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and set its value to \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// click on the element with link text as \"superadmin user\" \n\t\tdriver.findElement(By.linkText(\"superadmin user\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[1]/a\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"accordion\\\"]/div[2]/div[1]/h4/a\")).click();\n\n\t\t// click on the element with link text as \"View Projects\" \n\t\tdriver.findElement(By.linkText(\"View Projects\")).click();\n\n\t\t// create a Select object with element located using id 'project' and select the option with visible text 'Konakart'\n\t\tnew Select(driver.findElement(By.id(\"project\"))).selectByVisibleText(\"Konakart\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/section/form/fieldset/div[2]/button\")).click();\n\n\t\t// find the elements using xpath and tagName and store its size in a variable\n\t\tint lastRowcount = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section[2]/table/tbody\")).findElements(By.tagName(\"tr\")).size();\n\n\t\t// find an element using xpath and store it in a variable\n\t\tWebElement Lastrow = driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/section/div[2]/div/div/section[2]/table/tbody/tr[1]\"));\n\n\t\t// print the text of the element\n\t\tSystem.out.println(Lastrow.getText());\n\n\t\t// assert that the text in the element is equal to the given text\n\t\tassertEquals(Lastrow.getText(), \"Project Name Konakart\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class UserSignUp {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testUserSignUp(String url) throws Exception {\n\t\t\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find an element using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/div[1]/input[2]\")).click();\n\n\t\t// find web element with id = \"firstName\" by id and click on it\n\t\tdriver.findElement(By.id(\"firstName\")).click();\n\n\t\t// find web element with id = \"firstName\" by id and clear it\n\t\tdriver.findElement(By.id(\"firstName\")).clear();\n\n\t\t// find web element with id = \"firstName\" by id and populate it with value \"test\"\n\t\tdriver.findElement(By.id(\"firstName\")).sendKeys(\"test\");\n\n\t\t// find web element with id = \"lastName\" by id and click on it\n\t\tdriver.findElement(By.id(\"lastName\")).click();\n\n\t\t// find web element with id = \"lastName\" by id and clear it\n\t\tdriver.findElement(By.id(\"lastName\")).clear();\n\n\t\t// find web element with id = \"lastName\" by id and populate it with value \"user\"\n\t\tdriver.findElement(By.id(\"lastName\")).sendKeys(\"user\");\n\n\t\t// find web element with id = \"email\" by id and click on it\n\t\tdriver.findElement(By.id(\"email\")).click();\n\n\t\t// find web element with id = \"email\" by id and clear it\n\t\tdriver.findElement(By.id(\"email\")).clear();\n\n\t\t// find web element with id = \"email\" by id and populate it with value \"testuser@gmail.com\"\n\t\tdriver.findElement(By.id(\"email\")).sendKeys(\"testuser@gmail.com\");\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and clear it\n\t\tdriver.findElement(By.id(\"username\")).clear();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[2]/fieldset/div/div[7]/button\")).click();\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\t\t\t\t\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class UserAdminAccess {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testUserAdminAccess(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and set its value to \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// click on the element with link text as \"superadmin user\" \n\t\tdriver.findElement(By.linkText(\"superadmin user\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[2]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"testuseradmin\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"collapse1\\\"]/div[3]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// assert that the text of element located using xpath is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div/div\")).getText(),\"Assigned roles to users Successfully!\");\n\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class UploadsTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void uploads() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"uploadname\" by id and click on it\n\t\tdriver.findElement(By.id(\"uploadname\")).click();\n\n\t\t// find web element with id = \"uploadname\" by id and populate it with value \"tso_input\"\n\t\tdriver.findElement(By.id(\"uploadname\")).sendKeys(\"tso_input\");\n\n\t\t// find web element with name = \"fileselection\" by name and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// find web element with id = \"my-file-selector\" by id and populate it with value with given value\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Test Suite Optimization\\\\Test Cases_toOptimize.csv\");\n\n\t\t// find web element with id = \"Description\" by id and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// find web element with id = \"Description\" by id and populate it with text \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"uploadname\" by id and click on it\n\t\tdriver.findElement(By.id(\"uploadname\")).click();\n\n\t\t// find web element with id = \"uploadname\" by id and populate it with text \"missingtc_req_input\"\n\t\tdriver.findElement(By.id(\"uploadname\")).sendKeys(\"missingtc_req_input\");\n\n\t\t// find web element with name = \"fileselection\" by name and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// find web element with id = \"my-file-selector\" by id and populate it with given text\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Missing Test Cases\\\\MTC_Requirements.csv\");\n\n\t\t// find web element with id = \"Description\" by id and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// find web element with id = \"Description\" by id and populate it with text \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).click();\n\n\t\t// find element by xpath and set its value to \"missingtc_tc_input\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).sendKeys(\"missingtc_tc_input\");\n\n\t\t// find element with name = \"fileselection\" by name and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// locate web element with id =\"my-file-selector\" and populate it with given text\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Missing Test Cases\\\\MTC_TestCases.csv\");\n\n\t\t// locate web element using the value of id as \"Description\" and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// locate web element using the value of id as \"Description\" and set its value to \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).click();\n\n\t\t// find element with given xpath and set it to \"processpred_input\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).sendKeys(\"processpred_input\");\n\n\t\t// find element with given name = \"fileselection\" and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// locate web element with id = \"my-file-selector\" and populate it with given value\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Process Prediction\\\\Release Information.csv\");\n\n\t\t// locate web element with id = \"Description\" and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// locate web element with id = \"Description\" and populate it with value \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// execute javascript function\n\t\t// js.executeScript(\"window.scrollTo(0,321.81817626953125)\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).click();\n\n\t\t// locate web element with given xpath and set it to \"processpred_classifier_input\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).sendKeys(\"processpred_classifier_input\");\n\n\t\t// locate web element with name = \"fileselection\" and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// locate web element using id = \"my-file-selector\" and populate it\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Process Prediction\\\\telephone_dataset.csv\");\n\n\t\t// locate web element using id = \"Description\" and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// locate web element using id = \"Description\" and populate it with value \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element by CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".uploadSpan2\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).click();\n\n\t\t// locate web element with given xpath and set it to \"dataanalytics_input\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div/div[1]/div[3]/div/form/div[2]/div[1]/input\")).sendKeys(\"dataanalytics_input\");\n\n\t\t// locate web element with name = \"fileselection\" and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// locate web element using id = \"my-file-selector\" and populate it with given value\n\t\tdriver.findElement(By.id(\"my-file-selector\")).sendKeys(\"C:\\\\Users\\\\riya.rajeev\\\\Desktop\\\\Input\\\\Data Analytics\\\\Defect Analysis_input.csv\");\n\n\t\t// locate web element using id = \"Description\" and click on it\n\t\tdriver.findElement(By.id(\"Description\")).click();\n\n\t\t// locate web element using id = \"Description\" and populate it with value \"Uploading input\"\n\t\tdriver.findElement(By.id(\"Description\")).sendKeys(\"Uploading input\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[2]/div/div/div[3]/div/form/div[4]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\t\t\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class TSOViewResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void tSOViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .col-md-10\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t//scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\"svg\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class TSOViewALMResultTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void tSOViewResult() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// find element with class \"btn-primary\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .col-md-10\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tscroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class TSOSearchOptimizeAddNoteTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void tSOSearchOptimizeAddNote() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1382, 744));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"btn-primary\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .tile-default\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div[2]/div[2]/div[2]/div/ul/li/div/div/a\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"MLbody\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".MLbody\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"dataset\" by id and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"dataset\" by id and populate it with value \"14\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"14\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".node:nth-child(66)\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"form-control\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".form-control\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"form-control\" using CSSSelector and set it to \"Adding Notes\"\n\t\tdriver.findElement(By.cssSelector(\".form-control\")).sendKeys(\"Adding Notes\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"btn-info\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-info\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"glyphicon-trash\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".glyphicon-trash\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tdriver.findElement(By.cssSelector(\"td > .ng-pristine\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tdriver.findElement(By.cssSelector(\".btn-success\")).click();\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,0)\");\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[2]/div[1]/div[1]/div/span[2]/button[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with name = \"fileselection\" and click on it\n\t\tdriver.findElement(By.name(\"fileselection\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(1) > .btn\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".modal-footer > .btn-primary\")).click();\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"pdf\\\"]/div[1]/div[1]/div/span[2]/button[3]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class TSORequestCreationTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void tSORequestCreation() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http://10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".ng-scope:nth-child(2) .col-md-4:nth-child(1) .col-md-10\")).click();\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"name\" by id and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// find web element with id = \"name\" by id and populate it with value \"Request_TSO\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_TSO\");\n\n\t\t// find web element with id = \"dataset\" by id and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// find web element with id = \"dataset\" by id and populate it with value \"tso_input\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"tso_input\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div/div/form/div[3]/select\")).click();\n\n\t\t{\n\t\t\t// find the dropdown using xpath and store it in a variable\n\t\t\tWebElement dropdown = driver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div/div/form/div[3]/select\"));\n\n\t\t\t// select the option of dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//option[. = 'Scenario']\")).click();\n\n\t\t}\n\t\t{\n\t\t\t// find the dropdown using xpath and store it in a variable\n\t\t\tWebElement dropdown = driver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div/div/form/div[3]/select\"));\n\n\t\t\t// select the option of dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//option[. = 'Steps']\")).click();\n\n\t\t}\n\t\t{\n\t\t\t// find the dropdown using xpath and store it in a variable\n\t\t\tWebElement dropdown = driver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div/div/form/div[3]/select\"));\n\t\t\t\n\t\t\t// select the option of dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//option[. = 'Expected_result']\")).click();\n\n\t\t}\n\t\t\n\t\t// locate web element with name = \"indexcoloumn\" and click on it\n\t\tdriver.findElement(By.name(\"indexcoloumn\")).click();\n\n\t\t// locate web element with name = \"indexcoloumn\" and set it to \"ID\"\n\t\tdriver.findElement(By.name(\"indexcoloumn\")).sendKeys(\"ID\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"fa-refresh\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage panditTestcases;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.core.IsNot.not;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.Keys;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class TSOALMRequestTest {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\tprivate Map<String, Object> vars;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@Before\n\tpublic void setUp() {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver\n\t\tdriver = new ChromeDriver();\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t\tvars = new HashMap<String, Object>();\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n\t@Test\n\tpublic void tSOALMRequest() throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(\"http:\t//10.217.10.245:3001/ml/authentication/signin\");\n\n\t\t// resize the window\n\t\tdriver.manage().window().setSize(new Dimension(1364, 726));\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find web element with id = \"username\" by id and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\n\t\t// find web element with id = \"username\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element by CSS Selector and click on it\n\t\tdriver.findElement(By.cssSelector(\".btn-primary\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[1]/fieldset/div/div[1]/a[2]/div/div[1]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div[2]/div[2]/div[1]/div[2]/input\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with id = \"name\" and click on it\n\t\tdriver.findElement(By.id(\"name\")).click();\n\n\t\t// locate web element with id = \"name\" and set its value to \"Request_TSO_ALM\"\n\t\tdriver.findElement(By.id(\"name\")).sendKeys(\"Request_TSO_ALM\");\n\n\t\t// locate web element with id = \"dataset\" and click on it\n\t\tdriver.findElement(By.id(\"dataset\")).click();\n\n\t\t// locate web element with id = \"dataset\" and set its value to \"ALM_Input\"\n\t\tdriver.findElement(By.id(\"dataset\")).sendKeys(\"ALM_Input\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//body[@id=\\'wrapper\\']/div[2]/div/div[3]/div/div/form/div[3]/select\")).click();\n\n\t\t{\n\t\t\t// locate dropdown using name = \"coloumn\" and click on it\n\t\t\tWebElement dropdown = driver.findElement(By.name(\"coloumn\"));\n\n\t\t\t// selecting the option for dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div/div/form/div[3]/select/option[10]\")).click();\n\n\t\t}\n\t\t{\n\t\t\t// locate dropdown using name = \"coloumn\" and click on it\n\t\t\tWebElement dropdown = driver.findElement(By.name(\"coloumn\"));\n\n\t\t\t// selecting the option for dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div/div/form/div[3]/select/option[13]\")).click();\n\n\t\t}\n\t\t{\n\t\t\t// locate dropdown using name = \"coloumn\" and click on it\n\t\t\tWebElement dropdown = driver.findElement(By.name(\"coloumn\"));\n\n\t\t\t// selecting the option for dropdown using xpath\n\t\t\tdropdown.findElement(By.xpath(\"//*[@id=\\\"wrapper\\\"]/div[2]/div/div[3]/div/div/form/div[3]/select/option[23]\")).click();\n\n\t\t}\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with name = \"indexcoloumn\" and click on it\n\t\tdriver.findElement(By.name(\"indexcoloumn\")).click();\n\n\t\t// locate web element with name = \"indexcoloumn\" and set its value to \"id\"\n\t\tdriver.findElement(By.name(\"indexcoloumn\")).sendKeys(\"id\");\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".form-group > .btn\")).click();\n\n\t\t// wait for 8000 ms\n\t\tThread.sleep(8000);\n\n\t\t// scroll\n\t\tjs.executeScript(\"window.scrollTo(0,550.9090576171875)\");\n\n\t\t// wait for 8000 ms\n\t\tThread.sleep(8000);\n\n\t\t// find element with class \"fa-refresh\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".fa-refresh\")).click();\n\t\t\n\t\t// wait for 8000 ms\n\t\tThread.sleep(8000);\n\n\t\t// find element with class \"header-profile-image\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\".header-profile-image\")).click();\n\n\t\t// click on the element with link text = \"Signout\"\n\t\tdriver.findElement(By.linkText(\"Signout\")).click();\n\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_SearchBar {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_SearchBar(String url) throws Exception {\n\t\t\n\t\t// go to the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"testcase-coverage\\\"]/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\" \n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\")).click();\n\n\t\t// create a Select object with element located using xpath and select the option with visible text 'Script'\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\"))).selectByVisibleText(\"Script\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).click();\n\n\t\t// locate web element with given xpath and clear its contents\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).clear();\n\n\t\t// locate web element with given xpath and set it to the given value\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).sendKeys(\"Suite.Test.seleniumpack.SortBy.testSortBy\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div[2]/div[2]/div[2]/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\")).click();\n\n\t\t// create a Select object with element located using xpath and select the option with visible text 'URL'\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\"))).selectByVisibleText(\"URL\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).click();\n\n\t\t// locate web element with given xpath and clear its contents\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).clear();\n\n\t\t// locate web element with given xpath and set it to the given value\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).sendKeys(\"http://10.217.10.245:8781/konakart/Welcome.action\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-results\\\"]/div[1]/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[1]/div[2]/i[1]\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\")).click();\n\n\t\t// create a Select object with element located using given xpath and select the option with visible text 'Name'\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\"))).selectByVisibleText(\"Name\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).click();\n\n\t\t// locate web element with given xpath and clear its contents\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).clear();\n\n\t\t// locate web element with given xpath and set it to \"advanced\"\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).sendKeys(\"advanced\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div[2]/div[2]/div[3]/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\n\npublic class TC_Search {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_Search(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\")).click();\n\n\t\t// create a Select object with element located using id and select the option with visible text 'Script'\n\t\tnew Select(driver.findElement(By.id(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\"))).selectByVisibleText(\"Script\");\n\n\t\t// find web element with id = \"search-input\" by id click on it\n\t\tdriver.findElement(By.id(\"search-input\")).click();\n\n\t\t// find web element with id = \"search-input\" by id and clear its contents\n\t\tdriver.findElement(By.id(\"search-input\")).clear();\n\n\t\t// find web element with id = \"search-input\" by id and populate it with value \"Suite\"\n\t\tdriver.findElement(By.id(\"search-input\")).sendKeys(\"Suite\");\n\n\t\t// assert that the text of element located using xpath is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"search-match\\\"]\")).getText(), \"19 matches\");\n\n\t\t// find web element with id = \"search-input\" by id click on it\n\t\tdriver.findElement(By.id(\"search-input\")).click();\n\n\t\t// find web element with id = \"search-input\" by id and clear its contents\n\t\tdriver.findElement(By.id(\"search-input\")).clear();\n\n\t\t// find web element with id = \"search-input\" by id and populate it with given value\n\t\tdriver.findElement(By.id(\"search-input\")).sendKeys(\"Suite.Test.seleniumpack.AdvancedSearch.testAdvancedSearch\");\n\n\t\t// assert that the text of element located using xpath is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"//*[@id=\\\"search-match\\\"]\")).getText(), \"1 matches\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-results\\\"]/div[2]/div\")).click();\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_Refresh {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_Refresh(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"testcase-coverage\\\"]/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\" \n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\")).click();\n\n\t\t// create a Select object with element located using given xpath and select the option with visible text 'Script'\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div/div/div[2]/select\"))).selectByVisibleText(\"Script\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).click();\n\n\t\t// locate web element with given xpath and clear its contents\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).clear();\n\n\t\t// locate web element with given xpath and set its value to given value\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-input\\\"]/input\")).sendKeys(\"Suite.Test.seleniumpack.SortBy.testSortBy\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[3]/div/div[2]/div[2]/div[2]/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[1]/div[2]/i[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_PrevCycle {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_PrevCycle(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// click on the element with link text as \"Cycle 3\" \n\t\tdriver.findElement(By.linkText(\"Cycle 3\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// find element with class \"MLbody\" using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#graph > svg > g > g.nodes > g:nth-child(28) > circle\")).click();\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[4]/div/div[6]/img\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate a span using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"graph-modal\\\"]/span/i\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" +\n                \"  var xhr = new XMLHttpRequest();\\r\\n\" +\n                \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\" +\n                \"//Send the proper header information along with the request\\r\\n\" +\n                \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\" +\n                \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" +\n                \"  }\");js.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_Node {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_Node(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"testcase-coverage\\\"]/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\" \n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// find element using CSSSelector and click on it\n\t\tdriver.findElement(By.cssSelector(\"#graph > svg > g > g.nodes > g:nth-child(24) > circle\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[4]/div/div[6]/img\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[4]/div/div[5]/span/i\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"node-source\\\"]/div/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"node-targets\\\"]/div/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"node-scripts\\\"]/div[1]/div\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"node-scripts\\\"]/div[2]/div\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_FIndPath {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_FIndPath(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"testcase-coverage\\\"]/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\" \n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[1]/div[2]/img[1]\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[1]/div/div/div[1]/div/select\")).click();\n\n\t\t// create a Select object with element located using xpath and select the option with visible text \"/konakart/Welcome.action\"\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[1]/div/div/div[1]/div/select\"))).selectByVisibleText(\"/konakart/Welcome.action\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[1]/div/div/div[2]/div/select\")).click();\n\n\t\t// create a Select object with element located using xpath and select the option with visible text \"/konakart/CheckoutConfirmationSubmit.action\"\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[1]/div/div/div[2]/div/select\"))).selectByVisibleText(\"/konakart/CheckoutConfirmationSubmit.action\");\n\n\t\t// create a Select object with element located using xpath and select the option with visible text \"/konakart/DVD-Movies/1_3_-1_-1.action\"\n\t\tnew Select(driver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[2]/div[1]/div/div/div[3]/div/select\"))).selectByVisibleText(\"/konakart/DVD-Movies/1_3_-1_-1.action\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-button\\\"]/div/button\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[1]/div/div/div[5]/div[1]/div\")).click();\n\n\t\t// wait for 4000 ms\n\t\tThread.sleep(4000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[1]/div/div/div[5]/div[2]\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"d3-graph-card\\\"]/div[2]/div[1]/div/div/div[5]/div[3]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcoverage;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class TC_Compare {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testTC_Compare(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[5]/a\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"testuser\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"testuser\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"Testing@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"Testing@123\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[1]/div/ul/li[3]/a\")).click();\n\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"testcase-coverage\\\"]/section/div[1]/div/div/div[1]/div/div/button\")).click();\n\n\t\t// click on the element with link text as \"Cycle 5\" \n\t\tdriver.findElement(By.linkText(\"Cycle 5\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/section/section[2]/section/section/ui-view/section/div[3]/div/div[1]/div[2]/img[2]\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"search-select\\\"]/select\")).click();\n\n\t\t// create a Select object with element located using xpath and select the option with visible text 'Cycle 4'\n\t\tnew Select(driver.findElement(By.xpath(\"//*[@id=\\\"search-select\\\"]/select\"))).selectByVisibleText(\"Cycle 4\");\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\n\t\t// execute javascript function\n\t\tjs.executeScript(\"window.sendCoverageData = function(){\\r\\n\" + \"  var xhr = new XMLHttpRequest();\\r\\n\"\n\t\t\t\t+ \"  xhr.open(\\\"POST\\\", 'http://localhost:8001/mldevops/coverage/client', true);\\r\\n\"\n\t\t\t\t+ \"//Send the proper header information along with the request\\r\\n\"\n\t\t\t\t+ \"  xhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\r\\n\"\n\t\t\t\t+ \"  xhr.send(JSON.stringify(window.__coverage__));\\r\\n\" + \"  }\");\n\t\tjs.executeScript(\"window.sendCoverageData();\");\n\n\t\t// wait for 10000 ms\n\t\tThread.sleep(10000);\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage aidevops_testcases;\n\nimport static org.testng.Assert.assertEquals;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.Test;\n\npublic class SwitchProjects {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\n\t// Declare the JavaScriptExecutor Variable\n\tJavascriptExecutor js;\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\t// Create an object for ChromeOptions\n\t\tChromeOptions options = new ChromeOptions();\n\n\t\t// set the path for chrome web driver\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\n\t\t// customize the chrome browser\n\t\toptions.addArguments(\"start-maximized\");\n\n\t\t// initialize chrome driver with options\n\t\tdriver = new ChromeDriver(options);\n\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\t\t// initialize the JavascriptExecutor\n\t\tjs = (JavascriptExecutor) driver;\n\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSwitchProjects(String url) throws Exception {\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/button\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and click on it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).click();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and clear it\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).clear();\n\n\t\t// find web element with id = \"usernameOrEmail\" by id and populate it with value \"superadmin\"\n\t\tdriver.findElement(By.id(\"usernameOrEmail\")).sendKeys(\"superadmin\");\n\n\t\t// find web element with id = \"password\" by id and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\n\t\t// find web element with id = \"password\" by id and clear it\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\n\t\t// find web element with id = \"password\" by id and populate it with value \"admin\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"admin\");\n\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"user\\\"]/div[1]/div/form[1]/fieldset/div/div[3]/button\")).click();\n\n\t\t// click on the element with link text as \"superadmin\" \n\t\tdriver.findElement(By.linkText(\"superadmin\")).click();\n\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"navbar\\\"]/ul[2]/li/ul/li[5]/a\")).click();\n\n\t\t// locate web element using id and click on it\n\t\tdriver.findElement(By.id(\"project\")).click();\n\n\t\t// create a Select object with element located using id 'project\" and select the option with index \"1\"\n\t\tnew Select(driver.findElement(By.id(\"project\"))).selectByIndex(1);\n\t\t\n\t\t// find an element using given xpath and extract its text and store it in a variable\n\t\tString cproj = driver.findElement(By.xpath(\"//*[@id=\\\"state-content\\\"]/section/section/section/div[2]/div/div/section/form/fieldset/div[1]/span\")).getText();\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\n\t}\n\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage contosoUniversityMVC461;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.*;\nimport org.testng.annotations.*;\n\nimport cookie.Utility;\n\npublic class StudentsCreateDelete {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void function(String url) throws Exception {\n\n\t\t// launch the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate a button using xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[1]/button\")).click();\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[1]/div/div[2]/ul/li[3]/a\")).click();\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/p/a\")).click();\n\t\t\n\t\t// locate web element with given xpath and set it to \"Benedict\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[1]/div/input\")).sendKeys(\"Benedict\");\n\t\t\n\t\t// locate web element with given xpath and set it to \"Rudin\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[2]/div/input\")).sendKeys(\"Rudin\");\n\t\t\n\t\t// locate web element with given xpath and set it to \"07/27/2015\"\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[3]/div/input\")).sendKeys(\"07/27/2015\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/form/div/div[4]/div/input\")).click();\n\t\t\n\t\t// wait for 300 ms\n\t\tThread.sleep(300);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/table/tbody/tr[3]/td[4]/a[3]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"/html/body/div[2]/div/form/div/input\")).click();\n\t\t\n\t\t// locate web element with given xpath and assert that its text is equal to \"Student\"\n\t\tassertEquals(driver.findElement(By.xpath(\"/html/body/div[2]/h2\")).getText(), \"Student\");\n\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Parameters;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AddingOneProduct {\n\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// create an object of StringBuffer\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass\n\tpublic void setUp() throws Exception {\n\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void addingToShoppingCart(String url) throws Exception {\n\t\t\n\t\t// go to the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// create object of JavascriptExecutor\n\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\n\t\t// execute javascript function\n\t\tjs.executeScript(\"var FN=document.createElement('input');FN.setAttribute('type','text');FN.setAttribute('name','FullName');FN.setAttribute('placeholder','FullNAME');document.querySelector('#main-menu').appendChild(FN);\");\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// find web element with link text = \"Electronics\" and click on it\n\t\tdriver.findElement(By.linkText(\"Electronics\")).click();\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// execute javascript function\n\t\tjs.executeScript(\"var FN=document.createElement('button');FN.setAttribute('type','button');FN.setAttribute('name','SEARCH');FN.setAttribute('placeholder','SEARCH');document.querySelector('#main-menu').appendChild(FN);\");\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='content']/a/picture/img\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t\t\n\t\t// create a Select object with element located using xpath and select the option with visible text '2'\n\t\tnew Select(driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\"))).selectByVisibleText(\"2\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t\t\n\t\t//set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\n\t\t// declare a variable of type Boolean\n\t\tBoolean count;\n\t\t\n\t\t// find element with partial link text = \"Kindle Fire HD\" and check if it exists\n\t\tif (driver.findElement(By.partialLinkText(\"Kindle Fire HD\")) != null) {\n\t\t\tcount = true;\n\t\t} else {\n\t\t\tcount = false;\n\t\t}\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// assertion\n\t\tAssert.assertEquals(true, count);\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tAssert.fail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class AddingOneProductCurrency {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// create an instance of StringBuffer\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAddingOneProductCurrency(String url) throws Exception {\n\t\t\n\t\t// open URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = \"Home & Garden\" and click on it\n\t\tdriver.findElement(By.linkText(\"Home & Garden\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='side-menu']/div[2]/ul/li[2]/a/span\")).click();\n\t\t\n\t\t// locate an element using xpath and assert that its text is equal to \"$199.49\"\n\t\tassertEquals(driver.findElement(By.xpath(\"//div[@id='item-overview']/div[2]/ul/li[3]/div/div[3]/div\")).getText(),\"$199.49\");\n\t\t\t\t\n\t\t// find web element by id using id ='currency-selectSelectBoxItText' and click on it\n\t\tdriver.findElement(By.id(\"currency-selectSelectBoxItText\")).click();\n\t\t\n\t\t// find web element with link text = \"EUR \u00e2\u201a\u00ac\" and click on it\n\t\tdriver.findElement(By.linkText(\"EUR \u00e2\u201a\u00ac\")).click();\n\t\t\n\t\t// find web element with link text = \"Home & Garden\" and click on it\n\t\tdriver.findElement(By.linkText(\"Home & Garden\")).click();\n\t\t\n\t\t// find web element with link text = \"Bosch (4)\" and click on it\n\t\tdriver.findElement(By.linkText(\"Bosch (4)\")).click();\n\t\t\n\t\t// locate an element using xpath and assert that its text is equal to \"\u00e2\u201a\u00ac279.29\"\n\t\tassertEquals(driver.findElement(By.xpath(\"//div[@id='item-overview']/div[2]/ul/li[3]/div/div[3]/div\")).getText(),\"\u00e2\u201a\u00ac279.29\");\n\t\t\t\t\n\t\t// find web element by id using id ='currency-selectSelectBoxIt' and click on it\n\t\tdriver.findElement(By.id(\"currency-selectSelectBoxIt\")).click();\n\t\t\n\t\t// find web element with link text = \"US $\" and click on it\n\t\tdriver.findElement(By.linkText(\"US $\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class AddingOneProductNotifyMe {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// create an object of StringBuffer\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAddingOneProductNotifyMe(String url) throws Exception {\n\t\t// launch the URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = \"My Account\" and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with text \"sakthi@yahoo.com\"\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with text \"sakthi@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = \"DVD Movies\" and click on it\n\t\tdriver.findElement(By.linkText(\"DVD Movies\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='banners']/a/picture/img\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//div[@id='notify-me-container']/a/b)[2]\")).click();\n\t\t\n\t\t// assert that the text of element located using xpath is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"(//div[@id='notify-me-container']/a)[2]\")).getText(),\"Remove Harry Potter - The Goblet of Fire from my notification list\");\n\t\t\n\t\t// find web element with link text = \"Log Off\" and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class AddingOneProductWithDeliveryNotes {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\t// create an object of StringBuffer\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAddingOneProductWithDeliveryNotes(String url) throws Exception {\n\t\t// go to the URL\n\t\tdriver.get(url);\n\t\t\n\t\t// create an object of JavascriptExecutor\n\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t// execute javascript function\n\t\tjs.executeScript(\"var FN=document.createElement('input');FN.setAttribute('type','text');FN.setAttribute('name','FullName');FN.setAttribute('placeholder','FullNAME');document.querySelector('#main-menu').appendChild(FN);\");\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// find web element with link text = \"My Account\" and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// execute javascript function\n\t\tjs.executeScript(\"var FN=document.createElement('button');FN.setAttribute('type','button');FN.setAttribute('name','SEARCH');FN.setAttribute('placeholder','SEARCH');document.querySelector('#main-menu').appendChild(FN);\");\n\t\t\n\t\t// wait for 5000 ms\n\t\tThread.sleep(5000);\n\t\t\n\t\t// find web element using id = \"loginUsername\" and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it using value = \"sakthi@yahoo.com\"\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element using id = \"password\" and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element using id = \"password\" and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it using value = \"sakthi@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// find web element by id using id ='continue-button' and click on it\n\t\tdriver.findElement(By.id(\"continue-button\")).click();\n\t\t\n\t\t// find web element with link text = \"Home & Garden\" and click on it\n\t\tdriver.findElement(By.linkText(\"Home & Garden\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"content\\\"]/a/picture/img\")).click();\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"AddToCartForm\\\"]/div[6]/a\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// locate web element with name = \"comment\" and click on it\n\t\tdriver.findElement(By.name(\"comment\")).click();\n\t\t\n\t\t// locate web element with name = \"comment\" and clear its contents\n\t\tdriver.findElement(By.name(\"comment\")).clear();\n\t\t\n\t\t// locate web element with name = \"comment\" and set its value to \"Please gift wrap the parcel\"\n\t\tdriver.findElement(By.name(\"comment\")).sendKeys(\"Please gift wrap the parcel\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = \"Log Off\" and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\n\nimport cookie.Utility;\n\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Parameters;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport java.util.concurrent.TimeUnit;\nimport org.junit.*;\nimport org.openqa.selenium.*;\n\npublic class AddingTwoProducts {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeMethod\n\t@BeforeClass\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void addingTwoProducts(String url) throws Exception {\n\t\t\n\t\t// launch the URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = \"DVD Movies\" and click on it\n\t\tdriver.findElement(By.linkText(\"DVD Movies\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='banners']/a/picture/img\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t\t\n\t\t// find web element with link text = \"Games\" and click on it\n\t\tdriver.findElement(By.linkText(\"Games\")).click();\n\t\t\n\t\t// find web element with link text = \"The Wheel Of Time\" and click on it\n\t\tdriver.findElement(By.linkText(\"The Wheel Of Time\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t\t\n\t\t// create a variable of type Boolean\n\t\tBoolean count;\n\t\t\n\t\t// check if the element with partial link text = \"The Wheel Of Time\" exists\n\t\tif (driver.findElement(By.partialLinkText(\"The Wheel Of Time\")) != null) {\n\t\t\tcount = true;\n\t\t} else {\n\t\t\tcount = false;\n\t\t}\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// assertion\n\t\tAssert.assertEquals(true, count);\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tAssert.fail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class AddinOneProductWithCouponCode {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAddinOneProductWithCouponCode(String url) throws Exception {\n\t\t\n\t\t// open the URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = \"My Account\" and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with \"sakthi@yahoo.com\"\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with \"sakthi@123\"\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = \"Games\" and click on it\n\t\tdriver.findElement(By.linkText(\"Games\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='content']/a/picture/img\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"shopping-cart\\\"]/span[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element by id using id ='couponCode' and click on it\n\t\tdriver.findElement(By.id(\"couponCode\")).click();\n\t\t\n\t\t// find web element by id using id ='couponCode' and clear its contents\n\t\tdriver.findElement(By.id(\"couponCode\")).clear();\n\t\t\n\t\t// find web element using id = \"couponCodeUpdate\" andset it to \"09090909090909\"\n\t\tdriver.findElement(By.id(\"couponCode\")).sendKeys(\"09090909090909\");\n\n\t\t// find web element by id using id ='couponCodeUpdate' and click on it\n\t\tdriver.findElement(By.id(\"couponCodeUpdate\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// assert that the text of element located by id = \"couponCodeUpdateMsg\" is equal to the given value\n\t\tassertEquals(driver.findElement(By.id(\"couponCodeUpdateMsg\")).getText(), \"The code entered does not exist\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = \"Log Off\" and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport org.testng.Assert;\nimport org.testng.AssertJUnit;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AdvancedSearch {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t//set implicit wait time\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAdvancedSearch(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Advanced Search')])[2]\")).click();\n\t\t\n\t\t// find an element by name = 'categoryId' and click on it\n\t\tdriver.findElement(By.name(\"categoryId\")).click();\n\t\t\n\t\t// create a Select object with element located using name = 'categoryId' and select the option with visible text 'Computer Peripherals'\n\t\tnew Select(driver.findElement(By.name(\"categoryId\"))).selectByVisibleText(\"Computer Peripherals\");\n\t\t\n\t\t// find an element by name = 'categoryId' and click on it\n\t\tdriver.findElement(By.name(\"categoryId\")).click();\n\t\t\n\t\t// find an element by name = 'manufacturerId' and click on it\n\t\tdriver.findElement(By.name(\"manufacturerId\")).click();\n\t\t\n\t\t// create a Select object with element located using name = 'manufacturerId' and select the option with visible text 'Microsoft'\n\t\tnew Select(driver.findElement(By.name(\"manufacturerId\"))).selectByVisibleText(\"Microsoft\");\n\t\t\n\t\t// find an element by name = 'manufacturerId' and click on it\n\t\tdriver.findElement(By.name(\"manufacturerId\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Microsoft IntelliMouse Pro' and assert that its text is equal to \"Microsoft IntelliMouse Pro\"\n\t\tAssertJUnit.assertEquals(driver.findElement(By.linkText(\"Microsoft IntelliMouse Pro\")).getText(),\"Microsoft IntelliMouse Pro\");\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tAssert.fail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class AdvancedSearchWithPrice {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testAdvancedSearchWithPrice(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Advanced Search')])[2]\")).click();\n\t\t\n\t\t// find an element by name = 'categoryId' and click on it\n\t\tdriver.findElement(By.name(\"categoryId\")).click();\n\t\t\n\t\t// create a Select object with element located using name = 'categoryId' and select the option with visible text 'Computer Peripherals'\n\t\tnew Select(driver.findElement(By.name(\"categoryId\"))).selectByVisibleText(\"Computer Peripherals\");\n\t\t\n\t\t// find an element by name = 'categoryId' and click on it\n\t\tdriver.findElement(By.name(\"categoryId\")).click();\n\t\t\n\t\t// find web element by id using id ='priceFromStr' and click on it\n\t\tdriver.findElement(By.id(\"priceFromStr\")).click();\n\t\t\n\t\t// find web element by id using id ='priceFromStr' and clear its contents\n\t\tdriver.findElement(By.id(\"priceFromStr\")).clear();\n\t\t\n\t\t// find web element using id = \"priceFromStr\" and populate it with '299'\n\t\tdriver.findElement(By.id(\"priceFromStr\")).sendKeys(\"299\");\n\t\t\n\t\t// find web element by id using id ='priceToStr' and click on it\n\t\tdriver.findElement(By.id(\"priceToStr\")).click();\n\t\t\n\t\t// find web element by id using id ='priceToStr' and clear its contents\n\t\tdriver.findElement(By.id(\"priceToStr\")).clear();\n\t\t\n\t\t// find web element using id = \"priceToStr\" and populate it with '499'\n\t\tdriver.findElement(By.id(\"priceToStr\")).sendKeys(\"499\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Canon I-SENSYS LBP7680CX Printer' and assert that its text is equal to a given value\n\t\tassertEquals(driver.findElement(By.linkText(\"Canon I-SENSYS LBP7680CX Printer\")).getText(),\"Canon I-SENSYS LBP7680CX Printer\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport org.testng.Assert;\nimport org.testng.AssertJUnit;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport org.openqa.selenium.*;\n\nimport org.openqa.selenium.support.ui.Select;\n\npublic class CancelAProduct {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCancelAProduct(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Home' and click on it\n\t\tdriver.findElement(By.linkText(\"Home\")).click();\n\t\t\n\t\t// find web element with link text = 'DVD Movies' and click on it\n\t\tdriver.findElement(By.linkText(\"DVD Movies\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='content']/a/picture/img\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t\t\n\t\t// create a Select object with element located using xpath and select the option with visible text '2'\n\t\tnew Select(driver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\"))).selectByVisibleText(\"2\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//select[@id='prodQuantityId'])[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'Add to Cart')])[2]\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t\t\n\t\t// find an element with class = \"remove fa fa-times-circle\" by class name\n\t\tdriver.findElement(By.className(\"remove fa fa-times-circle\")).click();\n\n\t\t// assert that the text of element located using given xpath us same as the given value\n\t\tAssertJUnit.assertEquals(driver.findElement(By.xpath(\"//div[@id='checkout-area']/p\")).getText(),\"Your Shopping Cart is empty\");\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tAssert.fail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class Categories {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n\tpublic void setUp() throws Exception {\n\t\tdriver = Utility.ini();\n\t\t\n\t\t// set implicit wait time\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t}\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testCategories(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'Electronics' and click on it\n\t\tdriver.findElement(By.linkText(\"Electronics\")).click();\n\t\t\n\t\t// find web element with link text = 'Tablets (3)' and click on it\n\t\tdriver.findElement(By.linkText(\"Tablets (3)\")).click();\n\t\t\n\t\t// find an element by name = 'orderBy' and click on it\n\t\tdriver.findElement(By.name(\"orderBy\")).click();\n\t\t\n\t\t// create a Select object with element located using name = 'orderBy' and select the option with visible text 'Price: high to low'\n\t\tnew Select(driver.findElement(By.name(\"orderBy\"))).selectByVisibleText(\"Price: high to low\");\n\t\t\n\t\t// find an element by name = 'orderBy' and click on it\n\t\tdriver.findElement(By.name(\"orderBy\")).click();\n\t\t\n\t\t// find web element with link text = 'iPad' and assert that its text is equal to \"iPad\"\n\t\tassertEquals(driver.findElement(By.linkText(\"iPad\")).getText(), \"iPad\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\nimport org.testng.Assert;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\npublic class Dummymean {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass\n\t  public void setUp() throws Exception {\n\t    \n\t\t// set the path of chrom driver in System properties\n\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\\\SeleniumTest\\\\chromedriver.exe\");\n\t\t\n\t\t// instantiate the Chrome Options\n\t\tChromeOptions options = new ChromeOptions();\n\t\t\n\t\t// customize chrome options\n\t    options.addArguments(\"start-maximized\");\n\t    \n\t\t// customize chrome options\n\t\toptions.addArguments(\"load-extension=D:\\\\AIDevops\\\\codebase\\\\web extensions\\\\CombinedExtension\");\n\t\t\n\t\t// customize chrome options\n\t    options.addArguments(\"--enable-features=NetworkService,NetworkServiceInProcess\");\n\t\t\n\t\t// initialize chrome driver\n\t    driver = new ChromeDriver(options);\n\n\t\t//set implicit wait time\n\t    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t  }\n\n\t@Test\n\tpublic void testDummymean() throws Exception {\n\t\t// open the specified URL\n\t\tdriver.get(\"http://localhost:3001/\");\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t\t\n\t\t// find web element with link text = 'Sign Up' and click on it\n\t\tdriver.findElement(By.linkText(\"Sign Up\")).click();\n\t\t\n\t\t// wait for 3000 ms\n\t\tThread.sleep(3000);\n\t}\n\n\t@AfterClass\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tAssert.fail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport org.testng.annotations.Test;\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport cookie.Utility;\n\npublic class Login {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\tdriver = Utility.ini();\n\t\n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testLogin(String url) throws Exception {\n\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// assert that the text of element located using id = \"page-title\" is equal to \"My Account Information\"\n\t\tassertEquals(driver.findElement(By.id(\"page-title\")).getText(), \"My Account Information\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class Logout {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t\n\t//set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testLogout(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t\t\n\t\t// assert that the text of element located using id = \"page-title\" is equal to \"Log Off\"\n\t\tassertEquals(driver.findElement(By.id(\"page-title\")).getText(), \"Log Off\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class NewsletterSubscription {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t\n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testNewsletterSubscription(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Home' and click on it\n\t\tdriver.findElement(By.linkText(\"Home\")).click();\n\t\t\n\t\t// find web element by id using id ='newsletter-input' and click on it\n\t\tdriver.findElement(By.id(\"newsletter-input\")).click();\n\t\t// find web element by id using id ='newsletter-input' and clear its contents\n\t\tdriver.findElement(By.id(\"newsletter-input\")).clear();\n\t\t\n\t\t// find web element using id = \"newsletter-input\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"newsletter-input\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='newsletter-button' and click on it\n\t\tdriver.findElement(By.id(\"newsletter-button\")).click();\n\t\t\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// assert that the text of element located using id = \"newsletter-msg\" is equal to the given value\n\t\tassertEquals(driver.findElement(By.id(\"newsletter-msg\")).getText(), \"Subscription was successful\");\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class PageTranslation {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t  \n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testPageTranslation(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with sakthi@123''\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// find web element by id using id and click on it\n\t\tdriver.findElement(By.id(\"continue-button\")).click();\n\t\t\n\t\t// find web element by id using id and click on it\n\t\tdriver.findElement(By.id(\"lang-selectSelectBoxIt\")).click();\n\t\t\n\t\t// find web element with link text = 'Deutsch' and click on it\n\t\tdriver.findElement(By.linkText(\"Deutsch\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='shopping-cart']/span[2]\")).click();\n\t\t\n\t\t// find web element with link text = 'Warenkorb-Inhalte' and assert that its text is equal to \"Warenkorb-Inhalte\"\n\t\tassertEquals(driver.findElement(By.linkText(\"Warenkorb-Inhalte\")).getText(), \"Warenkorb-Inhalte\");\n\t\t\n\t\t// find web element by id using id ='lang-selectSelectBoxIt' and click on it\n\t\tdriver.findElement(By.id(\"lang-selectSelectBoxIt\")).click();\n\t\t\n\t\t// find web element with link text = 'English' and click on it\n\t\tdriver.findElement(By.linkText(\"English\")).click();\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class RefineSearch {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t\n\t//set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testRefineSearch(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'DVD Movies' and click on it\n\t\tdriver.findElement(By.linkText(\"DVD Movies\")).click();\n\t\t\n\t\t// find web element with link text = 'Lionsgate (1)' and click on it\n\t\tdriver.findElement(By.linkText(\"Lionsgate (1)\")).click();\n\t\t\n\t\t// find web element with link text = 'The Hunger Games'\n\t\tassertEquals(driver.findElement(By.linkText(\"The Hunger Games\")).getText(), \"The Hunger Games\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class RegistrationPage {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t  \n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testRegistrationPage(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='new-account-area']/div[2]/div/a/span\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//input[@name='gender'])[2]\")).click();\n\t\t\n\t\t// find web element by id using id ='firstName' and click on it\n\t\tdriver.findElement(By.id(\"firstName\")).click();\n\t\t\n\t\t// find web element by id using id ='firstName' and clear its contents\n\t\tdriver.findElement(By.id(\"firstName\")).clear();\n\t\t\n\t\t// find web element using id = \"firstName\" and populate it with 'sakthi'\n\t\tdriver.findElement(By.id(\"firstName\")).sendKeys(\"sakthi\");\n\t\t\n\t\t// find web element by id using id ='lastName' and clear its contents\n\t\tdriver.findElement(By.id(\"lastName\")).clear();\n\t\t\n\t\t// find web element using id = \"lastName\" and populate it with 'kanagavel'\n\t\tdriver.findElement(By.id(\"lastName\")).sendKeys(\"kanagavel\");\n\t\t\n\t\t// find web element by id using id ='datepicker' and click on it\n\t\tdriver.findElement(By.id(\"datepicker\")).click();\n\t\t\n\t\t// find web element by id using id ='datepicker' and clear its contents\n\t\tdriver.findElement(By.id(\"datepicker\")).clear();\n\t\t\n\t\t// find web element using id = \"datepicker\" and populate it with '15/08/1996'\n\t\tdriver.findElement(By.id(\"datepicker\")).sendKeys(\"15/08/1996\");\n\t\t\n\t\t// find web element by id using id ='emailAddr' and click on it\n\t\tdriver.findElement(By.id(\"emailAddr\")).click();\n\t\t\n\t\t// find web element by id using id ='emailAddr' and clear its contents\n\t\tdriver.findElement(By.id(\"emailAddr\")).clear();\n\t\t\n\t\t// find web element using id = \"emailAddr\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"emailAddr\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='username' and click on it\n\t\tdriver.findElement(By.id(\"username\")).click();\n\t\t\n\t\t// find web element by id using id ='username' and clear its contents\n\t\tdriver.findElement(By.id(\"username\")).clear();\n\t\t\n\t\t// find web element using id = \"username\" and populate it with 'sakthi'\n\t\tdriver.findElement(By.id(\"username\")).sendKeys(\"sakthi\");\n\t\t\n\t\t// find web element by id using id ='streetAddress' and click on it\n\t\tdriver.findElement(By.id(\"streetAddress\")).click();\n\t\t\n\t\t// find web element by id using id ='streetAddress' and clear its contents\n\t\tdriver.findElement(By.id(\"streetAddress\")).clear();\n\t\t\n\t\t// find web element using id = \"streetAddress\" and populate it with '12'\n\t\tdriver.findElement(By.id(\"streetAddress\")).sendKeys(\"12\");\n\t\t\n\t\t// find web element by id using id ='suburb' and click on it\n\t\tdriver.findElement(By.id(\"suburb\")).click();\n\t\t\n\t\t// find web element by id using id ='postcode' and click on it\n\t\tdriver.findElement(By.id(\"postcode\")).click();\n\t\t\n\t\t// find web element by id using id ='postcode' and clear its contents\n\t\tdriver.findElement(By.id(\"postcode\")).clear();\n\t\t\n\t\t// find web element using id = \"postcode\" and populate it with '600028'\n\t\tdriver.findElement(By.id(\"postcode\")).sendKeys(\"600028\");\n\t\t\n\t\t// find web element by id using id ='city' and click on it\n\t\tdriver.findElement(By.id(\"city\")).click();\n\t\t\n\t\t// find web element by id using id ='city' and clear its contents\n\t\tdriver.findElement(By.id(\"city\")).clear();\n\t\t\n\t\t// find web element using id = \"city\" and populate it with 'seoul'\n\t\tdriver.findElement(By.id(\"city\")).sendKeys(\"seoul\");\n\t\t\n\t\t// find web element by id using id ='countryId' and click on it\n\t\tdriver.findElement(By.id(\"countryId\")).click();\n\t\t\n\t\t// create a Select object with element located using id \"countryId\" and select the option with given visible text \n\t\tnew Select(driver.findElement(By.id(\"countryId\"))).selectByVisibleText(\"Korea, Democratic People's Republic of\");\n\t\t\t\t\n\t\t// find web element by id using id ='countryId' and click on it\n\t\tdriver.findElement(By.id(\"countryId\")).click();\n\t\t\n\t\t// find web element by id using id ='state' and click on it\n\t\tdriver.findElement(By.id(\"state\")).click();\n\t\t\n\t\t// find web element by id using id ='state' and clear its contents\n\t\tdriver.findElement(By.id(\"state\")).clear();\n\t\t\n\t\t// find web element using id = \"state\" and populate it with 'seoul'\n\t\tdriver.findElement(By.id(\"state\")).sendKeys(\"seoul\");\n\t\t\n\t\t// find web element by id using id ='telephoneNumber' and click on it\n\t\tdriver.findElement(By.id(\"telephoneNumber\")).click();\n\t\t\n\t\t// find web element by id using id ='telephoneNumber' and clear its contents\n\t\tdriver.findElement(By.id(\"telephoneNumber\")).clear();\n\t\t\n\t\t// find web element using id = \"telephoneNumber\" and populate it with '9099878890'\n\t\tdriver.findElement(By.id(\"telephoneNumber\")).sendKeys(\"9099878890\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// find web element by id using id ='passwordConfirmation' and clear its contents\n\t\tdriver.findElement(By.id(\"passwordConfirmation\")).clear();\n\t\t\n\t\t// find web element using id = \"passwordConfirmation\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"passwordConfirmation\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// assert that the text of element located using id = \"page-title\" is equal to \"My Account Information\"\n\t\tassertEquals(driver.findElement(By.id(\"page-title\")).getText(), \"My Account Information\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class Review {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testReview(String url) throws Exception {\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'DVD Movies' and click on it\n\t\tdriver.findElement(By.linkText(\"DVD Movies\")).click();\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//div[@id='banners']/a/picture/img\")).click();\n\t\t\n\t\t// find web element by id using id = \"product-reviews-tab\" and click on it\n\t\tdriver.findElement(By.id(\"product-reviews-tab\")).click();\n\n\t\t// wait for 2000 ms\n\t\tThread.sleep(2000);\n\t\t\n\t\t// locate hyperlink using given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//*[@id=\\\"average-customer-reviews-stars\\\"]/div[3]/a\")).click();\n\t\t\n\t\t// find an element by name = 'reviewText' and click on it\n\t\tdriver.findElement(By.name(\"reviewText\")).click();\n\t\t\n\t\t// find an element by name = 'reviewText' and clear its contents\n\t\tdriver.findElement(By.name(\"reviewText\")).clear();\n\t\t\n\t\t// find an element by name = 'reviewText' and set it to 'Must watch movie'\n\t\tdriver.findElement(By.name(\"reviewText\")).sendKeys(\"Must watch movie\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"(//input[@name='rating'])[5]\")).click();\n\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\n\npublic class SearchBar {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSearchBar(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'My Account' and click on it\n\t\tdriver.findElement(By.linkText(\"My Account\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and click on it\n\t\tdriver.findElement(By.id(\"loginUsername\")).click();\n\t\t\n\t\t// find web element by id using id ='loginUsername' and clear its contents\n\t\tdriver.findElement(By.id(\"loginUsername\")).clear();\n\t\t\n\t\t// find web element using id = \"loginUsername\" and populate it with 'sakthi@yahoo.com'\n\t\tdriver.findElement(By.id(\"loginUsername\")).sendKeys(\"sakthi@yahoo.com\");\n\t\t\n\t\t// find web element by id using id ='password' and click on it\n\t\tdriver.findElement(By.id(\"password\")).click();\n\t\t\n\t\t// find web element by id using id ='password' and clear its contents\n\t\tdriver.findElement(By.id(\"password\")).clear();\n\t\t\n\t\t// find web element using id = \"password\" and populate it with 'sakthi@123'\n\t\tdriver.findElement(By.id(\"password\")).sendKeys(\"sakthi@123\");\n\t\t\n\t\t// locate web element with given xpath and click on it\n\t\tdriver.findElement(By.xpath(\"//a[@id='continue-button']/span\")).click();\n\t\t\n\t\t// find web element by id using id ='logo-1' and click on it\n\t\tdriver.findElement(By.id(\"logo-1\")).click();\n\t\t\n\t\t// find web element by id using id ='search-input' and click on it\n\t\tdriver.findElement(By.id(\"search-input\")).click();\n\t\t\n\t\t// find web element by id using id ='search-input' and clear its contents\n\t\tdriver.findElement(By.id(\"search-input\")).clear();\n\t\t\n\t\t// find web element using id = \"search-input\" and populate it with 'samsung'\n\t\tdriver.findElement(By.id(\"search-input\")).sendKeys(\"samsung\");\n\t\t\n\t\t// find web element by id using id ='search-button' and click on it\n\t\tdriver.findElement(By.id(\"search-button\")).click();\n\t\t\n\t\t// find web element with link text = 'Galaxy Ace Plus' and assert that its text is equal to \"Galaxy Ace Plus\"\n\t\tassertEquals(driver.findElement(By.linkText(\"Galaxy Ace Plus\")).getText(), \"Galaxy Ace Plus\");\n\t\t\n\t\t// find web element with link text = 'Log Off' and click on it\n\t\tdriver.findElement(By.linkText(\"Log Off\")).click();\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n\n", "meta": {"set_name": "infyData"}}
{"text": "\npackage seleniumpack;\n\nimport cookie.Utility;\n\nimport java.util.concurrent.TimeUnit;\nimport org.testng.annotations.*;\nimport static org.testng.Assert.*;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.support.ui.Select;\n\npublic class SortBy {\n\t// Declare the webdriver variable\n\tprivate WebDriver driver;\n\t\n\tprivate StringBuffer verificationErrors = new StringBuffer();\n\n\t@BeforeClass(alwaysRun = true)\n  public void setUp() throws Exception {\n\t  driver = Utility.ini();\n\t\n\t// set implicit wait time\n    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n  }\n\n\t@Parameters({ \"url\" })\n\t@Test\n\tpublic void testSortBy(String url) throws Exception {\n\t\t\n\t\t// open the specified URL\n\t\tdriver.get(url);\n\t\t\n\t\t// find web element with link text = 'Software' and click on it\n\t\tdriver.findElement(By.linkText(\"Software\")).click();\n\t\t\n\t\t// find an element by name = 'orderBy' and click on it\n\t\tdriver.findElement(By.name(\"orderBy\")).click();\n\t\t\n\t\t// create a Select object with element located using name = 'orderBy' and select the option with visible text 'Price: high to low'\n\t\tnew Select(driver.findElement(By.name(\"orderBy\"))).selectByVisibleText(\"Price: high to low\");\n\t\t\n\t\t// find an element by name = 'orderBy' and click on it\n\t\tdriver.findElement(By.name(\"orderBy\")).click();\n\t\t\n\t\t// assert that the text of element located using xpath is equal to the given value\n\t\tassertEquals(driver.findElement(By.xpath(\"//div[@id='item-overview']/div[2]/ul/li/div/div[3]/div\")).getText(),\"$159.99\");\n\t}\n\n\t@AfterClass(alwaysRun = true)\n\tpublic void tearDown() throws Exception {\n\t\t// closing the browser\n\t\tdriver.quit();\n\t\t\n\t\tString verificationErrorString = verificationErrors.toString();\n\t\tif (!\"\".equals(verificationErrorString)) {\n\t\t\tfail(verificationErrorString);\n\t\t}\n\t}\n}\n", "meta": {"set_name": "infyData"}}
{"text":"import java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class webdriverdemo { \n   public static void main(String[] args) { \n   \n      WebDriver driver = new FirefoxDriver(); \n      //Puts an Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      //Launch website \n      driver.navigate().to(\"http://www.calculator.net/\"); \n      \n      //Maximize the browser \n      driver.manage().window().maximize(); \n      \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n      \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr[2]/td/input[2]\")).click(); \n \n      \n      // Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/font/b\")).getText(); \n \n      \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      //Close the Browser. \n      driver.close(); \n   } \n}", "meta": {"set_name": "TutorialPoints (en)"}}
{"text":"import java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class webdriverdemo { \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      // Puts a Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      // Launch website \n      driver.navigate().to(\"http://www.calculator.net/percent-calculator.html\"); \n      \n      // Maximize the browser \n      driver.manage().window().maximize(); \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      Thread.sleep(5000); \n      \n      // Get the text box from the application \n      String result = driver.findElement(By.id(\"cpar1\")).getAttribute(\"value\"); \n      \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      // Close the Browser. \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class webdriverdemo { \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      \n      //Puts an Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      //Launch website \n      driver.navigate().to(\"http://www.calculator.net/mortgage-payoff-calculator.html\"); \n      driver.manage().window().maximize(); \n      \n      // Click on Radio Button \n      driver.findElement(By.id(\"cpayoff1\")).click(); \n      System.out.println(\"The Output of the IsSelected \" + \n         driver.findElement(By.id(\"cpayoff1\")).isSelected()); \n      System.out.println(\"The Output of the IsEnabled \" + \n         driver.findElement(By.id(\"cpayoff1\")).isEnabled()); \n      System.out.println(\"The Output of the IsDisplayed \" + \n         driver.findElement(By.id(\"cpayoff1\")).isDisplayed()); \n      \n      //Close the Browser. \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class webdriverdemo { \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      //Puts a Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      //Launch website \n      driver.navigate().to(\"http://www.calculator.net/mortgage-calculator.html\"); \n      driver.manage().window().maximize(); \n      \n      //Click on check Box \n      driver.findElement(By.id(\"caddoptional\")).click(); \n      \n      System.out.println(\"The Output of the IsSelected \" + \n         driver.findElement(By.id(\"caddoptional\")).isSelected());      \n      System.out.println(\"The Output of the IsEnabled \" + \n         driver.findElement(By.id(\"caddoptional\")).isEnabled()); \n      System.out.println(\"The Output of the IsDisplayed \" + \n         driver.findElement(By.id(\"caddoptional\")).isDisplayed()); \n      \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class webdriverdemo { \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      \n      //Puts a Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      //Launch website \n      driver.navigate().to(\"http://www.calculator.net/interest-calculator.html\"); \n      driver.manage().window().maximize(); \n      \n      //Selecting an item from Drop Down list Box \n      Select dropdown = new Select(driver.findElement(By.id(\"ccompound\"))); \n      dropdown.selectByVisibleText(\"continuously\"); \n      \n      //you can also use dropdown.selectByIndex(1) to select second element as \n      //index starts with 0. \n      //You can also use dropdown.selectByValue(\"annually\"); \n      \n      System.out.println(\"The Output of the IsSelected \" + \n         driver.findElement(By.id(\"ccompound\")).isSelected()); \n      System.out.println(\"The Output of the IsEnabled \" + \n         driver.findElement(By.id(\"ccompound\")).isEnabled()); \n      System.out.println(\"The Output of the IsDisplayed \" + \n         driver.findElement(By.id(\"ccompound\")).isDisplayed()); \n      \n      driver.close(); \n   } \n}", "meta": {"set_name": "TutorialPoints (en)"}}
{"text":"import java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \nimport org.openqa.selenium.interactions.Action; \n \npublic class webdriverdemo { \n \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      //Puts a Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      // Launch website \n      driver.navigate().to(\"http://www.keenthemes.com/preview/metronic/templates/admin/ui_tree.html\"); \n      driver.manage().window().maximize(); \n      \n      WebElement From = driver.findElement(By.xpath(\".//*[@id='j3_7']/a\")); \n      WebElement To = driver.findElement(By.xpath(\".//*[@id='j3_1']/a\")); \n      \n      Actions builder = new Actions(driver); \n      Action dragAndDrop = builder.clickAndHold(From).moveToElement(To).release(To).build(); \n      \n      dragAndDrop.perform(); \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.util.List; \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \nimport org.openqa.selenium.interactions.Action; \n \npublic class webdriverdemo { \n \n   public static void main(String[] args) throws InterruptedException { \n   \n      WebDriver driver = new FirefoxDriver(); \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n      driver.navigate().to(\"http://demos.devexpress.com/aspxeditorsdemos/ListEditors/MultiSelect.aspx\"); \n \n      //driver.manage().window().maximize(); \n      driver.findElement(By.id(\"ContentHolder_lbSelectionMode_I\")).click(); \n      driver.findElement(By.id(\"ContentHolder_lbSelectionMode_DDD_L_LBI1T0\")).click(); \n      Thread.sleep(5000); \n      \n      // Perform Multiple Select \n      Actions builder = new Actions(driver); \n      WebElement select = driver.findElement(By.id(\"ContentHolder_lbFeatures_LBT\")); \n      List<WebElement> options = select.findElements(By.tagName(\"td\")); \n      \n      System.out.println(options.size()); \n      Action multipleSelect = \n         builder.keyDown(Keys.CONTROL).click(options.get(2)).click(options.get(4)).click(options.get(6)).build(); \n      \n      multipleSelect.perform(); \n      driver.close(); \n   } \n}", "meta": {"set_name": "TutorialPoints (en)"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class getalllinks { \n \n   public static void main(String[] args) { \n   \n      WebDriver driver = new FirefoxDriver(); \n      driver.navigate().to(\"http://www.calculator.net\"); \n      java.util.List<WebElement> links = driver.findElements(By.tagName(\"a\")); \n      System.out.println(\"Number of Links in the Page is \" + links.size()); \n      \n      for (int i = 1; i<=links.size(); i = i+1) { \n         System.out.println(\"Name of Link# \" + i + links.get(i).getText()); \n      } \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"package log4j_demo; \nimport org.apache.log4j.LogManager; \nimport org.apache.log4j.Logger; \nimport org.apache.log4j.xml.DOMConfigurator; \n \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class log4j_demo { \n   static final Logger logger = LogManager.getLogger(log4j_demo.class.getName()); \n   \n   public static void main(String[] args) { \n   \n      DOMConfigurator.configure(\"log4j.xml\"); \n      logger.info(\"# # # # # # # # # # # # # # # # # # # # # # # # # # # \"); \n      logger.info(\"TEST Has Started\"); \n      WebDriver driver = new FirefoxDriver(); \n      \n      //Puts a Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      //Launch website \n      driver.navigate().to(\"http://www.calculator.net/\"); \n      logger.info(\"Open Calc Application\"); \n      \n      //Maximize the browser \n      driver.manage().window().maximize(); \n      \n      //Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n      logger.info(\"Clicked Math Calculator Link\"); \n  \n      //Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n      logger.info(\"Clicked Percent Calculator Link\"); \n      \n      //Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      logger.info(\"Entered Value into First Text Box\"); \n      \n      //Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      logger.info(\"Entered Value into Second Text Box\"); \n      \n      //Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr/td[2]/input\")).click(); \n      logger.info(\"Click Calculate Button\"); \n      \n      //Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/span/font/b\")).getText();  \n      logger.info(\"Get Text Value\"); \n      \n      //Print a Log In message to the screen \n      logger.info(\" The Result is \" + result); \n      \n      if(result.equals(\"5\")) { \n         logger.info(\"The Result is Pass\"); \n      } else { \n         logger.error(\"TEST FAILED. NEEDS INVESTIGATION\"); \n      } \n      \n      logger.info(\"# # # # # # # # # # # # # # # # # # # # # # # # # # # \"); \n      //Close the Browser. \n      driver.close();    \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"public static WebElement lnk_percent_calc(WebDriver driver)throws Exception { \n   try { \n      element = driver.findElement(By.xpath(\".//*[@id='menu']/div[4]/div[3]/a\")); \n      return element; \n   } catch (Exception e1) { \n      // Add a message to your Log File to capture the error \n      Logger.error(\"Link is not found.\"); \n      \n      // Take a screenshot which will be helpful for analysis. \n      File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); \n      FileUtils.copyFile(screenshot, new File(\"D:\\framework\\screenshots.jpg\")); \n      throw(e1); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"package TestNG; \n \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.ie.InternetExplorerDriver; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.*; \nimport org.testng.annotations.*; \n \npublic class TestNGClass { \n   private WebDriver driver; \n   private String URL = \"http://www.calculator.net\"; \n \n   @Parameters(\"browser\") \n   @BeforeTest \n   public void launchapp(String browser) { \n \n      if (browser.equalsIgnoreCase(\"firefox\")) { \n         System.out.println(\" Executing on FireFox\"); \n         driver = new FirefoxDriver(); \n         driver.get(URL); \n         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n         driver.manage().window().maximize(); \n      } else if (browser.equalsIgnoreCase(\"chrome\")) { \n         System.out.println(\" Executing on CHROME\"); \n         System.out.println(\"Executing on IE\"); \n         System.setProperty(\"webdriver.chrome.driver\", \"D:\\chromedriver.exe\"); \n         driver = new ChromeDriver(); \n         driver.get(URL); \n         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n         driver.manage().window().maximize(); \n      } else if (browser.equalsIgnoreCase(\"ie\")) { \n         System.out.println(\"Executing on IE\"); \n         System.setProperty(\"webdriver.ie.driver\", \"D:\\IEDriverServer.exe\"); \n         driver = new InternetExplorerDriver(); \n         driver.get(URL); \n         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n         driver.manage().window().maximize(); \n      } else { \n         throw new IllegalArgumentException(\"The Browser Type is Undefined\"); \n      } \n   } \n \n   @Test \n   public void calculatepercent() { \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr/td[2]/input\")).click(); \n \n      // Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/span/font/b\")).getText();		 \n \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n \n      if(result.equals(\"5\")) { \n         System.out.println(\" The Result is Pass\"); \n      } else { \n         System.out.println(\" The Result is Fail\"); \n      } \n   } \n \n   @AfterTest \n   public void closeBrowser() { \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"package TestNG; \n \nimport org.openqa.selenium.remote.Augmenter; \nimport org.openqa.selenium.remote.DesiredCapabilities; \nimport org.openqa.selenium.TakesScreenshot; \nimport org.openqa.selenium.*; \n \nimport org.testng.annotations.AfterTest; \nimport org.testng.annotations.BeforeTest; \nimport org.testng.annotations.Parameters; \nimport org.testng.annotations.Test; \n \nimport org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.remote.RemoteWebDriver; \n \nimport java.util.concurrent.TimeUnit; \nimport java.io.File; \nimport java.net.URL; \nimport java.net.MalformedURLException; \nimport java.io.IOException; \n \npublic class TestNGClass { \n   public WebDriver driver; \n   public String URL, Node; \n   protected ThreadLocal<RemoteWebDriver> threadDriver = null; \n   \n   @Parameters(\"browser\") \n   @BeforeTest \n   public void launchapp(String browser) throws MalformedURLException { \n      String URL = \"http://www.calculator.net\"; \n      \n      if (browser.equalsIgnoreCase(\"firefox\")) { \n         System.out.println(\" Executing on FireFox\"); \n         String Node = \"http://10.112.66.52:5555/wd/hub\"; \n         DesiredCapabilities cap = DesiredCapabilities.firefox(); \n         cap.setBrowserName(\"firefox\"); \n         driver = new RemoteWebDriver(new URL(Node), cap); \n         \n         // Puts an Implicit wait, Will wait for 10 seconds \n         // before throwing exception \n         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n         \n         // Launch website \n         driver.navigate().to(URL); \n         driver.manage().window().maximize(); \n      } else { \n         throw new IllegalArgumentException(\"The Browser Type is Undefined\"); \n      } \n   } \n   \n   @Test \n   public void calculatepercent() throws IOException { \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n      \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n      \n      // Make use of augmented Driver to capture Screenshots. \n      WebDriver augmentedDriver = new Augmenter().augment(driver); \n      File screenshot = ((TakesScreenshot)augmentedDriver).getScreenshotAs(OutputType.FILE); \n      FileUtils.copyFile(screenshot, new File(\"D:\\screenshots\\remotescreenshot1.jpg\")); \n \n      // Screenshot would be saved on the system where the script is executed and NOT on remote machine. \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr/td[2]/input\")).click(); \n      \n      // Get the Result Text based on its xpath \n      String result = driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/span/font/b\")).getText(); \n \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      \n      if(result.equals(\"5\")) { \n         System.out.println(\" The Result is Pass\"); \n      } else { \n         System.out.println(\" The Result is Fail\"); \n      } \n   } \n   \n   @AfterTest \n   public void closeBrowser() { \n      driver.quit(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.io.File; \nimport java.io.IOException; \nimport java.util.concurrent.TimeUnit; \n \nimport org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class WebdriverDemo { \n   public static void main(String[] args) throws IOException { \n      \n      WebDriver driver = new FirefoxDriver(); \n      \n      // Puts an Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      // Launch website \n      driver.navigate().to(\"http://www.calculator.net/\"); \n      \n      // Maximize the browser \n      driver.manage().window().maximize(); \n      \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n      \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr/td[2]/input\")).click(); \n      \n      // Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/span/font/b\")).getText(); \n      \n      File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); \n      \n      FileUtils.copyFile(screenshot, new File(\"D:\\screenshots\\screenshots1.jpg\")); \n      \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      //Close the Browser. \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import java.io.File; \nimport java.io.IOException; \nimport java.util.concurrent.TimeUnit; \nimport java.awt.*; \n \nimport org.apache.commons.io.FileUtils; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.By; \n \nimport org.monte.media.math.Rational; \nimport org.monte.media.Format; \nimport org.monte.screenrecorder.ScreenRecorder; \n \nimport static org.monte.media.AudioFormatKeys.*; \nimport static org.monte.media.VideoFormatKeys.*; \n \n \npublic class webdriverdemo { \n   private static ScreenRecorder screenRecorder; \n   \n   public static void main(String[] args) throws IOException, AWTException { \n      GraphicsConfiguration gconfig = GraphicsEnvironment \n         .getLocalGraphicsEnvironment() \n         .getDefaultScreenDevice() \n         .getDefaultConfiguration(); \n      \n      screenRecorder = new ScreenRecorder(gconfig, \n         new Format(MediaTypeKey, MediaType.FILE, MimeTypeKey, MIME_AVI), \n         new Format(MediaTypeKey, MediaType.VIDEO, EncodingKey, \n            ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE, \n            CompressorNameKey, ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE, \n            DepthKey, (int)24, FrameRateKey, Rational.valueOf(15), \n            QualityKey, 1.0f, \n            KeyFrameIntervalKey, (int) (15 * 60)), \n         new Format(MediaTypeKey, MediaType.VIDEO, \n            EncodingKey,\"black\", FrameRateKey, Rational.valueOf(30)), null); \n      \n      WebDriver driver = new FirefoxDriver(); \n      \n      // Start Capturing the Video \n      screenRecorder.start(); \n      \n      // Puts an Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      // Launch website \n      driver.navigate().to(\"http://www.calculator.net/\"); \n      \n      // Maximize the browser \n      driver.manage().window().maximize(); \n      \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[3]/a\")).click(); \n      \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id = 'menu']/div[4]/div[3]/a\")).click(); \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id = 'content']/table/tbody/tr/td[2]/input\")).click(); \n      \n      // Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id = 'content']/p[2]/span/font/b\")).getText(); \n \n      File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); \n      FileUtils.copyFile(screenshot, new File(\"D:\\screenshots\\screenshots1.jpg\")); \n \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      // Close the Browser. \n      driver.close(); \n      \n      // Stop the ScreenRecorder \n      screenRecorder.stop(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"package TestNG; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \nimport org.testng.annotations.AfterTest; \nimport org.testng.annotations.BeforeTest; \nimport org.testng.annotations.Test; \n \npublic class TestNGClass { \n   WebDriver driver = new FirefoxDriver(); \n   \n   @BeforeTest \n   public void launchapp() { \n      // Puts an Implicit wait, Will wait for 10 seconds before throwing exception \n      driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n      \n      // Launch website \n      driver.navigate().to(\"http://www.calculator.net\"); \n      driver.manage().window().maximize(); \n   } \n   \n   @Test \n   public void calculatepercent() { \n      // Click on Math Calculators \n      driver.findElement(By.xpath(\".//*[@id='menu']/div[3]/a\")).click(); \n      \n      // Click on Percent Calculators \n      driver.findElement(By.xpath(\".//*[@id='menu']/div[4]/div[3]/a\")).click(); \n      \n      // Enter value 10 in the first number of the percent Calculator \n      driver.findElement(By.id(\"cpar1\")).sendKeys(\"10\"); \n      \n      // Enter value 50 in the second number of the percent Calculator \n      driver.findElement(By.id(\"cpar2\")).sendKeys(\"50\"); \n      \n      // Click Calculate Button \n      driver.findElement(By.xpath(\".//*[@id='content']/table/tbody/tr/td[2]/input\")).click(); \n      \n      // Get the Result Text based on its xpath \n      String result = \n         driver.findElement(By.xpath(\".//*[@id='content']/p[2]/span/font/b\")).getText(); \n      \n      // Print a Log In message to the screen \n      System.out.println(\" The Result is \" + result); \n      \n      if(result.equals(\"5\")) { \n         System.out.println(\" The Result is Pass\"); \n      } else { \n         System.out.println(\" The Result is Fail\"); \n      } \n   } \n   \n   @AfterTest \n   public void terminatetest() { \n      driver.close(); \n   } \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \n  \npublic class First {  \n  \n    public static void main(String[] args) {  \n        \n    // declaration and instantiation of objects/variables  \n    System.setProperty(\"webdriver.chrome.driver\", \"D:\\ChromeDriver\\chromedriver.exe\");  \n    WebDriver driver=new ChromeDriver();  \n      \n// Launch website  \n    driver.navigate().to(\"http://www.google.com/\");  \n          \n    // Click on the search text box and send value  \n    driver.findElement(By.id(\"lst-ib\")).sendKeys(\"javatpoint tutorials\");  \n          \n    // Click on the search button  \n    driver.findElement(By.name(\"btnK\")).click();  \n      \n    }  \n  \n}  ", "meta": {"set_name": "JavaTPoint (en)"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \nimport org.openqa.selenium.support.ui.Select;  \n  \npublic class Second {  \n  \n    public static void main(String[] args) {  \n          \n          // System Property for Gecko Driver   \n    System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n          \n         // Initialize Gecko Driver using Desired Capabilities Class  \n        DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n        capabilities.setCapability(\"marionette\",true);  \n        WebDriver driver= new FirefoxDriver(capabilities);  \n          \n        // Launch Website  \n     driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");  \n      \n        // Fetch the text \"This is sample text.\" and print it on console  \n        // Use the class name of the div to locate it and then fetch text using getText() method  \n     String sampleText = driver.findElement(By.className(\"col-md-12\")).getText();  \n     System.out.println(sampleText);  \n          \n          // Use the linkText locator method to find the link and perform click using click() method  \n     driver.findElement(By.linkText(\"This is a link\")).click();  \n       \n          // Click on the textbox and send value  \n     driver.findElement(By.id(\"fname\")).sendKeys(\"JavaTpoint\");  \n       \n        // Clear the text written in the textbox  \n     driver.findElement(By.id(\"fname\")).clear();  \n          \n        // Click on the Submit button using click() command  \n     driver.findElement(By.id(\"idOfButton\")).click();  \n   \n        // Locate the radio button by id and check it using click() function  \n     driver.findElement(By.id(\"male\")).click();  \n          \n        // Locate the checkbox by cssSelector and check it using click() function  \n     driver.findElement(By.cssSelector(\"input.Automation\")).click();  \n              \n        // Use Select class for selecting value from dropdown  \n    Select dropdown = new Select(driver.findElement(By.id(\"testingDropdown\")));  \n    dropdown.selectByVisibleText(\"Automation Testing\");  \n       \n        // Close the Browser  \n             driver.close();  \n      \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.JavascriptExecutor;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \n  \npublic class Third {  \n  \n    public static void main(String[] args) {  \n      \n           // System Property for Chrome Driver   \n        System.setProperty(\"webdriver.chrome.driver\", \"D:\\ChromeDriver\\chromedriver.exe\");  \n          \n             // Instantiate a ChromeDriver class.     \n        WebDriver driver=new ChromeDriver();  \n          \n           // Launch Website  \n        driver.navigate().to(\"http://www.javatpoint.com/\");  \n          \n         //Maximize the browser  \n          driver.manage().window().maximize();  \n          \n          //Scroll down the webpage by 5000 pixels  \n        JavascriptExecutor js = (JavascriptExecutor)driver;  \n        js.executeScript(\"scrollBy(0, 5000)\");   \n          \n         // Click on the Search button  \n        driver.findElement(By.linkText(\"Core Java\")).click();     \n  \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Second {  \n  \n    public static void main(String[] args) {  \n          \n          // System Property for Gecko Driver   \nSystem.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n          \n          // Initialize Gecko Driver using Desired Capabilities Class  \n    DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n    capabilities.setCapability(\"marionette\",true);  \n    WebDriver driver= new FirefoxDriver(capabilities);  \n          \n         // Launch Website  \n    driver.navigate().to(\"http://www.javatpoint.com/\");  \n          \n        // Click on the Custom Search text box and send value  \n    driver.findElement(By.id(\"gsc-i-id1\")).sendKeys(\"Java\");  \n          \n        // Click on the Search button  \ndriver.findElement(By.className(\"gsc-search-button gsc-search-buttonv2\")).click();    \n        }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.ie.InternetExplorerDriver;  \n  \npublic class Fourth {  \n  \n    public static void main(String[] args) {  \n      \n            // System Property for IEDriver   \n        System.setProperty(\"webdriver.ie.driver\", \"D:\\IE Driver Server\\IEDriverServer.exe\");  \n          \n           // Instantiate a IEDriver class.       \n        WebDriver driver=new InternetExplorerDriver();  \n          \n           // Launch Website  \n        driver.navigate().to(\"http://www.google.com/\");  \n          \n           //Maximize the browser  \n          driver.manage().window().maximize();  \n            \n           // Click on the search text box and send value  \n        driver.findElement(By.id(\"lst-ib\")).sendKeys(\"javatpoint tutorials\");  \n              \n           // Click on the search button  \n        driver.findElement(By.name(\"btnK\")).click();  \n            \n  \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.safari.SafariDriver;  \n  \npublic class Fifth {  \n  \n    public static void main(String[] args) {  \n          \n          // Instantiate a SafariDriver class.    \n        WebDriver driver = new SafariDriver();  \n  \n          // Launch Website  \n        driver.navigate().to(\"http://www.google.com/\");  \n              \n          // Click on the search text box and send value  \n        driver.findElement(By.id(\"lst-ib\")).sendKeys(\"javatpoint tutorials\");  \n              \n          // Click on the search button  \n        driver.findElement(By.name(\"btnK\")).click();  \n          \n          // Close the Browser  \n        driver.close();  \n          \n    }  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Locator_One {  \n  \n    public static void main(String[] args) {  \n          \n          // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n         // Initialize Gecko Driver using Desired Capabilities Class  \n            DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n              \n        // Click on the textbox and send value  \n             driver.findElement(By.id(\"fname\")).sendKeys(\"JavaTpoint\");  \n               \n        // Click on the Submit button using click() command  \n             driver.findElement(By.id(\"idOfButton\")).click();      \n               \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Name_Test {  \n  \n    public static void main(String[] args) {  \n          \n         // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n         // Initialize Gecko Driver using Desired Capabilities Class  \n        DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n              \n        // Click on the textbox and send value  \n     driver.findElement(By.name(\"firstName\")).sendKeys(\"Selenium Tutorial\");  \n               \n       }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"// Click on the textbox and send value  \ndriver.findElement(By.name(\"firstName\")).sendKeys(\"Selenium Tutorial\");  ", "meta": {"set_name": "infyData"}}
{"text":"// Launch Website  \ndriver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   ", "meta": {"set_name": "infyData"}}
{"text":" // System Property for Gecko Driver   \nSystem.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n      \n // Initialize Gecko Driver using Desired Capabilities Class  \nDesiredCapabilities capabilities = DesiredCapabilities.firefox();  \ncapabilities.setCapability(\"marionette\",true);  \nWebDriver driver= new FirefoxDriver(capabilities);  ", "meta": {"set_name": "infyData"}}
{"text":"// Locate the checkbox by Class Name and check it using click() function  \n     driver.findElement(By.className(\"Automation\")).click();  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \n  \npublic class Class_Test {  \n  \n    public static void main(String[] args) {  \n          \n        // System Property for Chrome Driver   \n        System.setProperty(\"webdriver.chrome.driver\",\"D:\\ChromeDriver\\chromedriver.exe\");  \n  \n        // Instantiate a ChromeDriver class.      \n        WebDriver driver=new ChromeDriver();  \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n    //Locate the checkbox by Class Name and check it using click() function  \n        driver.findElement(By.className(\"Automation\")).click();  \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"// Click on the textbox and send value  \ndriver.findElement(By.tagName(\"input\")).sendKeys(\"C++ Tutorial\");  ", "meta": {"set_name": "infyData"}}
{"text":"// Click on the Submit button using click() command  \n driver.findElement(By.tagName(\"button\")).click();  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Tag_Test {  \n  \n    public static void main(String[] args) {  \n          \n          // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n         // Initialize Gecko Driver using Desired Capabilities Class  \nDesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n              \n        // Click on the textbox and send value  \n    driver.findElement(By.tagName(\"input\")).sendKeys(\"C++ Tutorial\");  \n               \n        // Click on the Submit button using click() command  \n        driver.findElement(By.tagName(\"button\")).click();      \n               \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"// Click on the Link Text using click() command  \n driver.findElement(By.linkText(\"This is a Link\")).click();  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Link_Test {  \n  \n    public static void main(String[] args) {  \n          \n          // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n         // Initialize Gecko Driver using Desired Capabilities Class  \nDesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n              \n      \n                \n// Launch Website  \ndriver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n// Click on the Link Text using click() command  \n    driver.findElement(By.linkText(\"This is a Link\")).click();  \n       \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"// Click on the Link Text using click() command  \n driver.findElement(By.partialLinkText(\"This is\")).click();  \n  \n  \nThus, our final test script will look something like this:  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \n  \npublic class Partial_Link {  \n  \n    public static void main(String[] args) {  \n          \n        // System Property for Chrome Driver   \n        System.setProperty(\"webdriver.chrome.driver\",\"D:\\ChromeDriver\\chromedriver.exe\");  \n  \n        // Instantiate a ChromeDriver class.      \n        WebDriver driver=new ChromeDriver();  \n  \n        // Launch Website  \n    driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n  \n    // Click on the Link Text using click() command  \n    driver.findElement(By.partialLinkText(\"This is\")).click();  \n  \n  \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"//Using Select class for selecting value from dropdown  \nSelect dropdown = new Select(driver.findElement(By.id(\"testingDropdown\")));  \ndropdown.selectByVisibleText(\"Database Testing\");  \n  \nThus, our final test script will look something like this:  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \nimport org.openqa.selenium.support.ui.Select;  \n  \npublic class Dropdwn_Test  {  \n  \n    public static void main(String[] args) {  \n          \n       // System Property for Chrome Driver   \n        System.setProperty(\"webdriver.chrome.driver\",\"D:\\ChromeDriver\\chromedriver.exe\");  \n  \n        // Instantiate a ChromeDriver class.      \n        WebDriver driver=new ChromeDriver();  \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n  \n//Using Select class for selecting value from dropdown  \n      \nSelect dropdown = new Select(driver.findElement(By.id(\"testingDropdown\")));  \ndropdown.selectByVisibleText(\"Database Testing\");  \n  \n    // Close the Browser  \n        driver.close();  \n  \n  \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"//WebElement on which drag and drop operation needs to be performed  \nWebElement from = driver.findElement(By.id(\"sourceImage\"));  \n  \n//WebElement to which the above object is dropped  \nWebElement to = driver.findElement(By.id(\"targetDiv\");  \n   \n//Creating object of Actions class to build composite actions  \nActions act = new Actions(driver);  \n   \n//Performing the drag and drop action  \nact.dragAndDrop(from,to).build().perform();   ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.WebElement;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.interactions.Actions;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Dragdrp_Test {  \n  \n    public static void main(String[] args) {  \n          \n        // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n        // Initialize Gecko Driver using Desired Capabilities Class  \n            DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n          \n  \n        // Launch Website  \n            driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n              \n        //WebElement on which drag and drop operation needs to be performed  \n            WebElement from = driver.findElement(By.id(\"sourceImage\"));  \n  \n        //WebElement to which the above object is dropped  \n            WebElement to = driver.findElement(By.id(\"targetDiv\"));  \n               \n        //Creating object of Actions class to build composite actions  \n            Actions act = new Actions(driver);  \n               \n        //Performing the drag and drop action  \n            act.dragAndDrop(from,to).build().perform();   \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \nimport org.openqa.selenium.Alert;  \npublic class alert_test {  \n  \n    public static void main(String[] args) {  \n          \n        // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n        // Initialize Gecko Driver using Desired Capabilities Class  \n            DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n          \n  \n        // Launch Website  \n        driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");   \n  \n        //Handling alert boxes  \n        //Click on generate alert button  \n        driver.findElement(By.linkText(\"Generate Alert Box\")).click();  \n          \n        //Using Alert class to first switch to or focus to the alert box  \n        Alert alert = (Alert) driver.switchTo().alert();  \n          \n        //Using accept() method to accept the alert box  \n        alert.accept();  \n          \n        //Handling confirm box  \n        //Click on Generate Confirm Box  \n        driver.findElement(By.linkText(\"Generate Confirm Box\")).click();  \n          \n          \n        Alert confirmBox = (Alert) driver.switchTo().alert();  \n          \n        //Using dismiss() command to dismiss the confirm box  \n        //Similarly accept can be used to accept the confirm box  \n        ((Alert) confirmBox).dismiss();  \n  \n  \n      \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.JavascriptExecutor;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \nimport org.openqa.selenium.remote.DesiredCapabilities;  \n  \npublic class Scroll_Test {  \n  \n    public static void main(String[] args) {  \n          \n        // System Property for Gecko Driver   \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );  \n              \n        // Initialize Gecko Driver using Desired Capabilities Class  \n            DesiredCapabilities capabilities = DesiredCapabilities.firefox();  \n            capabilities.setCapability(\"marionette\",true);  \n            WebDriver driver= new FirefoxDriver(capabilities);  \n          \n  \n        // Launch Website  \n        driver.navigate().to(\"www.javatpoint.com\");   \n  \n        //Scroll down the webpage by 4500 pixels  \n        JavascriptExecutor js = (JavascriptExecutor)driver;  \n        js.executeScript(\"scrollBy(0, 4500)\");  \n  \n    }  \n} ", "meta": {"set_name": "infyData"}}
{"text":"// System Property for Chrome Driver   \nSystem.setProperty(\"webdriver.chrome.driver\",\"D:\\ChromeDriver\\chromedriver.exe\");  \n                  \n// Instantiate a ChromeDriver class.      \nWebDriver driver=new ChromeDriver();  ", "meta": {"set_name": "infyData"}}
{"text":"// Storing Title name in the String variable  \nString title = driver.getTitle();  \n       \n// Storing Title length in the Int variable  \nint titleLength = driver.getTitle().length();  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \n  \npublic class Web_command {  \n  \npublic static void main(String[] args) {  \n          \n// System Property for Chrome Driver   \nSystem.setProperty(\"webdriver.chrome.driver\",\"D:\\ChromeDriver\\chromedriver.exe\");  \n                  \n// Instantiate a ChromeDriver class.      \nWebDriver driver=new ChromeDriver();  \n          \n// Storing the Application Url in the String variable  \nString url = (\"https://www.google.co.in/\");  \n       \n//Launch the ToolsQA WebSite  \ndriver.get(url);  \n       \n// Storing Title name in the String variable  \nString title = driver.getTitle();  \n       \n// Storing Title length in the Int variable  \nint titleLength = driver.getTitle().length();  \n       \n// Printing Title & Title length in the Console window  \nSystem.out.println(\"Title of the page is : \" + title);  \nSystem.out.println(\"Length of the title is : \"+ titleLength);  \n      \n// Storing URL in String variable  \nString actualUrl = driver.getCurrentUrl();  \n       \nif (actualUrl.equals(\"https://www.google.co.in/\")){  \nSystem.out.println(\"Verification Successful - The correct Url is opened.\");  \n}  \nelse{  \n  \nSystem.out.println(\"Verification Failed - An incorrect Url is opened.\");  \n         }  \n       \n// Storing Page Source in String variable  \nString pageSource = driver.getPageSource();  \n           \n// Storing Page Source length in Int variable  \nint pageSourceLength = pageSource.length();  \n           \n// Printing length of the Page Source on console  \nSystem.out.println(\"Total length of the Pgae Source is : \" + pageSourceLength);  \n           \n  \n//Closing browser  \n driver.close();   \n}  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By;    \nimport org.openqa.selenium.WebDriver;    \nimport org.openqa.selenium.firefox.FirefoxDriver;    \nimport org.openqa.selenium.remote.DesiredCapabilities;    \n    \npublic class Navigation_command {    \n    \n    public static void main(String[] args) {    \n            \n        // System Property for Gecko Driver     \n        System.setProperty(\"webdriver.gecko.driver\",\"D:\\GeckoDriver\\geckodriver.exe\" );    \n                \n        // Initialize Gecko Driver using Desired Capabilities Class    \n            DesiredCapabilities capabilities = DesiredCapabilities.firefox();    \n            capabilities.setCapability(\"marionette\",true);    \n            WebDriver driver= new FirefoxDriver(capabilities);    \n                \n            // Launch Website    \n            driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");     \n  \n            //Click on the Link Text using click() command    \n            driver.findElement(By.linkText(\"This is a Link\")).click();  \n  \n            //Go back to Home Page  \n            driver.navigate().back();   \n  \n            //Go forward to Registration page  \n            driver.navigate().forward();  \n  \n            // Go back to Home page  \n            driver.navigate().to(\"https://www.testandquiz.com/selenium/testing.html\");  \n  \n            //Refresh browser  \n            driver.navigate().refresh();  \n        \n            //Closing browser  \n            driver.close();   \n    }  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"package mypack;  \nimport org.junit.Assert;  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \npublic class Checkbox_test {  \n  \n    public static void main(String[] args) {  \n    // TODO Auto-generated method stub  \n        System.setProperty(\"webdriver.chrome.driver\",\"C:\\\\work\\\\chromedriver.exe\");  \n        WebDriver driver = new ChromeDriver();  \n        driver.navigate().to(\"https://www.spicejet.com/\");  \n        Assert.assertFalse(driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).isSelected());  \n        System.out.println(driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).isSelected());  \n          \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"package mypack;  \nimport org.junit.Assert;  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \npublic class Checkbox_test {  \n  \npublic static void main(String[] args)   \n{  \n// TODO Auto-generated method stub  \nSystem.setProperty(\"webdriver.chrome.driver\",\"C:\\\\work\\\\chromedriver.exe\");  \nWebDriver driver = new ChromeDriver();  \ndriver.navigate().to(\"https://www.spicejet.com/\");  \nAssert.assertFalse(true);  \nSystem.out.println(driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).isSelected());  \n          \n}}  ", "meta": {"set_name": "infyData"}}
{"text":"package mypack;  \nimport org.junit.Assert;  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \npublic class Checkbox_test   \n{  \n  \n    public static void main(String[] args)   \n           {  \n        // TODO Auto-generated method stub  \n        System.setProperty(\"webdriver.chrome.driver\",\"C:\\\\work\\\\chromedriver.exe\");  \n        WebDriver driver = new ChromeDriver();  \n        driver.navigate().to(\"https://www.spicejet.com/\");  \n        driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).click();  \n          Assert.assertTrue(driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).isSelected());  \nSystem.out.println(driver.findElement(By.cssSelector(\"input[id*='SeniorCitizenDiscount']\")).isSelected());  \n          \n    }  \n  \n}  ", "meta": {"set_name": "infyData"}}
{"text":"package mypack;  \nimport org.junit.Assert;  \nimport org.openqa.selenium.By;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.chrome.ChromeDriver;  \npublic class Checkbox_test {  \npublic static void main(String[] args)   \n{  \n  // TODO Auto-generated method stub  \nSystem.setProperty(\"webdriver.chrome.driver\",\"C:\\\\work\\\\chromedriver.exe\");  \nWebDriver driver = new ChromeDriver();  \ndriver.navigate().to(\"https://www.spicejet.com/\"); Assert.assertEquals(\"5Adult\",driver.findElement(By.id(\"divpaxinfo\")).getText());  \nSystem.out.println(driver.findElement(By.id(\"divpaxinfo\")).getText());  \n}}  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class HelloSelenium { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n \n        driver.get(\"https://selenium.dev\"); \n \n        driver.quit(); \n    } \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class HelloSelenium { \n    public static void main(String[] args) { \n        driver = new ChromeDriver(); \n \n        driver.get(\"https://google.com\"); \n        \n        driver.getTitle(); // => \"Google\" \n \n        driver.manage().timeouts().implicitlyWait(Duration.ofMillis(500)); \n        \n        WebElement searchBox = driver.findElement(By.name(\"q\")); \n        WebElement searchButton = driver.findElement(By.name(\"btnK\")); \n        \n        searchBox.sendKeys(\"Selenium\"); \n        searchButton.click(); \n        \n        searchBox = driver.findElement(By.name(\"q\")); \n        searchBox.getAttribute(\"value\"); // => \"Selenium\" \n        \n        driver.quit(); \n    } \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.PageLoadStrategy; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class pageLoadStrategy { \npublic static void main(String[] args) { \nChromeOptions chromeOptions = new ChromeOptions(); \nchromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL); \nWebDriver driver = new ChromeDriver(chromeOptions); \ntry { \n// Navigate to Url \ndriver.get(\"https://google.com\"); \n} finally { \ndriver.quit(); \n} \n} \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.PageLoadStrategy; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class pageLoadStrategy { \npublic static void main(String[] args) { \nChromeOptions chromeOptions = new ChromeOptions(); \nchromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER); \nWebDriver driver = new ChromeDriver(chromeOptions); \ntry { \n// Navigate to Url \ndriver.get(\"https://google.com\"); \n} finally { \ndriver.quit(); \n} \n} \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.PageLoadStrategy; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class pageLoadStrategy { \npublic static void main(String[] args) { \nChromeOptions chromeOptions = new ChromeOptions(); \nchromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE); \nWebDriver driver = new ChromeDriver(chromeOptions); \ntry { \n// Navigate to Url \ndriver.get(\"https://google.com\"); \n} finally { \ndriver.quit(); \n} \n} \n}", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.Proxy; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \n \npublic class proxyTest { \npublic static void main(String[] args) { \nProxy proxy = new Proxy(); \nproxy.setHttpProxy(\"<HOST:PORT>\"); \nChromeOptions options = new ChromeOptions(); \noptions.setCapability(\"proxy\", proxy); \nWebDriver driver = new ChromeDriver(options); \ndriver.get(\"https://www.google.com/\"); \ndriver.manage().window().maximize(); \ndriver.quit(); \n} \n}", "meta": {"set_name": "infyData"}}
{"text":"//Click the link to activate the alert \ndriver.findElement(By.linkText(\"See an example alert\")).click(); \n \n//Wait for the alert to be displayed and store it in a variable \nAlert alert = wait.until(ExpectedConditions.alertIsPresent()); \n \n//Store the alert text in a variable \nString text = alert.getText(); \n \n//Press the OK button \nalert.accept();", "meta": {"set_name": "infyData"}}
{"text":"//Click the link to activate the alert \ndriver.findElement(By.linkText(\"See a sample confirm\")).click(); \n \n//Wait for the alert to be displayed \nwait.until(ExpectedConditions.alertIsPresent()); \n \n//Store the alert in a variable \nAlert alert = driver.switchTo().alert(); \n \n//Store the alert in a variable for reuse \nString text = alert.getText(); \n \n//Press the Cancel button \nalert.dismiss();", "meta": {"set_name": "infyData"}}
{"text":"//Click the link to activate the alert \ndriver.findElement(By.linkText(\"See a sample prompt\")).click(); \n \n//Wait for the alert to be displayed and store it in a variable \nAlert alert = wait.until(ExpectedConditions.alertIsPresent()); \n \n//Type your message \nalert.sendKeys(\"Selenium\"); \n \n//Press the OK button \nalert.accept(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class addCookie { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n        try { \n            driver.get(\"http://www.example.com\"); \n \n            // Adds the cookie into current browser context \n            driver.manage().addCookie(new Cookie(\"key\", \"value\")); \n        } finally { \n            driver.quit(); \n        } \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class getCookieNamed { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n        try { \n            driver.get(\"http://www.example.com\"); \n            driver.manage().addCookie(new Cookie(\"foo\", \"bar\")); \n \n            // Get cookie details with named cookie 'foo' \n            Cookie cookie1 = driver.manage().getCookieNamed(\"foo\"); \n            System.out.println(cookie1); \n        } finally { \n            driver.quit(); \n        } \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport java.util.Set; \n \npublic class getAllCookies { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n        try { \n            driver.get(\"http://www.example.com\"); \n            // Add few cookies \n            driver.manage().addCookie(new Cookie(\"test1\", \"cookie1\")); \n            driver.manage().addCookie(new Cookie(\"test2\", \"cookie2\")); \n \n            // Get All available cookies \n            Set<Cookie> cookies = driver.manage().getCookies(); \n            System.out.println(cookies); \n        } finally { \n            driver.quit(); \n        } \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class deleteCookie { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n        try { \n            driver.get(\"http://www.example.com\"); \n            driver.manage().addCookie(new Cookie(\"test1\", \"cookie1\")); \n            Cookie cookie1 = new Cookie(\"test2\", \"cookie2\"); \n            driver.manage().addCookie(cookie1); \n \n            // delete a cookie with name 'test1' \n            driver.manage().deleteCookieNamed(\"test1\"); \n \n            /* \n             Selenium Java bindings also provides a way to delete \n             cookie by passing cookie object of current browsing context \n             */ \n            driver.manage().deleteCookie(cookie1); \n        } finally { \n            driver.quit(); \n        } \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class deleteAllCookies { \n    public static void main(String[] args) { \n        WebDriver driver = new ChromeDriver(); \n        try { \n            driver.get(\"http://www.example.com\"); \n            driver.manage().addCookie(new Cookie(\"test1\", \"cookie1\")); \n            driver.manage().addCookie(new Cookie(\"test2\", \"cookie2\")); \n \n            // deletes all cookies \n            driver.manage().deleteAllCookies(); \n        } finally { \n            driver.quit(); \n        } \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class cookieTest { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      driver.get(\"http://www.example.com\"); \n      Cookie cookie = new Cookie.Builder(\"key\", \"value\").sameSite(\"Strict\").build(); \n      Cookie cookie1 = new Cookie.Builder(\"key\", \"value\").sameSite(\"Lax\").build(); \n      driver.manage().addCookie(cookie); \n      driver.manage().addCookie(cookie1); \n      System.out.println(cookie.getSameSite()); \n      System.out.println(cookie1.getSameSite()); \n    } finally { \n      driver.quit(); \n    } \n  } \n}\n", "meta": {"set_name": "infyData"}}
{"text":"//Store the web element \nWebElement iframe = driver.findElement(By.cssSelector(\"#modal>iframe\")); \n \n//Switch to the frame \ndriver.switchTo().frame(iframe); \n \n//Now we can click the button \ndriver.findElement(By.tagName(\"button\")).click(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Opens a new tab and switches to new tab \ndriver.switchTo().newWindow(WindowType.TAB); \n \n// Opens a new window and switches to new window \ndriver.switchTo().newWindow(WindowType.WINDOW); \n  ", "meta": {"set_name": "infyData"}}
{"text":"//Close the tab or window \ndriver.close(); \n \n//Switch back to the old tab or window \ndriver.switchTo().window(originalWindow); \n  ", "meta": {"set_name": "infyData"}}
{"text":").getSize().getHeight(); \n \n//Or store the dimensions and query them later \nDimension size = driver.manage().window().getSize(); \nint width1 = size.getWidth(); \nint height1 = size.getHeight(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Move the window to the top left of the primary monitor \ndriver.manage().window().setPosition(new Point(0, 0)); \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport java.io.*; \nimport org.openqa.selenium.*; \n \npublic class SeleniumTakeScreenshot { \n    public static void main(String args[]) throws IOException { \n        WebDriver driver = new ChromeDriver(); \n        driver.get(\"http://www.example.com\"); \n        File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); \n        FileUtils.copyFile(scrFile, new File(\"./image.png\")); \n        driver.quit(); \n    } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport java.io.File; \nimport java.io.IOException; \n \npublic class SeleniumelementTakeScreenshot { \n  public static void main(String args[]) throws IOException { \n    WebDriver driver = new ChromeDriver(); \n    driver.get(\"https://www.example.com\"); \n    WebElement element = driver.findElement(By.cssSelector(\"h1\")); \n    File scrFile = element.getScreenshotAs(OutputType.FILE); \n    FileUtils.copyFile(scrFile, new File(\"./image.png\")); \n    driver.quit(); \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"//Creating the JavascriptExecutor interface object by Type casting \n  JavascriptExecutor js = (JavascriptExecutor)driver; \n//Button Element \n  WebElement button =driver.findElement(By.name(\"btnLogin\")); \n//Executing JavaScript to click on element \n  js.executeScript(\"arguments[0].click();\", button); \n//Get return value from script \n  String text = (String) js.executeScript(\"return arguments[0].innerText\", button); \n//Executing JavaScript directly \n  js.executeScript(\"console.log('hello world')\"); \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \n  import org.openqa.selenium.WebDriver; \n  import org.openqa.selenium.WebElement; \n  import org.openqa.selenium.chrome.ChromeDriver; \n  import java.util.List; \n \n  public class findElementsFromElement { \n      public static void main(String[] args) { \n          WebDriver driver = new ChromeDriver(); \n          try { \n              driver.get(\"https://example.com\"); \n \n              // Get element with tag name 'div' \n              WebElement element = driver.findElement(By.tagName(\"div\")); \n \n              // Get all the elements available with tag name 'p' \n              List<WebElement> elements = element.findElements(By.tagName(\"p\")); \n              for (WebElement e : elements) { \n                  System.out.println(e.getText()); \n              } \n          } finally { \n              driver.quit(); \n          } \n      } \n  }", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \n  import org.openqa.selenium.chrome.ChromeDriver; \n \n  public class activeElementTest { \n    public static void main(String[] args) { \n      WebDriver driver = new ChromeDriver(); \n      try { \n        driver.get(\"http://www.google.com\"); \n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\"); \n \n        // Get attribute of current active element \n        String attr = driver.switchTo().activeElement().getAttribute(\"title\"); \n        System.out.println(attr); \n      } finally { \n        driver.quit(); \n      } \n    } \n  } \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.Keys; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class HelloSelenium { \n  public static void main(String[] args) { \n    WebDriver driver = new FirefoxDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Enter text \"q\" and perform keyboard action \"Enter\" \n      driver.findElement(By.name(\"q\")).sendKeys(\"q\" + Keys.ENTER); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class clear { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://www.google.com\"); \n      // Store 'SearchInput' element \n      WebElement searchInput = driver.findElement(By.name(\"q\")); \n      searchInput.sendKeys(\"selenium\"); \n      // Clears the entered text \n      searchInput.clear(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"//navigates to url \n  driver.get(\"https://www.google.com/\"); \n \n  //returns true if element is enabled else returns false \n  boolean value = driver.findElement(By.name(\"btnK\")).isEnabled();", "meta": {"set_name": "infyData"}}
{"text":"//navigates to url \n driver.get(\"https://the-internet.herokuapp.com/checkboxes\"); \n \n //returns true if element is checked else returns false \n boolean value = driver.findElement(By.cssSelector(\"input[type='checkbox']:first-of-type\")).isSelected(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"//navigates to url \n driver.get(\"https://www.example.com\"); \n \n //returns TagName of the element \n String value = driver.findElement(By.cssSelector(\"h1\")).getTagName(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Navigate to url \ndriver.get(\"https://www.example.com\"); \n \n// Returns height, width, x and y coordinates referenced element \nRectangle res =  driver.findElement(By.cssSelector(\"h1\")).getRect(); \n \n// Rectangle class provides getX,getY, getWidth, getHeight methods \nSystem.out.println(res.getX()); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Navigate to Url \ndriver.get(\"https://www.example.com\"); \n \n// Retrieves the computed style property 'color' of linktext \nString cssValue = driver.findElement(By.linkText(\"More information...\")).getCssValue(\"color\"); \n", "meta": {"set_name": "infyData"}}
{"text":"// Navigate to url \ndriver.get(\"https://example.com\"); \n \n// Retrieves the text of the element \nString text = driver.findElement(By.cssSelector(\"h1\")).getText(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Select an <option> based upon the <select> element's internal index \nselectObject.selectByIndex(1); \n \n// Select an <option> based upon its value attribute \nselectObject.selectByValue(\"value1\"); \n \n// Select an <option> based upon its text \nselectObject.selectByVisibleText(\"Bread\"); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Return a List<WebElement> of options that have been selected \nList<WebElement> allSelectedOptions = selectObject.getAllSelectedOptions(); \n \n// Return a WebElement referencing the first selection option found by walking down the DOM \nWebElement firstSelectedOption = selectObject.getFirstSelectedOption(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Return a List<WebElement> of options that the <select> element contains \nList<WebElement> allAvailableOptions = selectObject.getOptions(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"// Deselect an <option> based upon the <select> element's internal index \nselectObject.deselectByIndex(1); \n \n// Deselect an <option> based upon its value attribute \nselectObject.deselectByValue(\"value1\"); \n \n// Deselect an <option> based upon its text \nselectObject.deselectByVisibleText(\"Bread\"); \n \n// Deselect all selected <option> elements \nselectObject.deselectAll(); \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.Keys; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class HelloSelenium { \n  public static void main(String[] args) { \n    WebDriver driver = new FirefoxDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n      Actions action = new Actions(driver); \n \n      // Store google search box WebElement \n      WebElement search = driver.findElement(By.name(\"q\")); \n \n      // Enters text \"qwerty\" with keyDown SHIFT key and after keyUp SHIFT key (QWERTYqwerty) \n      action.keyDown(Keys.SHIFT).sendKeys(search,\"qwerty\").keyUp(Keys.SHIFT).sendKeys(\"qwerty\").perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class clickAndHold { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Store 'google search' button web element \n      WebElement searchBtn = driver.findElement(By.linkText(\"Sign in\")); \n      Actions actionProvider = new Actions(driver); \n      // Perform click-and-hold action on the element \n      actionProvider.clickAndHold(searchBtn).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class contextClick { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Store 'google search' button web element \n      WebElement searchBtn = driver.findElement(By.linkText(\"Sign in\")); \n      Actions actionProvider = new Actions(driver); \n      // Perform context-click action on the element \n      actionProvider.contextClick(searchBtn).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class doubleClick { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Store 'google search' button web element \n      WebElement searchBtn = driver.findElement(By.linkText(\"Sign in\")); \n      Actions actionProvider = new Actions(driver); \n      // Perform double-click action on the element \n      actionProvider.doubleClick(searchBtn).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class moveToElement { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Store 'Gmail' anchor web element \n      WebElement gmailLink = driver.findElement(By.linkText(\"Gmail\")); \n      Actions actionProvider = new Actions(driver); \n      // Performs mouse move action onto the element \n      actionProvider.moveToElement(gmailLink).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class moveByOffset { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://google.com\"); \n \n      // Store 'Gmail' anchor web element \n      WebElement gmailLink = driver.findElement(By.linkText(\"Gmail\")); \n      // Capture x and y offset positions of element \n      int xOffset = gmailLink.getRect().getX(); \n      int yOffset = gmailLink.getRect().getY(); \n      Actions actionProvider = new Actions(driver); \n      // Performs mouse move action onto the offset position \n      actionProvider.moveByOffset(xOffset, yOffset).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class dragAndDrop { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://crossbrowsertesting.github.io/drag-and-drop\"); \n      // Store 'box A' as source element \n      WebElement sourceEle = driver.findElement(By.id(\"draggable\")); \n      // Store 'box B' as source element \n      WebElement targetEle = driver.findElement(By.id(\"droppable\")); \n      Actions actionProvider = new Actions(driver); \n      // Performs drag and drop action of sourceEle onto the targetEle \n      actionProvider.dragAndDrop(sourceEle, targetEle).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class dragAndDropBy { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://crossbrowsertesting.github.io/drag-and-drop\"); \n      // Store 'box A' as source element \n      WebElement sourceEle = driver.findElement(By.id(\"draggable\")); \n      // Store 'box B' as source element \n      WebElement targetEle = driver.findElement(By.id(\"droppable\")); \n      int targetEleXOffset = targetEle.getLocation().getX(); \n      int targetEleYOffset = targetEle.getLocation().getY(); \n      Actions actionProvider = new Actions(driver); \n      // Performs dragAndDropBy onto the  target element offset position \n      actionProvider.dragAndDropBy(sourceEle, targetEleXOffset, targetEleYOffset).build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class release { \n  public static void main(String[] args) { \n    WebDriver driver = new ChromeDriver(); \n    try { \n      // Navigate to Url \n      driver.get(\"https://crossbrowsertesting.github.io/drag-and-drop\"); \n      // Store 'box A' as source element \n      WebElement sourceEle = driver.findElement(By.id(\"draggable\")); \n      // Store 'box B' as source element \n      WebElement targetEle = driver.findElement(By.id(\"droppable\")); \n      Actions actionProvider = new Actions(driver); \n      actionProvider.clickAndHold(sourceEle).moveToElement(targetEle).build().perform(); \n      // Performs release event \n      actionProvider.release().build().perform(); \n    } finally { \n      driver.quit(); \n    } \n  } \n} \n  ", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.devtools.DevTools; \n \npublic void performanceMetricsExample() { \n    ChromeDriver driver = new ChromeDriver(); \n    DevTools devTools = driver.getDevTools(); \n    devTools.createSession(); \n    devTools.send(Performance.enable(Optional.empty())); \n    List<Metric> metricList = devTools.send(Performance.getMetrics()); \n \n    driver.get(\"https://google.com\"); \n    driver.quit(); \n \n    for(Metric m : metricList) { \n        System.out.println(m.getName() + \" = \" + m.getValue()); \n    } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.WebDriver; \n    import org.openqa.selenium.devtools.HasDevTools; \n    import org.openqa.selenium.devtools.NetworkInterceptor; \n    import org.openqa.selenium.remote.http.Contents; \n    import org.openqa.selenium.remote.http.Filter; \n    import org.openqa.selenium.remote.http.HttpResponse; \n    import org.openqa.selenium.remote.http.Route; \n \n    NetworkInterceptor interceptor = new NetworkInterceptor( \n      driver, \n      Route.matching(req -> true) \n        .to(() -> req -> new HttpResponse() \n          .setStatus(200) \n          .addHeader(\"Content-Type\", MediaType.HTML_UTF_8.toString()) \n          .setContent(utf8String(\"Creamy, delicious cheese!\")))); \n \n   driver.get(\"https://example-sausages-site.com\"); \n \n    String source = driver.getPageSource(); \n \n    assertThat(source).contains(\"delicious cheese!\"); \n	", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.*; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.devtools.DevTools; \n \npublic void jsExceptionsExample() { \n    ChromeDriver driver = new ChromeDriver(); \n    DevTools devTools = driver.getDevTools(); \n    devTools.createSession(); \n \n    List<JavascriptException> jsExceptionsList = new ArrayList<>(); \n    Consumer<JavascriptException> addEntry = jsExceptionsList::add; \n    devTools.getDomains().events().addJavascriptExceptionListener(addEntry); \n \n    driver.get(\"<your site url>\"); \n \n    WebElement link2click = driver.findElement(By.linkText(\"<your link text>\")); \n    ((JavascriptExecutor) driver).executeScript(\"arguments[0].setAttribute(arguments[1], arguments[2]);\", \n          link2click, \"onclick\", \"throw new Error('Hello, world!')\"); \n    link2click.click(); \n \n    for (JavascriptException jsException : jsExceptionsList) { \n        System.out.println(\"JS exception message: \" + jsException.getMessage()); \n        System.out.println(\"JS exception system information: \" + jsException.getSystemInformation()); \n        jsException.printStackTrace(); \n    } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"/*** \n * Tests login feature \n */ \npublic class Login { \n \n  public void testLogin() { \n    // fill login data on sign-in page \n    driver.findElement(By.name(\"user_name\")).sendKeys(\"userName\"); \n    driver.findElement(By.name(\"password\")).sendKeys(\"my supersecret password\"); \n    driver.findElement(By.name(\"sign-in\")).click(); \n \n    // verify h1 tag is \"Hello userName\" after login \n    driver.findElement(By.tagName(\"h1\")).isDisplayed(); \n    assertThat(driver.findElement(By.tagName(\"h1\")).getText(), is(\"Hello userName\")); \n  } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \n \n/** \n * Page Object encapsulates the Sign-in page. \n */ \npublic class SignInPage { \n  protected WebDriver driver; \n \n  // <input name=\"user_name\" type=\"text\" value=\"\"> \n  private By usernameBy = By.name(\"user_name\"); \n  // <input name=\"password\" type=\"password\" value=\"\"> \n  private By passwordBy = By.name(\"password\"); \n  // <input name=\"sign_in\" type=\"submit\" value=\"SignIn\"> \n  private By signinBy = By.name(\"sign_in\"); \n \n  public SignInPage(WebDriver driver){ \n    this.driver = driver; \n  } \n \n  /** \n    * Login as valid user \n    * \n    * @param userName \n    * @param password \n    * @return HomePage object \n    */ \n  public HomePage loginValidUser(String userName, String password) { \n    driver.findElement(usernameBy).sendKeys(userName); \n    driver.findElement(passwordBy).sendKeys(password); \n    driver.findElement(signinBy).click(); \n    return new HomePage(driver); \n  } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \n \n/** \n * Page Object encapsulates the Home Page \n */ \npublic class HomePage { \n  protected WebDriver driver; \n \n  // <h1>Hello userName</h1> \n  private By messageBy = By.tagName(\"h1\"); \n \n  public HomePage(WebDriver driver){ \n    this.driver = driver; \n    if (!driver.getTitle().equals(\"Home Page of logged in user\")) { \n      throw new IllegalStateException(\"This is not Home Page of logged in user,\" + \n            \" current page is: \" + driver.getCurrentUrl()); \n    } \n  } \n \n  /** \n    * Get message (h1 tag) \n    * \n    * @return String message text \n    */ \n  public String getMessageText() { \n    return driver.findElement(messageBy).getText(); \n  } \n \n  public HomePage manageProfile() { \n    // Page encapsulation to manage profile functionality \n    return new HomePage(driver); \n  } \n  /* More methods offering the services represented by Home Page \n  of Logged User. These methods in turn might return more Page Objects \n  for example click on Compose mail button could return ComposeMail class object */ \n} \n", "meta": {"set_name": "infyData"}}
{"text":"/*** \n * Tests login feature \n */ \npublic class TestLogin { \n \n  @Test \n  public void testLogin() { \n    SignInPage signInPage = new SignInPage(driver); \n    HomePage homePage = signInPage.loginValidUser(\"userName\", \"password\"); \n    assertThat(homePage.getMessageText(), is(\"Hello userName\")); \n  } \n \n} \n", "meta": {"set_name": "infyData"}}
{"text":"public class LoginPage { \n    private final WebDriver driver; \n \n    public LoginPage(WebDriver driver) { \n        this.driver = driver; \n \n        // Check that we're on the right page. \n        if (!\"Login\".equals(driver.getTitle())) { \n            // Alternatively, we could navigate to the login page, perhaps logging out first \n            throw new IllegalStateException(\"This is not the login page\"); \n        } \n    } \n \n    // The login page contains several HTML elements that will be represented as WebElements. \n    // The locators for these elements should only be defined once. \n        By usernameLocator = By.id(\"username\"); \n        By passwordLocator = By.id(\"passwd\"); \n        By loginButtonLocator = By.id(\"login\"); \n \n    // The login page allows the user to type their username into the username field \n    public LoginPage typeUsername(String username) { \n        // This is the only place that \"knows\" how to enter a username \n        driver.findElement(usernameLocator).sendKeys(username); \n \n        // Return the current page object as this action doesn't navigate to a page represented by another PageObject \n        return this;	 \n    } \n \n    // The login page allows the user to type their password into the password field \n    public LoginPage typePassword(String password) { \n        // This is the only place that \"knows\" how to enter a password \n        driver.findElement(passwordLocator).sendKeys(password); \n \n        // Return the current page object as this action doesn't navigate to a page represented by another PageObject \n        return this;	 \n    } \n \n    // The login page allows the user to submit the login form \n    public HomePage submitLogin() { \n        // This is the only place that submits the login form and expects the destination to be the home page. \n        // A seperate method should be created for the instance of clicking login whilst expecting a login failure. \n        driver.findElement(loginButtonLocator).submit(); \n \n        // Return a new page object representing the destination. Should the login page ever \n        // go somewhere else (for example, a legal disclaimer) then changing the method signature \n        // for this method will mean that all tests that rely on this behaviour won't compile. \n        return new HomePage(driver);	 \n    } \n \n    // The login page allows the user to submit the login form knowing that an invalid username and / or password were entered \n    public LoginPage submitLoginExpectingFailure() { \n        // This is the only place that submits the login form and expects the destination to be the login page due to login failure. \n        driver.findElement(loginButtonLocator).submit(); \n \n        // Return a new page object representing the destination. Should the user ever be navigated to the home page after submiting a login with credentials \n        // expected to fail login, the script will fail when it attempts to instantiate the LoginPage PageObject. \n        return new LoginPage(driver);	 \n    } \n \n    // Conceptually, the login page offers the user the service of being able to \"log into\" \n    // the application using a user name and password. \n    public HomePage loginAs(String username, String password) { \n        // The PageObject methods that enter username, password & submit login have already defined and should not be repeated here. \n        typeUsername(username); \n        typePassword(password); \n        return submitLogin(); \n    } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"/** \n * Takes a username and password, fills out the fields, and clicks \"login\". \n * @return An instance of the AccountPage \n */ \npublic AccountPage loginAsUser(String username, String password) { \n  WebElement loginField = driver.findElement(By.id(\"loginField\")); \n  loginField.clear(); \n  loginField.sendKeys(username); \n \n  // Fill out the password field. The locator we're using is \"By.id\", and we should \n  // have it defined elsewhere in the class. \n  WebElement passwordField = driver.findElement(By.id(\"password\")); \n  passwordField.clear(); \n  passwordField.sendKeys(password); \n \n  // Click the login button, which happens to have the id \"submit\". \n  driver.findElement(By.id(\"submit\")).click(); \n \n  // Create and return a new instance of the AccountPage (via the built-in Selenium \n  // PageFactory). \n  return PageFactory.newInstance(AccountPage.class); \n} \n", "meta": {"set_name": "infyData"}}
{"text":"/** \n * Takes a username and password, fills out the fields, and clicks \"login\". \n * @return An instance of the AccountPage \n */ \npublic AccountPage loginAsUser(String username, String password) { \n  WebElement loginField = driver.findElement(By.id(\"loginField\")); \n  loginField.clear(); \n  loginField.sendKeys(username); \n \n  // Fill out the password field. The locator we're using is \"By.id\", and we should \n  // have it defined elsewhere in the class. \n  WebElement passwordField = driver.findElement(By.id(\"password\")); \n  passwordField.clear(); \n  passwordField.sendKeys(password); \n \n  // Click the login button, which happens to have the id \"submit\". \n  driver.findElement(By.id(\"submit\")).click(); \n \n  // Create and return a new instance of the AccountPage (via the built-in Selenium \n  // PageFactory). \n  return PageFactory.newInstance(AccountPage.class); \n} \n", "meta": {"set_name": "infyData"}}
{"text":"public class GoogleSearchPage extends LoadableComponent<GoogleSearchPage> { \n  private final WebDriver driver; \n  private GSPFluentInterface gspfi; \n \n  public class GSPFluentInterface { \n    private GoogleSearchPage gsp; \n \n    public GSPFluentInterface(GoogleSearchPage googleSearchPage) { \n        gsp = googleSearchPage; \n    } \n \n    public GSPFluentInterface clickSearchButton() { \n        gsp.searchButton.click(); \n        return this; \n    } \n \n    public GSPFluentInterface setSearchString( String sstr ) { \n        clearAndType( gsp.searchField, sstr ); \n        return this; \n    } \n  } \n \n  @FindBy(id = \"gbqfq\") private WebElement searchField; \n  @FindBy(id = \"gbqfb\") private WebElement searchButton; \n  public GoogleSearchPage(WebDriver driver) { \n    gspfi = new GSPFluentInterface( this ); \n    this.get(); // If load() fails, calls isLoaded() until page is finished loading \n    PageFactory.initElements(driver, this); // Initialize WebElements on page \n  } \n \n  public GSPFluentInterface withFluent() { \n    return gspfi; \n  } \n \n  public void clickSearchButton() { \n    searchButton.click(); \n  } \n \n  public void setSearchString( String sstr ) { \n    clearAndType( searchField, sstr ); \n  } \n \n  @Override \n  protected void isLoaded() throws Error { \n    Assert.assertTrue(\"Google search page is not yet loaded.\", isSearchFieldVisible() ); \n  } \n \n  @Override \n  protected void load() { \n    if ( isSFieldPresent ) { \n      Wait<WebDriver> wait = new WebDriverWait( driver, Duration.ofSeconds(3) ); \n      wait.until( visibilityOfElementLocated( By.id(\"gbqfq\") ) ).click(); \n    } \n  } \n} \n", "meta": {"set_name": "infyData"}}
{"text":"package Newpack; \n \nimport org.openqa.selenium.By; \n \nimport org.openqa.selenium.WebDriver; \n \nimport org.openqa.selenium.WebElement; \n \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \nimport org.testng.annotations.Test; \n \npublic class Example  { \n \n            public String baseUrl= \"http://www.google.com/\"; \n \n            public WebDriver driver = new FirefoxDriver(); \n \n@Test \n \npublic void verifyHomePageTitle() { \n \ndriver.get(baseUrl); \n \n        // Find the text input element by its name \n \n        WebElement element = driver.findElement(By.name(\"q\")); \n \n        // Enter something to search for \n \n        element.sendKeys(\"Cheese!\"); \n \n \n \n        // Now submit the form. WebDriver will find the form for us from the element \n \n        element.submit(); \n \n        // Check the title of the page \n \n        System.out.println(\"Page title is: \" + driver.getTitle()); \n \n        driver.quit(); \n \n    } \n \n}", "meta": {"set_name": "Canary (en)"}}
{"text":"package com.test.webdriver; \n \nimport static org.testng.AssertJUnit.assertEquals; \n \nimport org.openqa.selenium.By; \n \nimport org.openqa.selenium.WebDriver; \n \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \nimport org.testng.annotations.AfterClass; \n \nimport org.testng.annotations.BeforeClass; \n \nimport org.testng.annotations.Test; \n \npublic class Driver { \n \nprivate WebDriver driver; \n \n @BeforeClass \n \n public void Startup(){ \n \n  driver = new FirefoxDriver(); \n \n } \n \n @Test (description=\"Google Login\") \n \n public void GoogleLogin() throws Exception{ \n \n  driver.get(\"http://www.gmail.com\"); \n \n  assertEquals(\"Sign in\", driver.findElement(By.id(\"signIn\")).getAttribute(\"value\")); \n \n  driver.findElement(By.id(\"Email\")).sendKeys(\"*********\"); \n \n  driver.findElement(By.id(\"Passwd\")).sendKeys(\"**********\"); \n \n  driver.findElement(By.id(\"signIn\")).click(); \n \n  Thread.sleep(10000); \n \n  driver.switchTo().frame(\"canvas_frame\"); \n \n  driver.findElement(By.id(\"gbgs4dn\")).click(); \n \n  driver.findElement(By.id(\"gb_71\")).click(); \n \n  driver.switchTo().defaultContent(); \n \nassertEquals(\"Sign in to Gmail\", driver.findElement(By.id(\"button\")).getText()); \n \n } \n \n@AfterClass \n \n public void teardown(){ \n \n   driver.quit(); \n \n } \n \n}", "meta": {"set_name": "Canary (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class Gmail_Login { \n/** \n* @param args \n*/ \n       public static void main(String[] args) { \n              \n// objects and variables instantiation \n              WebDriver driver = new FirefoxDriver(); \n              String appUrl = \"https://accounts.google.com\"; \n              \n// launch the firefox browser and open the application url \n              driver.get(appUrl); \n              \n// maximize the browser window \n              driver.manage().window().maximize(); \n              \n// declare and initialize the variable to store the expected title of the webpage. \n              String expectedTitle = \" Sign in - Google Accounts \"; \n              \n// fetch the title of the web page and save it into a string variable \n              String actualTitle = driver.getTitle(); \n              \n// compare the expected title of the page with the actual title of the page and print the result \n              if (expectedTitle.equals(actualTitle)) \n              { \n                     System.out.println(\"Verification Successful - The correct title is displayed on the web page.\"); \n              } \n             else \n              { \n                     System.out.println(\"Verification Failed - An incorrect title is displayed on the web page.\"); \n              } \n \n// enter a valid username in the email textbox \n              WebElement username = driver.findElement(By.id(\"Email\")); \n              username.clear(); \n              username.sendKeys(\"TestSelenium\"); \n              \n// enter a valid password in the password textbox \n              WebElement password = driver.findElement(By.id(\"Passwd\")); \n              password.clear(); \n              password.sendKeys(\"password123\"); \n              \n// click on the Sign in button \n              WebElement SignInButton = driver.findElement(By.id(\"signIn\")); \n              SignInButton.click(); \n              \n// close the web browser \n              driver.close(); \n              System.out.println(\"Test script executed successfully.\"); \n              \n// terminate the program \n              System.exit(0); \n       } \n}", "meta": {"set_name": "SoftwareTestingHelp (en)"}}
{"text":"public void explicitWaitForWinHandle(final WebDriver dvr, int timeOut, final boolean close) throws WeblivException \n{ \n \ntry { \nWait<WebDriver> wait = new WebDriverWait(dvr, timeOut); \nExpectedCondition<Boolean> condition = new ExpectedCondition<Boolean>() { \n \n@Override \npublic Boolean apply(WebDriver d) { \nint winHandleNum = d.getWindowHandles().size(); \n \nif (winHandleNum > 1) \n{ \n// Switch to new window opened \nfor (String winHandle : d.getWindowHandles()) \n{ \ndvr.switchTo().window(winHandle); \n \n// Close the delete window as it is not needed \nif (close && dvr.getTitle().equals(\"Demo Delete Window\")) \n{ \ndvr.findElement(By.name(\"ok\")).click(); \n} \n} \nreturn true; \n} \nreturn false; \n} \n};", "meta": {"set_name": "SoftwareTestingHelp (en)"}}
{"text":"// enter a valid username \ndriver.findElement(By.<em>id</em>(\"username\")).sendKeys(\"name\"); \n \n// enter a valid email address \ndriver.findElement(By.<em>id</em>(\"email\")).sendKeys(\"name@abc.com\"); \n \n// enter a valid password \ndriver.findElement(By.<em>id</em>(\"password\")).sendKeys(\"namepass\"); \n \n// re-enter the password \ndriver.findElement(By.<em>id</em>(\"passwordConf\")).sendKeys(\"namepass\"); \n \n// submit the form \ndriver.findElement(By.<em>id</em>(\"submit\")).submit();", "meta": {"set_name": "SoftwareTestingHelp (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n//comment the above line and uncomment below line to use Chrome \n//import org.openqa.selenium.chrome.ChromeDriver; \npublic class PG1 { \n \n \n    public static void main(String[] args) { \n        // declaration and instantiation of objects/variables \n    	System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n		WebDriver driver = new FirefoxDriver(); \n		//comment the above 2 lines and uncomment below 2 lines to use Chrome \n		//System.setProperty(\"webdriver.chrome.driver\",\"G:\\chromedriver.exe\"); \n		//WebDriver driver = new ChromeDriver(); \n    	 \n        String baseUrl = \"http://demo.guru99.com/test/newtours/\"; \n        String expectedTitle = \"Welcome: Mercury Tours\"; \n        String actualTitle = \"\"; \n \n        // launch Fire fox and direct it to the Base URL \n        driver.get(baseUrl); \n \n        // get the actual value of the title \n        actualTitle = driver.getTitle(); \n \n        /* \n         * compare the actual title of the page with the expected one and print \n         * the result as \"Passed\" or \"Failed\" \n         */ \n        if (actualTitle.contentEquals(expectedTitle)){ \n            System.out.println(\"Test Passed!\"); \n        } else { \n            System.out.println(\"Test Failed\"); \n        } \n       \n        //close Fire fox \n        driver.close(); \n       \n    } \n \n} \n \n", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class PG2 { \n    public static void main(String[] args) { \n    	System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n    	WebDriver driver = new FirefoxDriver(); \n        String baseUrl = \"http://www.facebook.com\"; \n        String tagName = \"\"; \n        \n        driver.get(baseUrl); \n        tagName = driver.findElement(By.id(\"email\")).getTagName(); \n        System.out.println(tagName); \n        driver.close(); \n        System.exit(0); \n} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class PG3 { \n    public static void main(String[] args) { \n    	System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n    	WebDriver driver = new FirefoxDriver(); \n        driver.get(\"http://www.popuptest.com/popuptest2.html\"); \n        driver.quit();  // using QUIT all windows will close \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class PG4 { \n	  public static void main(String[] args) { \n		  	System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\");  \n		  	WebDriver driver = new FirefoxDriver(); \n	        driver.get(\"http://demo.guru99.com/selenium/deprecated.html\"); \n	        driver.switchTo().frame(\"classFrame\"); \n	        driver.findElement(By.linkText(\"Deprecated\")).click(); \n	        driver.close(); \n	    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package mypackage; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class myclass { \n \n    public static void main(String[] args) { \n    	System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n        WebDriver driver = new FirefoxDriver(); \n        String alertMessage = \"\"; \n \n        driver.get(\"http://jsbin.com/usidix/1\"); \n        driver.findElement(By.cssSelector(\"input[value=\\"Go!\\"]\")).click(); \n        alertMessage = driver.switchTo().alert().getText(); \n        driver.switchTo().alert().accept(); \n       \n        System.out.println(alertMessage); \n        driver.quit(); \n       \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.util.List; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.testng.annotations.Test; \n \npublic class SiblingAndParentInXpath { \n \n    @Test \n \n    public void testSiblingAndParentInXpath(){ \n \n    	WebDriver driver; \n    	String driverPath = \"C:\\geckodriver.exe\"; \n    	System.setProperty(\"webdriver.gecko.driver\", driverPath); \n        driver = new FirefoxDriver();        \n        \n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n        driver.get(\"http://demo.guru99.com/test/guru99home/\"); \n \n        //Search element inside 'Popular course' which are sibling of control 'SELENIUM' ,Here first we will find a h2 whose text is ''A few of our most popular courses' ,then we move to its parent element which is a 'div' , inside this div we will find a link whose text is 'SELENIUM' then at last we will find all of the sibling elements of this link('SELENIUM') \n        \n        List <WebElement> dateBox = driver.findElements(By.xpath(\"//h2[contains(text(),'A few of our most popular courses')]/parent::div//div[//a[text()='SELENIUM']]/following-sibling::div[@class='rt-grid-2 rt-omega']\")); \n \n        //Print all the which are sibling of the the element named as 'SELENIUM' in 'Popular course' \n        for (WebElement webElement : dateBox) { \n            System.out.println(webElement.getText()); \n        }     \n \n        driver.close(); \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.util.List; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.Keys; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.testng.annotations.Test; \n \npublic class AncestorInXpath{ \n \n@Test \n \n    public void testAncestorInXpath(){ \n \n        WebDriver driver = new FirefoxDriver();             \n		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n        driver.get(\"http://demo.guru99.com/test/guru99home/\"); \n \n        //Search All elements in 'Popular course' section \n		//with the help of ancestor of the anchor whose text is 'SELENIUM' \n \n        List <WebElement> dateBox = driver.findElements(By.xpath(\"//div[.//a[text()='SELENIUM']]/ancestor::div[@class='rt-grid-2 rt-omega']/following-sibling::div\")); \n \n        //Print all the which are sibling of the element named as 'SELENIUM' in 'Popular course' \n \n        for (WebElement webElement : dateBox) { \n            System.out.println(webElement.getText()); \n        } \n     \n        driver.quit(); \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class AND_OR { \n \n	public static void main(String[] args) { \n		WebDriver driver; \n		WebElement w,x; \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	//Search element using OR in the xpath \n     	 w=driver.findElement(By.xpath(\"//*[@type='submit' OR @name='btnReset']\")); \n      	 \n     	 //Print the text of the element \n			System.out.println(w.getText()); \n			 \n		//Search element using AND in the xpath \n			x=driver.findElement(By.xpath(\"//input[@type='submit' and @name='btnLogin']\"));	 \n			 \n		//Print the text of the searched element \n			System.out.println(x.getText()); \n			 \n	//Close the browser \n     driver.quit(); \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \n \npublic class Parent { \n \n	public static void main(String[] args) { \n		WebDriver driver; \n		WebElement w; \n		 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	 //Search the element by using PARENT \n     	 w=driver.findElement(By.xpath(\"//*[@id='rt-feature']//parent::div\")); \n      	 \n		//Print the text of the searched element \n     	 System.out.println(w.getText()); \n	 \n	//Close the browser \n     driver.quit(); \n \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \n \npublic class StartsWith { \n \n	public static void main(String[] args) { \n		WebDriver driver; \n		WebElement w; \n		 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	 //Search the element by using starts-with \n     	 w=driver.findElement(By.xpath(\"//label[starts-with(@id,'message')]\")); \n     	 \n     	 //Print the text of the searched element \n     	System.out.println(w.getText()); \n     	 \n     	//Close the browser \n	        driver.quit(); \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \n \npublic class Following { \n \n	public static void main(String[] args) { \n		WebDriver driver; \n		WebElement w; \n		 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	 //Search the element by using Following method \n     	 w=driver.findElement(By.xpath(\"//*[@type='text']//following::input\")); \n      	 \n		//Print the text of the searched element \n     	 System.out.println(w.getText()); \n	 \n	//Close the browser \n     driver.quit(); \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \n \npublic class Preceding { \n \n	public static void main(String[] args) { \n		 \n		WebDriver driver; \n		WebElement w; \n		 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	 //Search the element by using preceding method \n     	 w=driver.findElement(By.xpath(\"//*[@type='submit']//preceding::input\")); \n      	 \n		//Print the searched element \n     	 System.out.println(w.getText()); \n	 \n	//Close the browser \n     driver.quit(); \n \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \n \npublic class Descendant { \n \n	public static void main(String[] args) { \n		WebDriver driver; \n		WebElement w; \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	 //Search the element by using descendant method \n     	 w=driver.findElement(By.xpath(\"//*[@id='rt-feature']//descendant::a\")); \n      	 \n		//Print the searched element \n     	 System.out.println(w.getText()); \n	 \n	//Close the browser \n     driver.quit(); \n \n	} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.testng.annotations.Test; \npublic class AppTest { \n	 \n	protected WebDriver driver; \n	@Test \n	public void guru99tutorials() throws InterruptedException \n	{ \n	System.setProperty (\"webdriver.chrome.driver\",\".\\chromedriver.exe\" ); \n	driver = new ChromeDriver(); \n	driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS) ; \n	String eTitle = \"Demo Guru99 Page\"; \n	String aTitle = \"\" ; \n	// launch Chrome and redirect it to the Base URL \n	driver.get(\"http://demo.guru99.com/test/guru99home/\" ); \n	//Maximizes the browser window \n	driver.manage().window().maximize() ; \n	//get the actual value of the title \n	aTitle = driver.getTitle(); \n	//compare the actual title with the expected title \n	if (aTitle.equals(eTitle)) \n	{ \n	System.out.println( \"Test Passed\") ; \n	} \n	else { \n	System.out.println( \"Test Failed\" ); \n	} \n	//close browser \n	driver.close(); \n} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.support.ui.ExpectedConditions; \nimport org.openqa.selenium.support.ui.WebDriverWait; \nimport org.testng.annotations.Test; \n \npublic class AppTest2 { \n	protected WebDriver driver; \n	@Test \n	public void guru99tutorials() throws InterruptedException \n	{ \n	System.setProperty (\"webdriver.chrome.driver\",\".\\chromedriver.exe\" ); \n	driver = new ChromeDriver(); \n	WebDriverWait wait=new WebDriverWait(driver, 20); \n	String eTitle = \"Demo Guru99 Page\"; \n	String aTitle = \"\" ; \n	// launch Chrome and redirect it to the Base URL \n	driver.get(\"http://demo.guru99.com/test/guru99home/\" ); \n	//Maximizes the browser window \n	driver.manage().window().maximize() ; \n	//get the actual value of the title \n	aTitle = driver.getTitle(); \n	//compare the actual title with the expected title \n	if (aTitle.contentEquals(eTitle)) \n	{ \n	System.out.println( \"Test Passed\") ; \n	} \n	else { \n	System.out.println( \"Test Failed\" ); \n	} \n	WebElement guru99seleniumlink; \n	guru99seleniumlink= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath( \"/html/body/div[1]/section/div[2]/div/div[1]/div/div[1]/div/div/div/div[2]/div[2]/div/div/div/div/div[1]/div/div/a/i\"))); \n	guru99seleniumlink.click(); \n	} \n	 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.testng.annotations.Test; \nimport java.util.NoSuchElementException; \nimport java.util.concurrent.TimeUnit; \nimport java.util.function.Function; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.support.ui.ExpectedConditions; \nimport org.openqa.selenium.support.ui.FluentWait; \nimport org.openqa.selenium.support.ui.Wait; \nimport org.openqa.selenium.support.ui.WebDriverWait; \nimport org.testng.annotations.Test; \n \npublic class AppTest3 { \n	protected WebDriver driver; \n	@Test \n	public void guru99tutorials() throws InterruptedException \n	{ \n	System.setProperty (\"webdriver.chrome.driver\",\".\\chromedriver.exe\" ); \n	String eTitle = \"Demo Guru99 Page\"; \n	String aTitle = \"\" ; \n	driver = new ChromeDriver(); \n	// launch Chrome and redirect it to the Base URL \n	driver.get(\"http://demo.guru99.com/test/guru99home/\" ); \n	//Maximizes the browser window \n	driver.manage().window().maximize() ; \n	//get the actual value of the title \n	aTitle = driver.getTitle(); \n	//compare the actual title with the expected title \n	if (aTitle.contentEquals(eTitle)) \n	{ \n	System.out.println( \"Test Passed\") ; \n	} \n	else { \n	System.out.println( \"Test Failed\" ); \n		} \n	 \n	Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)							 \n			.withTimeout(30, TimeUnit.SECONDS) 			 \n			.pollingEvery(5, TimeUnit.SECONDS) 			 \n			.ignoring(NoSuchElementException.class); \n	WebElement clickseleniumlink = wait.until(new Function<WebDriver, WebElement>(){ \n	 \n		public WebElement apply(WebDriver driver ) { \n			return driver.findElement(By.xpath(\"/html/body/div[1]/section/div[2]/div/div[1]/div/div[1]/div/div/div/div[2]/div[2]/div/div/div/div/div[1]/div/div/a/i\")); \n		} \n	}); \n	//click on the selenium link \n	clickseleniumlink.click(); \n	//close~ browser \n	driver.close() ; \n	} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package test; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \nimport org.openqa.selenium.Alert; \n \npublic class DobuleClickDemo { \npublic static void main(String[] args) throws InterruptedException { \n \n	WebDriver driver; \n	System.setProperty(\"webdriver.chrome.driver\",\"X://chromedriver.exe\"); \n	 driver= new ChromeDriver(); \n \n//Launch the Application Under Test (AUT) \ndriver.get(\"http://demo.guru99.com/test/simple_context_menu.html\"); \ndriver.manage().window().maximize(); \n \ndriver.get(\"http://demo.guru99.com/test/simple_context_menu.html\"); \ndriver.manage().window().maximize(); \n//Double click the button to launch an alertbox \nActions action = new Actions(driver); \nWebElement link =driver.findElement(By.xpath(\"//button[text()='Double-Click Me To See Alert']\")); \naction.doubleClick(link).perform(); \n//Switch to the alert box and click on OK button \nAlert alert = driver.switchTo().alert(); \nSystem.out.println(\"Alert Text\n\" +alert.getText()); \nalert.accept(); \n//Closing the driver instance \n//driver.quit(); \n \n} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package test; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \n \n \npublic class ContextClick { \npublic static void main(String[] args) throws InterruptedException { \n \n	WebDriver driver; \n	System.setProperty(\"webdriver.chrome.driver\",\"X://chromedriver.exe\"); \n	 driver= new ChromeDriver(); \n \n//Launch the Application Under Test (AUT) \ndriver.get(\"http://demo.guru99.com/test/simple_context_menu.html\"); \ndriver.manage().window().maximize(); \n \n// Right click the button to launch right click menu options \nActions action = new Actions(driver); \n \nWebElement link = driver.findElement(By.cssSelector(\".context-menu-one\")); \naction.contextClick(link).perform(); \n// Click on Edit link on the displayed menu options \nWebElement element = driver.findElement(By.cssSelector(\".context-menu-icon-copy\")); \nelement.click(); \n// Accept the alert displayed \n//driver.switchTo().alert().accept(); \n// Closing the driver instance \n//driver.quit(); \n \n} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.io.IOException; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \npublic class AutoITDemo { \n    public static void main(String[] args) throws IOException { \n        System.setProperty(\"webdriver.chrome.driver\", \"D:\\ chromedriver.exe\");; \n        WebDriver driver = new ChromeDriver(); \n        driver.get(\"http://demo.guru99.com/test/basic_auth.php\"); \n        //Passing the AutoIt Script to Selenium	 \n        Runtime.getRuntime().exec(\"D:\\Data_Personal\\ProxyAuthentication.exe\"); \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import java.io.IOException; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \npublic class AlertsDemo { \n    public static void main(String args[]) throws IOException { \n        System.setProperty(\"webdriver.chrome.driver\", \"D:\\Data_Personal\\Software\\chromedriver_win32\\chromedriver.exe\");; \n        WebDriver driver = new ChromeDriver(); \n        driver.get(\"http://demo.guru99.com/test/basic_auth.php\"); \n        // Handling Username alert \n        driver.switchTo().alert().sendKeys(\"guru99\"); \n        driver.switchTo().alert().accept(); \n        // Handling Password alert \n        driver.switchTo().alert().sendKeys(\"guru99\"); \n        driver.switchTo().alert().accept(); \n    } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"Selenium.prototype.doTextUpperCase = function(locator, text) { \n     // Here findElement is itself capable to handle all type of locator(xpath,css,name,id,className), We just need to pass the locator text \n     var element = this.page().findElement(locator); \n      \n     // Create the text to type \n     text = text.toUpperCase(); \n      \n     // Replace the element text with the new text \n     this.page().replaceText(element, text); \n    };", "meta": {"set_name": "guru99 (en)"}}
{"text":"Selenium.prototype.assertTextUpperCase = function(locator, text) { \n     // All locator-strategies are automatically handled by \"findElement\" \n     var element = this.page().findElement(locator); \n      \n     // Create the text to verify \n     text = text.toUpperCase(); \n      \n     // Get the actual element value \n     var actualValue = element.value; \n    \n     // Make sure the actual value matches the expected \n     Assert.matches(expectedValue, actualValue); \n    }; \n    \n    Selenium.prototype.isTextEqual = function(locator, text) { \n     return this.getText(locator).value===text; \n    }; \n    \n    Selenium.prototype.getTextValue = function(locator, text) { \n     return this.getText(locator).value; \n    };", "meta": {"set_name": "guru99 (en)"}}
{"text":"// The \"inDocument\" is a document you are searching. \n    PageBot.prototype.locateElementByUpperCase = function(text, inDocument) { \n     // Create the text to search for \n     var expectedValue = text.toUpperCase(); \n      \n     // Loop through all elements, looking for ones that have \n     // a value === our expected value \n     var allElements = inDocument.getElementsByTagName(\"*\"); \n// This star '*' is a kind of regular expression it will go through every element (in HTML DOM every element surely have a tag name like<body>,<a>,<h1>,<table>,<tr>,<td> etc. ). Here our motive is to find an element which matched with the Upper Case text we have passed so we will search it with all elements and when we get match we will have the correct web element. \n     for (var i = 0; i < allElements.length; i++) { \n     var testElement = allElements[i]; \n     if (testElement.innerHTML && testElement.innerHTML === expectedValue) { \n     return testElement; \n     } \n     } \n     return null; \n    };", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.Dimension; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class Resize { \n \n	public static void main(String args[]) throws InterruptedException \n	{ \n		WebDriver driver; \n	 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	Dimension d = new Dimension(300,1080); \n     	//Resize current window to the set dimension \n     	   driver.manage().window().setSize(d); \n     	        \n     	 //To Delay execution for 10 sec. as to view the resize browser \n     	 Thread.sleep(10000); \n     	       \n     	 //Close the browser \n     	 driver.quit(); \n	}	 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class Maximize { \n \n	public static void main(String args[]) throws InterruptedException \n	{ \n		WebDriver driver; \n		 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	     	//Resize current window to the set dimension \n     	        driver.manage().window().maximize(); \n     	       \n     	       //To Delay execution for 10 sec. as to view the maximize browser \n     	        Thread.sleep(10000); \n     	       \n     	        //Close the browser \n     	        driver.quit(); \n	}	 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.Point; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class Minimize { \n \n	public static void main(String args[]) throws InterruptedException \n	{ \n		WebDriver driver; \n	 \n		System.setProperty(\"webdriver.chrome.driver\",\"E://Selenium//Selenium_Jars//chromedriver.exe\"); \n		 driver= new ChromeDriver(); \n 		 \n         // Launch the application \n     	 driver.get(\"https://www.guru99.com/\"); \n     	 \n     	Point p = new Point(0,3000); \n     	 \n     	//Minimize the current window to the set position \n     	        driver.manage().window().setPosition(p); \n     	        \n     	       //To Delay execution for 10 sec. as to view the minimize browser \n     	        //you can view in the taskbar below of the screen. \n     	        Thread.sleep(10000); \n     	        \n     	        //Close the browser \n     	        driver.quit(); \n	}	 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"// Create an object of desired capabilities class with Chrome driver \nDesiredCapabilities SSLCertificate = DesiredCapabilities.chrome(); \n// Set the pre defined capability – ACCEPT_SSL_CERTS value to true \nSSLCertificate.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true); \n// Open a new instance of chrome driver with the desired capability \nWebDriver driver = new ChromeDriver(SSLCertificate);", "meta": {"set_name": "guru99 (en)"}}
{"text":"package adblock; \nimport java.io.File; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.remote.DesiredCapabilities; \n \n \npublic class AdblockDemo { \npublic static void main(String[] args)  { \n	 \n	System.setProperty(\"webdriver.chrome.driver\",\"X://chromedriver.exe\");		 \n	ChromeOptions options = new ChromeOptions(); \n	options.addExtensions(new File(\"X://extension_3_40_1_0.crx\")); \n	DesiredCapabilities capabilities = new DesiredCapabilities(); \n	capabilities.setCapability(ChromeOptions.CAPABILITY, options); \n	options.merge(capabilities); \n	ChromeDriver driver = new ChromeDriver(options); \n	driver.get(\"http://demo.guru99.com/test/simple_context_menu.html\"); \n	driver.manage().window().maximize(); \n	//driver.quit(); \n	} \n	 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package test; \nimport java.io.File; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.remote.DesiredCapabilities; \n \npublic class Incognito{ \npublic static void main(String[] args) { \n	// TODO Auto-generated method stub \n	System.setProperty(\"webdriver.chrome.driver\",\"X://chromedriver.exe\"); \n	ChromeOptions options = new ChromeOptions(); \n	options.addArguments(\"--incognito\"); \n	DesiredCapabilities capabilities = new DesiredCapabilities(); \n	capabilities.setCapability(ChromeOptions.CAPABILITY, options); \n	options.merge(capabilities); \n	ChromeDriver driver = new ChromeDriver(options);		 \n	driver.get(\"http://demo.guru99.com/test/simple_context_menu.html\"); \n	driver.manage().window().maximize();		 \n	//driver.quit(); \n	} \n	}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package test; \nimport java.io.File; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.remote.DesiredCapabilities; \n \n \npublic class HeadlessModeDemo { \n	public static void main(String[] args) { \n		// TODO Auto-generated method stub \n		System.setProperty(\"webdriver.chrome.driver\",\"X://chromedriver.exe\"); \n		ChromeOptions options = new ChromeOptions(); \n		options.addArguments(\"--headless\"); \n		DesiredCapabilities capabilities = new DesiredCapabilities(); \n		capabilities.setCapability(ChromeOptions.CAPABILITY, options); \n		options.merge(capabilities); \n		ChromeDriver driver = new ChromeDriver(options);		 \n		driver.get(\"http://demo.guru99.com/\"); \n		driver.manage().window().maximize(); \n		String title = driver.getTitle(); \n		System.out.println(\"Page Title: \" +title); \n		driver.quit(); \n		} \n \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \npublic class RefreshDemo { \npublic static void main(String args[]) throws InterruptedException \n{ \nSystem.setProperty(\"webdriver.chrome.driver\", \"D: \\chromedriver.exe\"); \nWebDriver driver = new ChromeDriver(); \ndriver.get(\"http://demo.guru99.com/selenium/guru99home/\"); \ndriver.manage().window().maximize(); \ndriver.navigate().refresh(); \ndriver.close(); \n} \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package com.sample.stepdefinitions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class NameDemo { \n \npublic static void main(String[] args) { \n// TODO Auto-generated method stub \n \nSystem.setProperty(\"webdriver.chrome.driver\", \"D:\\3rdparty\\chrome\\chromedriver.exe\"); \nWebDriver driver = new ChromeDriver(); \ndriver.manage().window().maximize(); \n \ndriver.get(\"http://demo.guru99.com/test/ajax.html\"); \n \n// Find the radio button for “No” using its ID and click on it \ndriver.findElement(By.id(\"no\")).click(); \n	 \n//Click on Check Button \ndriver.findElement(By.id(\"buttoncheck\")).click(); \n \n} \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package com.sample.stepdefinitions; \n \nimport java.util.List; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class NameDemo { \n \npublic static void main(String[] args) { \n \n    System.setProperty(\"webdriver.chrome.driver\", \"X://chromedriver.exe\"); \n    WebDriver driver = new ChromeDriver(); \n    driver.get(\"http://demo.guru99.com/test/ajax.html\"); \n    List<WebElement> elements = driver.findElements(By.name(\"name\")); \n    System.out.println(\"Number of elements:\" +elements.size()); \n \n    for (int i=0; i<elements.size();i++){ \n      System.out.println(\"Radio button text:\" + elements.get(i).getAttribute(\"value\")); \n    } \n  } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By;		 \nimport org.openqa.selenium.WebDriver;		 \nimport org.openqa.selenium.chrome.ChromeDriver;		 \nimport org.openqa.selenium.*;		 \n \npublic class Form {				 \n    public static void main(String[] args) {									 \n    		 \n    	// declaration and instantiation of objects/variables		 \n        System.setProperty(\"webdriver.chrome.driver\",\"G:\\chromedriver.exe\");					 \n        WebDriver driver = new ChromeDriver();					 \n        		 \n        String baseUrl = \"http://demo.guru99.com/test/login.html\";					 \n        driver.get(baseUrl);					 \n \n        // Get the WebElement corresponding to the Email Address(TextField)		 \n        WebElement email = driver.findElement(By.id(\"email\"));							 \n \n        // Get the WebElement corresponding to the Password Field		 \n        WebElement password = driver.findElement(By.name(\"passwd\"));							 \n \n        email.sendKeys(\"abcd@gmail.com\");					 \n        password.sendKeys(\"abcdefghlkjl\");					 \n        System.out.println(\"Text Field Set\");					 \n         \n        // Deleting values in the text box		 \n        email.clear();			 \n        password.clear();			 \n        System.out.println(\"Text Field Cleared\");					 \n \n        // Find the submit button		 \n        WebElement login = driver.findElement(By.id(\"SubmitLogin\"));							 \n                    		 \n        // Using click method to submit form		 \n        email.sendKeys(\"abcd@gmail.com\");					 \n        password.sendKeys(\"abcdefghlkjl\");					 \n        login.click();			 \n        System.out.println(\"Login Done with Click\");					 \n        		 \n        //using submit method to submit the form. Submit used on password field		 \n        driver.get(baseUrl);					 \n        driver.findElement(By.id(\"email\")).sendKeys(\"abcd@gmail.com\");							 \n        driver.findElement(By.name(\"passwd\")).sendKeys(\"abcdefghlkjl\");							 \n        driver.findElement(By.id(\"SubmitLogin\")).submit();					 \n        System.out.println(\"Login Done with Submit\");					 \n         \n		//driver.close();		 \n        		 \n    }		 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"import org.openqa.selenium.By;		 \nimport org.openqa.selenium.WebDriver;		 \nimport org.openqa.selenium.chrome.ChromeDriver;		 \nimport org.openqa.selenium.*;		 \n \npublic class Form {				 \n    public static void main(String[] args) {									 \n    		 \n    	// declaration and instantiation of objects/variables		 \n        System.setProperty(\"webdriver.chrome.driver\",\"G:\\chromedriver.exe\");					 \n        WebDriver driver = new ChromeDriver();					 \n \n        driver.get(\"http://demo.guru99.com/test/radio.html\");					 \n        WebElement radio1 = driver.findElement(By.id(\"vfb-7-1\"));							 \n        WebElement radio2 = driver.findElement(By.id(\"vfb-7-2\"));							 \n        		 \n        //Radio Button1 is selected		 \n        radio1.click();			 \n        System.out.println(\"Radio Button Option 1 Selected\");					 \n        		 \n        //Radio Button1 is de-selected and Radio Button2 is selected		 \n        radio2.click();			 \n        System.out.println(\"Radio Button Option 2 Selected\");					 \n        		 \n        // Selecting CheckBox		 \n        WebElement option1 = driver.findElement(By.id(\"vfb-6-0\"));							 \n \n        // This will Toggle the Check box 		 \n        option1.click();			 \n \n        // Check whether the Check box is toggled on 		 \n        if (option1.isSelected()) {					 \n            System.out.println(\"Checkbox is Toggled On\");					 \n \n        } else {			 \n            System.out.println(\"Checkbox is Toggled Off\");					 \n        }		 \n         \n        		 \n        		 \n        //Selecting Checkbox and using isSelected Method		 \n        driver.get(\"http://demo.guru99.com/test/facebook.html\");					 \n        WebElement chkFBPersist = driver.findElement(By.id(\"persist_box\"));							 \n        for (int i=0; i<2; i++) {											 \n            chkFBPersist.click (); 			 \n            System.out.println(\"Facebook Persists Checkbox Status is -  \"+chkFBPersist.isSelected());							 \n        }		 \n		//driver.close();		 \n        		 \n    }		 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.By;		 \nimport org.openqa.selenium.WebDriver;		 \nimport org.openqa.selenium.chrome.ChromeDriver;		 \n \npublic class MyClass {				 \n    		 \n    public static void main(String[] args) {									 \n        String baseUrl = \"https://www.facebook.com/login/identify?ctx=recover\";					 \n        System.setProperty(\"webdriver.chrome.driver\",\"G:\\chromedriver.exe\");					 \n        WebDriver driver = new ChromeDriver();					 \n        		 \n        driver.get(baseUrl);					 \n        //click on the \"Facebook\" logo on the upper left portion		 \n			driver.findElement(By.cssSelector(\"a[title=\"Go to Facebook home\"]\")).click();					 \n \n			//verify that we are now back on Facebook's homepage		 \n			if (driver.getTitle().equals(\"Facebook - log in or sign up\")) {							 \n            System.out.println(\"We are back at Facebook's homepage\");					 \n        } else {			 \n            System.out.println(\"We are NOT in Facebook's homepage\");					 \n        }		 \n				driver.close();		 \n \n    }		 \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newpackage; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \nimport org.openqa.selenium.By; \n \npublic class accessDropDown { \n public static void main(String[] args) { \n		System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n	    String baseURL = \"http://demo.guru99.com/test/newtours/register.php\"; \n	    WebDriver driver = new FirefoxDriver(); \n		driver.get(baseURL); \n \n		Select drpCountry = new Select(driver.findElement(By.name(\"country\"))); \n		drpCountry.selectByVisibleText(\"ANTARCTICA\"); \n \n		//Selecting Items in a Multiple SELECT elements \n		driver.get(\"http://jsbin.com/osebed/2\"); \n		Select fruits = new Select(driver.findElement(By.id(\"fruits\"))); \n		fruits.selectByVisibleText(\"Banana\"); \n		fruits.selectByIndex(1); \n } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Action; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class PG7 { \n    \n    public static void main(String[] args) { \n        String baseUrl = \"http://demo.guru99.com/test/newtours/\"; \n        System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n                WebDriver driver = new FirefoxDriver(); \n \n                driver.get(baseUrl);           \n                WebElement link_Home = driver.findElement(By.linkText(\"Home\")); \n                WebElement td_Home = driver \n                        .findElement(By \n                        .xpath(\"//html/body/div\" \n                        + \"/table/tbody/tr/td\" \n                        + \"/table/tbody/tr/td\" \n                        + \"/table/tbody/tr/td\" \n                        + \"/table/tbody/tr\"));    \n                 \n                Actions builder = new Actions(driver); \n                Action mouseOverHome = builder \n                        .moveToElement(link_Home) \n                        .build(); \n                 \n                String bgColor = td_Home.getCssValue(\"background-color\"); \n                System.out.println(\"Before hover: \" + bgColor);        \n                mouseOverHome.perform();        \n                bgColor = td_Home.getCssValue(\"background-color\"); \n                System.out.println(\"After hover: \" + bgColor); \n                driver.close(); \n        } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"public static void main(String[] args) { \nString baseUrl = \"http://www.facebook.com/\"; \nWebDriver driver = new FirefoxDriver(); \n \ndriver.get(baseUrl); \nWebElement txtUsername = driver.findElement(By.id(\"email\")); \n \nActions builder = new Actions(driver); \nAction seriesOfActions = builder \n	.moveToElement(txtUsername) \n	.click() \n	.keyDown(txtUsername, Keys.SHIFT) \n	.sendKeys(txtUsername, \"hello\") \n	.keyUp(txtUsername, Keys.SHIFT) \n	.doubleClick(txtUsername) \n	.contextClick() \n	.build(); \n	 \nseriesOfActions.perform() ; \n \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class PG9 { \n    public static void main(String[] args) { \n        System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n        String baseUrl = \"http://demo.guru99.com/test/upload/\"; \n        WebDriver driver = new FirefoxDriver(); \n \n        driver.get(baseUrl); \n        WebElement uploadElement = driver.findElement(By.id(\"uploadfile_0\")); \n \n        // enter the file path onto the file-selection input field \n        uploadElement.sendKeys(\"C:\\newhtml.html\"); \n \n        // check the \"I accept the terms of service\" check box \n        driver.findElement(By.id(\"terms\")).click(); \n \n        // click the \"UploadFile\" button \n        driver.findElement(By.name(\"send\")).click(); \n        } \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"package newproject; \nimport java.io.IOException; \n \nimport org.openqa.selenium.*; \nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class PG8 { \n    public static void main(String[] args) { \n        \n        System.setProperty(\"webdriver.gecko.driver\",\"C:\\geckodriver.exe\"); \n                String baseUrl = \"http://demo.guru99.com/test/yahoo.html\"; \n        WebDriver driver = new FirefoxDriver(); \n \n        driver.get(baseUrl); \n        WebElement downloadButton = driver.findElement(By \n        .id(\"messenger-download\")); \n        String sourceLocation = downloadButton.getAttribute(\"href\"); \n        String wget_command = \"cmd /c C:\\Wget\\wget.exe -P D: --no-check-certificate \" + sourceLocation; \n \n        try { \n        Process exec = Runtime.getRuntime().exec(wget_command); \n        int exitVal = exec.waitFor(); \n        System.out.println(\"Exit value: \" + exitVal); \n        } catch (InterruptedException | IOException ex) { \n        System.out.println(ex.toString()); \n        } \n        driver.close(); \n        } \n        \n}", "meta": {"set_name": "guru99 (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “E:/chromedriver.exe”); \nWebDriver driver=new ChromeDriver(); \ndriver.manage().window().maximize(); \ndriver.get(“https://en.wikipedia.org/wiki/Selenium_(software)#Selenium_WebDriver”); \ndriver.findElement(By.linkText(“Create account”)).click(); \nString url1=driver.getCurrentUrl(); \n//System.out.println(url1); \n \nif (url1.contains(“wikipedia.org”)){ \nSystem.out.println(“1st Verification: “+ “It is an Internal Link – Passed”); \n} \nelse{ \nSystem.out.println(“1st Verification: “+ “It is Not an Internal Link – Failed”); \n} \n \ndriver.navigate().back(); \n//Thread.sleep(4000); \n \ndriver.findElement(By.partialLinkText(“selenium.dev”)).click(); \n//Thread.sleep(4000); \nString url2=driver.getCurrentUrl(); \n//System.out.println(url2); \n \nif (url2.contains(“selenium.dev”)) { \nSystem.out.println(“2nd Verification: “+ “It is an External Link – Passed”); \n} \nelse \n{ \nSystem.out.println(“2nd Verification: “+ “It is Not an External Link – Failed”); \n} \ndriver.close(); \n} \n}", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “E:/chromedriver.exe”); \nWebDriver driver=new ChromeDriver(); \ndriver.manage().window().maximize(); \ndriver.get(“https://www.google.com”); \ntry{ \nboolean linkExistence=driver.findElement(By.linkText(“abcd”)).isDisplayed(); \n \nif (linkExistence == true){ \nSystem.out.println(“Gmail Link Exists – Passed”); \n} \n} \ncatch(NoSuchElementException e){ \nSystem.out.println(“Gmail Link Not Exists – Failed”); \n} \ndriver.close();", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “C:\\Users\\user\\Downloads\\chromedriver.exe”); \nWebDriver driver = new ChromeDriver(); \ndriver.manage().window().maximize(); \n \ndriver.get(“https://gcreddy.com/project/admin/login.php”); \n \ndriver.findElement(By.name(“username”)).sendKeys(“gcreddy”); \ndriver.findElement(By.name(“password”)).sendKeys(“Temp@2020”); \ndriver.findElement(By.id(“tdb1”)).click(); \nThread.sleep(2000); \n \ntry { \nboolean linkExists = driver.findElement(By.linkText(“Logoff”)).isDisplayed(); \n \nif (linkExists == true) { \nSystem.out.println(“Admin Login is Successful – Passed”); \n} \n} \ncatch (NoSuchElementException e1) { \nSystem.out.println(“Admin Login is Unsuccessful – Failed”); \n} \ndriver.close();", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “C:\\Users\\user\\Downloads\\chromedriver.exe”); \nWebDriver driver = new ChromeDriver(); \ndriver.manage().window().maximize(); \n \ndriver.get(“https://gcreddy.com/project/create_account.php”); \n \ndriver.findElement(By.name(“gender”)).click(); \ndriver.findElement(By.name(“firstname”)).sendKeys(“abcd”); \ndriver.findElement(By.name(“lastname”)).sendKeys(“xyz”); \ndriver.findElement(By.id(“dob”)).sendKeys(“10/10/2000”); \nString email = “sriniram123″+ Math.random()+ “@gmail.com”; \nSystem.out.println(email); \ndriver.findElement(By.name(“email_address”)).sendKeys(email); \n \ndriver.findElement(By.name(“street_address”)).sendKeys(“abcd 2 xyz”); \ndriver.findElement(By.name(“postcode”)).sendKeys(“500072”); \ndriver.findElement(By.name(“city”)).sendKeys(“Hyderabad”); \ndriver.findElement(By.name(“state”)).sendKeys(“Telangana”); \n \nSelect dropDown = new Select (driver.findElement(By.name(“country”))); \ndropDown.selectByVisibleText(“India”); \n \ndriver.findElement(By.name(“telephone”)).sendKeys(“9876767676”); \ndriver.findElement(By.name(“password”)).sendKeys(“abcd321”); \ndriver.findElement(By.name(“confirmation”)).sendKeys(“abcd321”); \n \ndriver.findElement(By.id(“tdb4”)).click(); \n \ndriver.findElement(By.name(“password”)).sendKeys(“abcd321”); \ndriver.findElement(By.name(“confirmation”)).sendKeys(“abcd321”); \ndriver.findElement(By.id(“tdb4”)).click(); \n \nString confirmationMessage = driver.findElement(By.tagName(“h1”)).getText(); \n \nif (confirmationMessage.equals(“Your Account Has Been Created!”)) { \nSystem.out.println(“Pass”); \n} \nelse { \nSystem.out.println(“Fail”); \n} \ndriver.close();", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “E://chromedriver.exe”); \nWebDriver driver = new ChromeDriver(); \n \ndriver.manage().window().maximize(); \n \ndriver.get(“https://gcreddy.com/project/login.php”); \n \ndriver.findElement(By.name(“email_address”)).sendKeys(“sriniram123@gmail.com”); \ndriver.findElement(By.name(“password”)).sendKeys(“abcd321”); \ndriver.findElement(By.id(“tdb1”)).click(); \nThread.sleep(2000); \n \ntry { \nboolean elementExistence = driver.findElement(By.linkText(“Log Off”)).isDisplayed(); \n \nif (elementExistence == true) { \nSystem.out.println(“Customer Login is Successful – Passed”); \n} \n} \ncatch (NoSuchElementException e1) { \nSystem.out.println(“Customer Login is Unsuccessful – Failed”); \n} \ndriver.close(); \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “C:\\Users\\user\\Downloads\\chromedriver.exe”); \nWebDriver driver = new ChromeDriver(); \ndriver.manage().window().maximize(); \n \ndriver.get(“https://gcreddy.com/project/admin/login.php”); \n \ndriver.findElement(By.linkText(“Online Catalog”)).click(); \nThread.sleep(2000); \nString url1 = driver.getCurrentUrl(); \n//System.out.println(url1); \n \nif (url1.equals(“https://gcreddy.com/project/”)) { \nSystem.out.println(“Before Login – Page is redirecting from admin to user interface – Passed”); \n} \nelse { \nSystem.out.println(“Before Login – Page is Not redirecting from admin to user interface – Failed”); \n} \n \ndriver.navigate().back(); \ndriver.findElement(By.name(“username”)).sendKeys(“gcreddy”); \ndriver.findElement(By.name(“password”)).sendKeys(“Temp@2020”); \ndriver.findElement(By.id(“tdb1”)).click(); \nThread.sleep(2000); \nString url2 = driver.getCurrentUrl(); \n \nif (url2.equals(“https://gcreddy.com/project/admin/index.php”)) { \ndriver.findElement(By.linkText(“Online Catalog”)).click(); \n} \n \nString url3 = driver.getCurrentUrl(); \n//System.out.println(url3); \n \nif (url3.equals(“https://gcreddy.com/project/”)) { \nSystem.out.println(“After Login – Page is redirecting from admin to user interface – Passed”); \n} \nelse { \nSystem.out.println(“After Login – Page is Not redirecting from admin to user interface – Failed”); \n} \ndriver.close(); \n} \n} \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “E://chromedriver.exe”); \nWebDriver driver = new ChromeDriver(); \n \ndriver.manage().window().maximize(); \n \ndriver.get(“https://www.gcreddy.com/discussiongroup/ucp.php?mode=register”); \n \ndriver.findElement(By.id(“agreed”)).click(); \n \ndriver.findElement(By.id(“username”)).sendKeys(“Indianewad”); \n \nString Email = “Indianew”+Math.random()+”@gmail.com”; \ndriver.findElement(By.id(“email”)).sendKeys(Email); \n \ndriver.findElement(By.id(“new_password”)).sendKeys(“Abcd123”); \ndriver.findElement(By.id(“password_confirm”)).sendKeys(“Abcd123”); \n \nSystem.out.println(“Enter Verification Code”); \nScanner scan = new Scanner(System.in); \nString captcha = scan.nextLine(); \n \ndriver.findElement(By.id(“confirm_code”)).sendKeys(captcha); \n \ndriver.findElement(By.id(“submit”)).click(); \nThread.sleep(3000); \n \nString message = driver.findElement(By.xpath(“//*[@id=\”message\”]/div/p”)).getText(); \n \nif (message.contains(“Your account has been created.”)) { \nSystem.out.println(“User Registration is Successful – Passed”); \n} \nelse { \nSystem.out.println(“User Registration is Unsuccessful – Failed”); \n} \ndriver.close(); \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"System.setProperty(“webdriver.chrome.driver”, “C:\\Users\\user\\Downloads\\chromedriver.exe”); \n \nFileReader fileObject = new FileReader(“C:\\Users\\user\\Desktop\\input.txt”); \nBufferedReader br = new BufferedReader(fileObject); \nString line; \nint lineCount=0; \nint Iteration=0; \n \nwhile ((line = br.readLine()) !=null) { \nString inputData [] = line.split(“, “, 2); \nlineCount=lineCount+1; \n \nif (lineCount>1) { \nIteration=Iteration+1; \n \nWebDriver driver = new ChromeDriver(); \ndriver.manage().window().maximize(); \ndriver.get(“https://gcreddy.com/project/admin/login.php”); \ndriver.findElement(By.name(“username”)).sendKeys(inputData[0]); \ndriver.findElement(By.name(“password”)).sendKeys(inputData[1]); \ndriver.findElement(By.id(“tdb1”)).click(); \nThread.sleep(2000); \n \nString url= driver.getCurrentUrl(); \n \nif (url.equals(“https://gcreddy.com/project/admin/index.php”)) { \nSystem.out.println(Iteration + ” Admin Login is Successful – Passed”); \n} \nelse { \nSystem.out.println(Iteration+” Admin Login is Unsuccessful – Failed”); \n} \ndriver.close(); \n} \n} \nbr.close(); \nfileObject.close(); \n} \n} \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"public class TestCase { \nstatic WebDriver driver; \nstatic String ErrorMessage; \n \npublic static void main(String[] args) throws IOException, InterruptedException { \nSystem.setProperty(“webdriver.chrome.driver”, “E://chromedriver.exe”); \n \nFileReader file = new FileReader (“C:\\Users\\mahit\\Desktop\\input.txt”); \nBufferedReader br = new BufferedReader(file); \n \nint count=0; \nint iteration=0; \nString line; \n \nwhile ((line=br.readLine()) !=null) { \ncount = count+1; \n \nif (count>1) { \niteration = iteration+1; \n \nString inputData[] = line.split(“, “, 2); \n \ndriver = new ChromeDriver(); \n \ndriver.manage().window().maximize(); \n \ndriver.get(“https://gcreddy.com/project/admin/login.php”); \ndriver.findElement(By.name(“username”)).sendKeys(inputData[0]); \ndriver.findElement(By.name(“password”)).sendKeys(inputData[1]); \ndriver.findElement(By.id(“tdb1”)).click(); \nThread.sleep(2000); \n \nErrorMessage = driver.findElement(By.className(“messageStackError”)).getText(); \n \nif ((iteration == 4) && (ErrorMessage.contains(“The maximum number of login attempts has been reached. Please try again in 5 minutes.”))) { \nSystem.out.println(iteration+ ” Maximum invalid login attempts are over – Passed”); \n} \nelse if ((iteration <= 3) && (ErrorMessage.contains(“Error: Invalid administrator login attempt.”))) { \nSystem.out.println(iteration+ ” Maximum invalid login attempts are Not over – Passed”); \n} \nelse \n{ \nSystem.out.println(iteration+” Failed”); \n} \ndriver.close(); \n} \n} \nbr.close(); \nfile.close(); \n} \n} \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"public class BatchTesting { \npublic static WebDriver driver; \n \n//Launch Browser \npublic void launch(){ \ndriver = new ChromeDriver(); \ndriver.manage().window().maximize(); \n} \n//Close Browser \npublic void closeBrowser(){ \ndriver.close(); \n} \n//Admin Login \npublic void login(String Username, String Password){ \ndriver.get(“https://gcreddy.com/project/admin/login.php”); \ndriver.findElement(By.name(“username”)).sendKeys(Username); \ndriver.findElement(By.name(“password”)).sendKeys(Password); \ndriver.findElement(By.id(“tdb1”)).click(); \n} \npublic static void main(String[] args) { \nSystem.setProperty(“webdriver.chrome.driver”, “E:/chromedriver.exe”); \nBatchTesting obj=new BatchTesting(); \n//Test Case 1: Verify Admin Login (Positive Test Case) \nobj.launch(); \nobj.login(“admin”, “admin@123”); \nString url=driver.getCurrentUrl(); \n \nif (url.contains(“https://gcreddy.com/project/admin/index.php”)){ \nSystem.out.println(“Test Case 1: “+ “Admin Login is Successful – Passed”); \n} \nelse{ \nSystem.out.println(“Test Case 1: “+ “Admin Login is unsuccessful – Failed”); \n} \nobj.closeBrowser(); \n//Verify Error Message in Admin Login Functionality (Negative Test Case) \nobj.launch(); \nobj.login(“admin1”, “abcder”); \n \nString ErrorMessage=driver.findElement(By.className(“messageStackError”)).getText(); \n//System.out.println(ErrorMessage); \nif (ErrorMessage.contains(“Error: Invalid administrator login attempt.”)){ \nSystem.out.println(“Test Case 2: “+ “Admin Login is Unsuccessful & Showing Correct Error Message -Passed”); \n} \nelse { \nSystem.out.println(“Test Case 2: “+ “Admin Login is Unsuccessful & Not Showing Correct Error Message -Failed”); \n} \nobj.closeBrowser(); \n//Test Case 3: Verify Redirect Functionality from Admin Interface to user Interface \nobj.launch(); \nobj.login(“admin”, “admin@123”); \ndriver.findElement(By.linkText(“Online Catalog”)).click(); \nString url2=driver.getCurrentUrl(); \n \nif (url2.equals(“https://gcreddy.com/project/”)){ \nSystem.out.println(“Test Case 3: “+ “Redirected from Admin Interface to User Interface – Passed”); \n} \nelse { \nSystem.out.println(“Test Case 3: “+ “Not Redirected from Admin Interface to User Interface – Passed”); \n} \nobj.closeBrowser(); \n} \n} \n", "meta": {"set_name": "gcreddy (en)"}}
{"text":"package com.saucedemo.selenium.login; \n \nimport org.junit.jupiter.api.Assertions; \nimport org.junit.jupiter.api.BeforeEach; \nimport org.junit.jupiter.api.DisplayName; \nimport org.junit.jupiter.api.Test; \nimport org.junit.jupiter.api.TestInfo; \nimport org.junit.jupiter.api.extension.ExtensionContext; \nimport org.junit.jupiter.api.extension.RegisterExtension; \nimport org.junit.jupiter.api.extension.TestWatcher; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeOptions; \nimport org.openqa.selenium.remote.RemoteWebDriver; \nimport org.openqa.selenium.support.ui.WebDriverWait; \n \nimport java.net.MalformedURLException; \nimport java.net.URL; \nimport java.time.Duration; \nimport java.util.HashMap; \nimport java.util.Map; \n \n/** \n * Login tests with Selenium. \n */ \npublic class SeleniumLoginTest { \n    protected RemoteWebDriver driver; \n \n    @RegisterExtension \n    public SauceTestWatcher watcher = new SauceTestWatcher(); \n \n    @BeforeEach \n    public void setup(TestInfo testInfo) throws MalformedURLException { \n        ChromeOptions options = new ChromeOptions(); \n        options.setPlatformName(\"Windows 10\"); \n        options.setBrowserVersion(\"latest\"); \n \n        Map<String, Object> sauceOptions = new HashMap<>(); \n        sauceOptions.put(\"username\", System.getenv(\"SAUCE_USERNAME\")); \n        sauceOptions.put(\"accessKey\", System.getenv(\"SAUCE_ACCESS_KEY\")); \n        sauceOptions.put(\"name\", testInfo.getDisplayName()); \n \n        options.setCapability(\"sauce:options\", sauceOptions); \n        URL url = new URL(\"https://ondemand.us-west-1.saucelabs.com/wd/hub\"); \n \n        driver = new RemoteWebDriver(url, options); \n    } \n \n    @DisplayName(\"Swag Labs Login with Selenium\") \n    @Test \n    public void swagLabsLoginTest() { \n        driver.get(\"https://www.saucedemo.com\"); \n \n        By usernameFieldLocator = By.cssSelector(\"#user-name\"); \n        By passwordFieldLocator = By.cssSelector(\"#password\"); \n        By submitButtonLocator = By.cssSelector(\".btn_action\"); \n \n        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20)); \n        wait.until((driver) -> driver.findElement(usernameFieldLocator).isDisplayed()); \n \n        WebElement userNameField = driver.findElement(usernameFieldLocator); \n        WebElement passwordField = driver.findElement(passwordFieldLocator); \n        WebElement submitButton = driver.findElement(submitButtonLocator); \n \n        userNameField.sendKeys(\"standard_user\"); \n        passwordField.sendKeys(\"secret_sauce\"); \n        submitButton.click(); \n \n        Assertions.assertEquals(\"https://www.saucedemo.com/inventory.html\", driver.getCurrentUrl()); \n    } \n \n    /** \n     * Custom TestWatcher for Sauce Labs projects. \n     */ \n    public class SauceTestWatcher implements TestWatcher { \n        @Override \n        public void testSuccessful(ExtensionContext context) { \n            endSession(true); \n        } \n \n        @Override \n        public void testFailed(ExtensionContext context, Throwable cause) { \n            endSession(false); \n        } \n \n        private void endSession(boolean passed) { \n            String result = passed ? \"passed\" : \"failed\"; \n            driver.executeScript(\"sauce:job-result=\" + result); \n \n            driver.quit(); \n        } \n    } \n}", "meta": {"set_name": "sauceLabs (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class GetCommandExample \n{ \n// To execute any program we need main main() method. So we will continue from the main method. \n public static void main(String[] args) \n { \n// Create a driver object using WebDriver reference. \n   WebDriver driver = new FirefoxDriver(); // FirefoxDriver class with no parameters. So, Default Firefox will be launche by Java program. Default Firefox profile is similar to launching the firefox in save mode. \n \n// Declaration of variable URL with data type String and store the URL of the webpage. \n     String URL = \"https://www.google.co.in\"; \n \n// Now call the get() method to open the URL of the web page in the existing browser. \n    driver.get(URL); // It takes String URL as a parameter and returns nothing. \n \n// Wait For Page To Load. \n     driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS); \n \n// Print a message to display on the console that the website is opened successfully. \n     System.out.println(\"Website is opened successfully\"); \n \n// Call getTitle() method using reference variable to get the title of the web page. \n     String getTitle = driver.getTitle(); \n \n// Now print title of web page on the console. \n     System.out.println(\"Title of home page: \" +getTitle); \n \n// Now call the close() method using reference variable 'driver' to close the browser. \n     driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class VerifyingTitle \n{ \n public static void main(String[] args) \n { \n// Create WebDriver reference. \n     WebDriver driver; // Till now the driver object is not created. \n \n// Create an driver object using WebDriver reference variable. \n     driver = new FirefoxDriver(); // Now driver object is created. \n     \n     String URL = \"https://www.facebook.com\"; \n     driver.get(URL); // It will navigate the Facebook home page in the existing web browser. \n \n// Call getTitle() method to get the actual title of home page. \n     String actualTitle = driver.getTitle(); \n     String expectedTitle = \"Facebook – log in or sign up\"; \n \n// Use equalsIgnoreCase() method to verify actual title with expected title. \n     if(actualTitle.equalsIgnoreCase(expectedTitle))  // Verifying the home page title. \n     { \n        System.out.println(\"Verification is success\" ); \n        System.out.println(\"Home page title is: \" + actualTitle ); \n     } \n   else { \n       System.out.println(\"Verification is failed, Matched not found\"); \n   } \n   driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class GetCommandExample2 \n{ \n  public static void main(String[] args) \n  { \n// Create a WebDriver reference and assign a driver object with it. \n     WebDriver driver; \n        driver = new FirefoxDriver(); \n \n// Declaration of variable URL with data type String and store the URL of the webpage. \n     String URL = \"https://www.google.co.in\"; \n \n// Call the get() method to open the URL of the web page in the existing browser. \n     driver.get(URL); \n \n// Wait For Page To Load. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Call getCurrentUrl() method using reference variable to get the current url of the web page. \n     String getCurrentUrl = driver.getCurrentUrl(); \n \n// Print current URL of web page on the console. \n     System.out.println(\"Current URL of Home page: \" +getCurrentUrl); \n \n// Call getPageSource() method to get page source of web page. \n     String getPageSource = driver.getPageSource(); \n \n// Now call the close() method using reference variable 'driver' to close the browser. \n    driver.close(); \n   } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class ListOfNavigationCommands \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.navigate(). \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class NavigationCommandExample \n{ \n public static void main(String[] args) \n { \n// Create a driver object to launch the Firefox browser. \n     WebDriver driver = new FirefoxDriver(); \n \n// Declare a variable URL with data type String and stores the URL of the web page. \n     String URL = \"http://www.google.com\"; \n \n// Call navigate().to() command to navigate the URL of the web page. \n     driver.navigate().to(URL); // It takes parameter URL as a String and returns nothing. \n \n// Wait for Page to load completely. \n     driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS ); \n \n// Click on Gmail link text. \n// Call findElement method using WebDriver reference variable 'driver'. \n     WebElement element = driver.findElement(By.linkText(\"Gmail\")); // The return type of findElement method is WebElement. \n      element.click(); \n   \n      String titlePage1 = driver.getTitle(); \n      System.out.println(\"Title of web page: \" +titlePage1); \n \n// Move to the previous web page. \n// Call navigate().back() command to move back by one page on the browser's history. \n      driver.navigate().back(); \n try \n{ \n   Thread.sleep(1000); \n} \ncatch (InterruptedException e) \n{ \n   e.printStackTrace(); \n } \nString titleOfBackpage = driver.getTitle(); \nSystem.out.println(\"Title of back page: \" +titleOfBackpage); \n \nint titleLengthBP = titleOfBackpage.length(); \nSystem.out.println(\"Length of title of back page: \" +titleLengthBP); \n \n// Move to the next web page. \n// Call navigate().forward() command to move forward by one page on the browser's history. \n   driver.navigate().forward(); // It takes nothing as parameter and returns nothing. \n   \n   String titleOfForwardpage = driver.getTitle(); \n   System.out.println(\"Title of forward page: \" +titleOfForwardpage); \n   \n   int titleLengthFP = titleOfForwardpage.length(); // Return type of the length() method is an integer. \n   System.out.println(\"Length of title of forward page: \" +titleLengthFP); \n \n// Refresh the current webpage. \n// Call navigate().refresh() command to refresh the current page. \n     driver.navigate().refresh(); // accepts nothing as a parameter and returns nothing. \n     System.out.println(\"Refresh is successfully\"); \n   \n     String titleOfRefreshpage = driver.getTitle(); // line 1. \n     int titleLengthRP = titleOfRefreshpage.length(); // line 2. // Since return type of length() method is integer, we will store it using a variable with data type integer. \n \n  System.out.println(\"Length of title of refresh page: \" +titleLengthRP); // The above two lines (line 1 and line 2) of code can also be written in one step like this. \n// int titleLengthRP = driver.getTitle().length(); \n \n// Close the browser. \n     driver.close(); // It takes nothing as a parameter and returns nothing. \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ListOfWebElementCommands \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   WebElement element = driver.findElement(By.id(\"Username\")); \n   element. \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class FacebookHomePage \n{ \n public static void main(String[ ] args) \n { \n// Declare reference variable of type WebDriver. \n     WebDriver driver; // Create a driver object of Firefox using WebDriver reference. \n     driver = new FirefoxDriver(); \n \n// Maximize the browser. \n     driver.manage().window().maximize(); \n \n// Declare Facebook home page URL using a variable of type string. \n     String URL = \"https://www.facebook.com\"; \n \n// Call get() method using reference variable driver and pass the URL as a parameter. \n     driver.get(URL); // It returns nothing. \n \n// Wait to load whole web page. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Find elements by XPath using findElement command. \n     WebElement email = driver.findElement(By.xpath(\"//input[@id='email']\")); \n \n// Enter your login email id in box using sendKeys() method. \n     email.sendKeys(\"xyz@yahoo.com\"); \n     WebElement password = driver.findElement(By.xpath(\"//input[@id='pass']\")); \n \n// Enter your login password. \n     password.sendKeys(\"123456\"); \n   \n    WebElement login = driver.findElement(By.xpath(\"//input[@type='submit']\")); \n    login.click(); \n    System.out.println(\"Login successfully\"); \n \n// Now close the browser. \n    driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class GoogleHomePage \n{ \n public static void main(String[] args) \n { \n// Create a WebDriver object. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximize the Firefox browser. \n     driver.manage().window().maximize(); \n \n// Store the home page URL in a variable URL of type String. \n     String URL = \"https://www.google.com\"; \n \n// Call get() method using reference variable driver and pass URL as parameter to get method. \n     driver.get(URL); \n \n// Wait for load home page completely. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Find element \"search box\" by using findElement() method of WebElement. \n     WebElement searchBox = driver.findElement(By.xpath(\"//input[contains(@name,'q')]\")); \n \n// Send a text into search box. \n     searchBox.sendKeys(\"Selenium\"); \n \n// Click on the search button. \n     WebElement sButton = driver.findElement(By.xpath(\"//input[contains(@name,'btnK')]\")); \n      sButton.click(); \n \n// Close the browser. \n     driver.close(); \n     System.out.println(\"Test successful\"); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class StartswithExample \n{ \n public static void main(String[] args) \n { \n// Create a WebDriver object. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximize the Firefox browser. \n     driver.manage().window().maximize(); \n \n// Store the home page URL in a variable URL of type String. \n     String URL = \"https://www.neilpatel.com/ubersuggest\"; \n \n// Call get() method using reference variable driver and pass URL as parameter to get method. \n     driver.get(URL); \n \n// Wait for load home page completely. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Find element \"search box\" by using findElement() method of WebElement. \n     WebElement searchBox = driver.findElement(By.xpath(\"//input[starts-with(@name, 'keyword')]\")); \n \n// Send a text into search box. \n     searchBox.sendKeys(\"Selenium WebDriver\"); \n \n// Click on search button WebElement. \n     searchButton = driver.findElement(By.xpath(\"//button[starts-with(@type,'submit')]\")); \n     searchButton.click(); \n \n// Close the browser. \n     driver.close(); \n     System.out.println(\"Test successful\"); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package selenium; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class IsEnabledMethodEx \n{ \npublic static void main(String[] args) \n{ \n// Create an object of FirefoxDriver class. \n     WebDriver driver = new FirefoxDriver(); \n \n// Launch the Firefox browser and open URL. \n     String URL = “https://www.google.com”; \n     driver.get(URL); \n \n// Maximize browser window. \n     driver.manage().window().maximize(); \n \n// Delay for specified amount of time to load page. \n     driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS); \n \n// Declare and initialize variable to store the expected title of the webpage. \n     String expectedTitle = “Google”; \n \n// Fetch title of the web page and save it using a variable actualTitle with data type string. \n     String actualTitle = driver.getTitle(); \n \n// Compare expected title of the page with actual title of the page and print the result. \n   if(expectedTitle.equals(actualTitle)) \n   { \n       System.out.println(“Verification Successful – Correct title is displayed on the home webpage.”); \n   } \n   else \n   { \n      System.out.println(“Verification Failed: Incorrect title is displayed on the home webpage.”); \n   } \n// Check that “Google Search box” is enabled or not. If Search box is enabled, it will return true. \n     WebElement searchBox = driver.findElement(By.xpath(“//input[@name=’q’]”)); \n   \n   if(searchBox.isEnabled()) \n   { \n      System.out.println(“Search box is enabled. Return: ” +searchBox.isEnabled()); \n   } \n   else \n   { \n      System.out.println(“Search box is disabled. Return: ” +searchBox.isEnabled()); \n   } \n// Enter text in the “Google Search” box. \n     WebElement sendText = driver.findElement(By.xpath(“//input[@name=’q’]”)); \n       sendText.sendKeys(“Selenium Tool”); \n \n// Check that “Google Search button” is enabled or not. \n     WebElement searchButton = driver.findElement(By.xpath(“//input[@class=’gNO89b’]”)); \n     if(searchButton.isEnabled()) { \n         System.out.println(“Search button is enabled. Return: ” +searchButton.isEnabled()); \n     } \n     else { \n         System.out.println(“Search button is not enabled. Return: ” +searchButton.isEnabled()); \n     } \n    driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package selenium; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class IsDisplayedMethodEx \n{ \npublic static void main(String[] args) \n{ \n// Create an object of FirefoxDriver class. \n     WebDriver driver = new FirefoxDriver(); \n \n// Launch the Firefox browser and open URL. \n     String URL = \"https://www.google.com\"; driver.get(URL); \n \n// Maximize browser window. \n     driver.manage().window().maximize(); \n \n// Delay for specified amount of time to load page. \n     driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS); \n \n// Check that “Google Search box” is displayed or not. If Search box is displayed, it will return true. \n     WebElement searchBox = driver.findElement(By.xpath(\"//input[@name='q']\")); \n     \n    if(searchBox.isDisplayed()) { \n       System.out.println(\"Search box is visible. Return: \" +searchBox.isDisplayed()); \n    } \n    else { \n       System.out.println(\"Search box is not visible. Return: \" +searchBox.isDisplayed()); \n    } \n// Check that \"Google Search button\" is displayed or not. \n     WebElement searchButton = driver.findElement(By.xpath(\"//input[@class='gNO89b']\")); \n   \n    if(searchButton.isDisplayed()) { \n       System.out.println(\"Search button is visible. Return: \" +searchButton.isDisplayed()); \n    } \n   else { \n      System.out.println(\"Search button is not visible. Return: \" +searchButton.isDisplayed()); \n    } \ndriver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package selenium; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class IsSelectedMethodEx \n{ \npublic static void main(String[] args) \n{ \n  WebDriver driver = new FirefoxDriver(); \n  String URL = \"https://selenium08.blogspot.com/2019/07/check-box-and-radio-buttons.html\"; \n  driver.get(URL); \n  \n  driver.manage().window().maximize(); driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n  WebElement red = driver.findElement(By.xpath(\"//input[@name='color' and @value='red']\")); \n \n// Check if it is enabled before selecting it. \n   if(red.isEnabled()) { \n      System.out.println(\"Red checkbox is enabled. Return: \" +red.isEnabled()); \n \n// Since check box is enabled. Therefore, click it. \n      red.click(); \n \n// Now check that it is selected or not. \n    if(red.isSelected()) { \n        System.out.println(\"Red checkbox is selected. Return: \" +red.isSelected()); \n     } \n     else { \n        System.out.println(\"Red checkbox is not selected. Return: \" +red.isSelected()); \n     } \n    } \n   else { \n      System.out.println(\"Red checkbox is not enabled. Return: \" +red.isEnabled()); \n    } \n// Find XPath for radio button Opera. \n     WebElement opera=driver.findElement(By.xpath(\"//input[@name='browser' and @value='Opera']\")); \n \n// Check radio button opera is selected or not. \n     if(opera.isSelected()) { \n          System.out.println(\"Radio button opera is selected. Return: \" +opera.isSelected()); \n   } \n   else { \n      System.out.println(\"Radio button opera is not selected. Return: \" +opera.isSelected()); \n   } \n  driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceRadioButton; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class RadioButton \n{ \n public static void main(String[] args) \n { \n// Declare WebDriver reference and assign an object of FirefoxDriver class. \n     WebDriver driver=new FirefoxDriver(); \n \n// Maximize window. \n     driver.manage().window().maximize(); \n   \n    String URL = \"https://selenium08.blogspot.com/2019/08/radio-buttons.html\"; \n    driver.get(URL); driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate radio button \"Yellow\". \n     WebElement yellow = driver.findElement(By.xpath(\"//input[@name='yellow']\")); \n \n// Click on Radio button yellow to select. \n      yellow.click(); \n     System.out.println(\"Radio button Yellow is successfully selected.\"); \n \n// The above two lines of code can be written also in just one step like this: \n// driver.findElement(By.xpath(\"//input[@name='yellow']\")).click(); \n \n// Locate radio button \"Red\". \n     WebElement red = driver.findElement(By.xpath(\"//input[@name='red']\")); \n \n// Radio Button Yellow is de-selected and Radio Button Red is selected. \n     red.click(); \n     System.out.println(\"Radio Button Red is successfully Selected\"); \n \n// Locate radio button \"Dhanbad\". \n     WebElement dhanbad = driver.findElement(By.xpath(\"//input[@name='dhanbad']\")); \n     dhanbad.click(); \n   \n     System.out.println(\"Radio button Dhanbad is successfully selected.\"); \n      driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceRadioButton; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class RadioButtonTest \n{ \npublic static void main(String[] args) \n{ \n// Declare WebDriver reference. \n     WebDriver driver; \n \n// Create an object of FirefoxDriver class. \n       driver = new FirefoxDriver(); \n \n// Maximize browser. \n     driver.manage().window().maximize(); \n     \n     String URL = \"https://selenium08.blogspot.com/2019/08/radio-buttons.html\"; \n     driver.get(URL); driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the radio button \"Green\". \n     WebElement green = driver.findElement(By.xpath(\"//input[@name='green']\")); \n \n// Verify that radio button \"Green\" is enabled and visible. \n     if(green.isEnabled() && green.isDisplayed()) \n     { \n // Using System.out.println method, we will display a message that will indicate whether the verification was successful or not. \n        System.out.println(\"Radio button is enabled and visible\"); \n } \nelse { \n    System.out.println(\"Radio button is disabled and invisible\"); \n } \n// Verify that radio button is not selected before clicking on it. \n     if(!green.isSelected()) \n     { \n        green.click(); \n// Verify that \"Green\" option has been selected. \n     if(green.isSelected()) \n     { \n// Use System.out.println method to display a message that will indicate whether verification is successful or not and the \"Green\" option has been selected or not. \n         System.out.println(\"'Green' option is selected\"); \n   } \n else { \n      System.out.println(\"Something is wrong, 'Green' option is not selected\"); \n   } \n } \n driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceCheckbox; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class CheckBox \n{ \n public static void main(String[] args) \n { \n// Declare WebDriver reference. \n     WebDriver driver; // Create an object of FirefoxDriver class. \n      driver = new FirefoxDriver(); \n// or WebDriver diver = new FirefoxDriver(); \n \n// Maximize browser. \n     driver.manage().window().maximize(); \n   \n     String URL = \"https://selenium08.blogspot.com/2019/07/check-box-and-radio-buttons.html\"; \n      driver.get(URL); \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate checkboxes \"Red\", \"Blue\", \"Orange\". \n     WebElement red = driver.findElement(By.xpath(\"//input[@value='red']\")); \n      red.click(); \n     System.out.println(\"Red Checkbox is selected\"); \n   \n     WebElement blue = driver.findElement(By.xpath(\"//input[@value='blue']\")); \n      blue.click(); \n     System.out.println(\"Blue Checkbox is selected\"); \n \n     WebElement orange=driver.findElement(By.xpath(\"//input[@value='orange']\")); \n     orange.click(); \n     System.out.println(\"Orange Checkbox is selected\"); \n   \n     driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package checkboxPrograms; \nimport org.testng.annotations.Test; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.testng.Assert; \nimport org.testng.annotations.AfterMethod; \nimport org.testng.annotations.BeforeClass; \n \npublic class CheckboxChecking \n{ \n  WebDriver driver; \n@BeforeClass \npublic void setUp() \n{ \n  driver = new FirefoxDriver(); \n  driver.manage().window().maximize(); \n  \n   String URL = \"https://selenium08.blogspot.com/2019/07/check-box-and-radio-buttons.html\"; \n  driver.get(URL); \n  driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n } \n@Test \npublic void assertTure() \n{ \n// Locates checkbox \"Red\". \n     WebElement red = driver.findElement(By.xpath(\"//input[@value='red']\")); \n       red.click(); \n \n     Assert.assertTrue(red.isSelected()); \n     System.out.println(\"Red checkbox is selected\"); \n } \n@AfterMethod \npublic void afterMethod() \n{ \n   driver.close(); \n  } \n } \n ", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package checkboxProgram; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.testng.annotations.BeforeClass; \n \npublic class VerifyCheckbox \n{ \n public static void main(String[] args) \n { \n   WebDriver driver; \n    driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n \n   String URL = \"https://selenium08.blogspot.com/2019/07/check-box-and-radio-buttons.html\"; \n    driver.get(URL); \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n  WebElement red = driver.findElement(By.xpath(\"//input[@value='red']\")); \n    red.click(); \n \n  if(red.isSelected()) \n { \n     System.out.println(\"Red checkbox is selected\"); \n } \n else \n { \n     System.out.println(\"Something went wrong\"); \n  } \n driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package selectClass; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class ListofSelectClassMethods \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   WebElement element = driver.findElement(By.xpath(\"//select[@name='country']\")); \n   Select select = new Select(element); \n   select. \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class SelectByVisibleTextExample \n{ \npublic static void main(String[] args) \n{ \n// Create a driver object of Firefox class by using reference of WebDriver. \n    WebDriver driver = new FirefoxDriver(); \n \n// Maximize the browser. \n    driver.manage().window().maximize(); \n \n// Declare a variable URL of type String and store the URL. \n     String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n \n// Call get() method to open the web page URL and pass URL as a parameter. \n     driver.get(URL); \n \n// Wait for some time to load the whole web page. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on web page by By.xpath. \n    WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='country']\")); \n \n// Verify the dropdown is enabled and visible. \n   if(dropdown.isEnabled() && dropdown.isDisplayed()) \n   { \n      System.out.println(\"Dropdown is enabled and visible\"); \n   } \n  else { \n      System.out.println(\"Dropdown is not visible\"); \n  } \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n    Select select = new Select(dropdown); \n \n// Verify that dropdown does not allow the multiple selections. \n   if(select.isMultiple()) \n   { \n      System.out.println(\"Dropdown list accepts multiple choices\"); \n   } \n  else { \n     System.out.println(\"Dropdown list does not accept multiple choices\"); \n  } \n// Call getOptions() method to get all options of list. size() method is used to get size of list. \n   int listSize = select.getOptions().size(); \n   System.out.println(\"List size: \" +listSize); \n \n// Select the option \"India\" by sending visible text. \n   select.selectByVisibleText(\"India\"); \n \n// Check that \"India\" is selected as an option or not. \n// Use System.out.println method to display a message to indicate whether the option is chosen and verification was successful or not. \n     String getText = select.getFirstSelectedOption().getText(); \n     System.out.println(\"Option chosen: \" +getText); \n \n// Close the browser. \n     driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class SelectByValueExample \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n   String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n   driver.get(URL); \n \n// Wait for some time to load the whole web page. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on web page by By.xpath. \n     WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='country']\")); \n \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n     Select select = new Select(dropdown); \n \n// Select the option \"USA\" by sending its value attribute. \n     select.selectByValue(\"US\"); \n     System.out.println(\"Option is successfully selected\"); \n \n// Close the browser. \n     driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class multiple-choice \n{ \n public static void main(String[] args) \n { \n  WebDriver driver; \n   driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n   String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n   driver.get(URL); \n \n// Wait for some time to load the whole web page. \n    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on web page by By.xpath. \n    WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\")); \n \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n    Select multiplechoicelist = new Select(dropdown); \n \n// Verify that dropdown allows the multiple-choice list or not. \n  if(multiplechoicelist.isMultiple()) \n  { \n     System.out.println( \"Dropdown allows multiple-choice list\"); \n  } \n else { \n    System.out.println(\"Dropdown does not allow multiple-choice\"); \n } \n// Now select the different choice by using visible text. \n    multiplechoicelist.selectByVisibleText(\"July\"); \n    multiplechoicelist.selectByVisibleText(\"May\"); \n    multiplechoicelist.selectByVisibleText(\"March\"); \n \n// Verify that the number of choices in the list selected. \n  if(multiplechoicelist.getAllSelectedOptions().size() == 3) \n  { \n     System.out.println(\"3 options have been chosen\"); \n  } \n else { \n    System.out.println(\"Code not worked\"); \n  } \n  driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.ArrayList; \nimport java.util.List; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class GetAllSelectedOptions \n{ \npublic static void main(String[] args) \n{ \n WebDriver driver; \n driver = new FirefoxDriver(); \n driver.manage().window().maximize(); \n String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n driver.get(URL); \n \n// Wait for some time to load the whole web page. \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on web page by By.xpath. \n  WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\")); \n \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n   Select multiplechoicelist = new Select(dropdown); \n \n// Verify that dropdown allows the multiple-choice list or not. \n  if(multiplechoicelist.isMultiple()) \n  { \n    System.out.println( \"Dropdown allows multiple-choice list\"); \n  } \n else { \n    System.out.println(\"Dropdown does not allow multiple-choice\"); \n  } \n// If multiple-choice allow, select the different choice by sending visible texts. \n   multiplechoicelist.selectByVisibleText(\"July\"); \n   multiplechoicelist.selectByVisibleText(\"May\"); \n   multiplechoicelist.selectByVisibleText(\"March\"); \n \n// Verify that the number of choices in the list selected. \n  if(multiplechoicelist.getAllSelectedOptions().size() == 3) \n  { \n    System.out.println(\"3 options have been chosen:\"); \n  } \nelse { \n  System.out.println(\"Code not worked\"); \n } \n// Create a List. For this, create an object of ArrayList class by using the reference of List interface. \n    List<String> expectedSelection = new ArrayList<String>(); \n \n// Call add() method of List to add expected elements for selection. \n    expectedSelection.add(\"July\"); \n    expectedSelection.add(\"May\"); \n    expectedSelection.add(\"March\"); \n \n// Iterating WebElement by using the advanced for loop to retrieve the actually selected elements and then add selected elements in the list using add() method. \n   List<String> actualSelection = new ArrayList<String>(); \n   for(WebElement element : multiplechoicelist.getAllSelectedOptions()) \n   { \n     actualSelection.add(element.getText()); // Here, getText() method of WebElement class has been used to add the text label of all the options in the list. \n   } \n// Now compare actualSelection with expectedSelection by using containsAll() method to check that correct options are selected in the list.. \n   if(actualSelection.containsAll(expectedSelection)) \n   { \n      System.out.println(actualSelection); \n   } \n driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.ArrayList; \nimport java.util.Iterator; \nimport java.util.List; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class GetAllDropdownValue \n{ \npublic static void main(String[] args) \n{ \n WebDriver driver = new FirefoxDriver(); \n driver.manage().window().maximize(); \n String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n driver.get(URL); \n \n// Wait for some time to load the whole web page. \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on web page by By.xpath. \n   WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\")); \n \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n    Select select = new Select(dropdown); \n \n// Call getOptions() method of select class to get all options available in the list. \n// Since return type of getOptions method is a list of WebElements, therefore, we will store them by creating a variable getOptions of type List of WebElement. \n     List<WebElement> getOptions = select.getOptions(); \n \n// Create a list of generic type String to add all dropdown options in the list. \n   List<String> list = new ArrayList<String>(); \n \n// Use advanced for loop to add all options in the list. \n   for(WebElement element : getOptions) \n   { \n      list.add(element.getText()); // Here, getText() method of WebElement class has been used to add the text label of all the options in the list. \n   } \n  System.out.println(list); \n \n// We can also iterate list one by one by using iterator() method. \n// So, to iterate list, call iterator() method using reference variable list. Since the return type of iterator method is Iterator of generic type String, therefore, we will store it by using a variable itr of generic type String. \n \n// At the beginning, itr (cursor) will point to index just before the first element in the list. \n    Iterator<String> itr = list.iterator(); \n \n// Checking the next element availability using reference variable it. \n   while(itr.hasNext()) \n   { \n// Moving cursor to next element using reference variable it. \n     String str = itr.next(); \n     System.out.println(str); \n    } \n  driver.close(); \n } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class DeselectOptionExample \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n  \n   String URL = \"https://selenium08.blogspot.com/2019/11/dropdown.html\"; \n  driver.get(URL); \n \n// Wait for some time to load the whole web page. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate dropdown element on the web page by By.xpath. \n     WebElement dropdown = driver.findElement(By.xpath(\"//select[@name='Month']\")); \n \n// Create an object of Select class and pass the dropdown of type WebElement as an argument. \n     Select select = new Select(dropdown); \n \n// Verify that the dropdown supports multiple-choice or not.. \n   if(select.isMultiple()) \n   { \n      System.out.println(\"Multiple choices are allowed, Select multiple options in the list \"); \n   } \n else { \n    System.out.println(\"Multiple choices are not allowed\"); \n  } \n// Select the option \"India\" by sending visible text. \n     select.selectByVisibleText(\"May\"); \n \n// Select an option by sending its value. \n     select.selectByValue(\"Ap\"); \n \n// Select an option by sending its index. \n     select.selectByIndex(10); \n \n// Now, we will deselect already selected option by calling deselectByVisibleText() method of the select class. \n   select.deselectByVisibleText(\"May\"); \n   System.out.println(\"Option May is deselected successfully\"); \n   \n   driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceAlert; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class SimpleAlertPop \n{ \npublic static void main(String[] args) \n{ \n// Create an object of FirefoxDriver class. \n   WebDriver driver = new FirefoxDriver(); \n   String URL=\"https://selenium08.blogspot.com/2019/07/alert-test.html\"; \n  \n   driver.get(URL); driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n   driver.manage().window().maximize(); \n \n// Click on simple alert button to show alert box. \n   WebElement element = driver.findElement(By.xpath(\"//input[@id='simple']\")); \n    element.click(); \n \n// Switching to Alert from webpage. \n     Alert alert = driver.switchTo().alert(); \n \n// Get or read the text displayed on Alert popup and save it in a string using variable \"getText\" in order to print it later. \n     String getText = driver.switchTo().alert().getText(); \n     System.out.println(getText); \n \n// Check that the correct message is displayed to the user Alert box. \n     if(getText.equalsIgnoreCase(\"Hello! I am a simple alert box!\")) \n     { \n// Display a message that indicates whether verification was successful. \n      System.out.println(\"It worked, the expected simple alert was shown\"); \n       } \n     else \n     { \n         System.out.println(\"Something went wrong, expected simple alert was not shown\"); \n       } \n// Click OK button, by calling accept() method. \n      alert.accept(); \n      driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceAlert; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ConfirmAcceptTest \n{ \n public static void main(String[] args) \n { \n  WebDriver driver = new FirefoxDriver(); \n  String URL = \"https://selenium08.blogspot.com/2019/07/alert-test.html\"; \n  \n  driver.get(URL); \n  driver.manage().window().maximize(); \n \n  WebElement element = driver.findElement(By.xpath(\"//button[@id='confirm']\")); \n    element.click(); \n \n// Switching to alert from web page. \n    Alert alert = driver.switchTo().alert(); \n    String getText = driver.switchTo().alert().getText(); \n    System.out.println(getText); \n \n if(getText.equalsIgnoreCase(\"This is a confirm alert. Do you want to accept or cancel?\")) \n { \n   alert.accept(); \n   System.out.println(\"You accepted alert\"); \n  } \n else \n { \n    alert.dismiss(); \n    System.out.println(\"You dismissed alert\"); \n  } \n driver.close(); \n  } \n } \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package practiceAlert; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class PromptAlertTest \n{ \npublic static void main(String[] args) \n{ \n  WebDriver driver = new FirefoxDriver(); \n  String URL = \"https://selenium08.blogspot.com/2019/07/alert-test.html\"; \n  driver.get(URL); \n  driver.manage().window().maximize(); \n \n// Click on confirm button to show prompt alert box. \n    WebElement element = driver.findElement(By.xpath(\"//button[@id='prompt']\")); \n     element.click(); \n \n// Switching to alert from web page. \n    Alert alert = driver.switchTo().alert(); \n \n// Enter some text on prompt alert box. \n     alert.sendKeys(\"Deep\"); \n     alert.accept(); \n \n// Check webpage displays message with text entered in prompt box. \n     WebElement displayMessage = driver.findElement(By.id(\"prompt_demo\")); \n     String getText = displayMessage.getText(); \n     System.out.println(getText); \n \n  if(getText.equalsIgnoreCase(\"Hello Deep! How are you today?\")) \n  { \n      System.out.println(\"Exact matched\"); \n  } \n  else { \n     System.out.println(\"Something went wrong\"); \n   } \n    driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \npublic class ListOfActionsClassMethods \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   Actions actions = new Actions(driver); \n    actions. \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class ClickAtCurrentLocation \n{ \npublic static void main(String[] args) \n{ \n// Create a driver object of Firefox browser. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximize the browser. \n    driver.manage().window().maximize(); \n \n// Create a variable URL to store the URL of Google home page. \n// Since the return type of URL is String, we will declare URL as String type. \n     String URL = ”https://www.google.com”; \n \n// Call get() method of WebDriver and pass URL as a parameter. \n     driver.get(URL); \n \n// Wait for some time to load. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the element “Gmail” by By.xpath. \n     WebElement Gmail = driver.findElement(By.xpath(“//a[text()=’Gmail’]”)); \n \n// Create an object of Actions class and pass reference variable driver as a parameter to its constructor. \n     Actions actions = new Actions(driver); \n \n// Get the location and Coordinate (x, y) of WebElement “gmail”. Call getLocation(), getX(), and getY() methods to find the location and coordinate. \n     int getX = gmail.getLocation().getX(); \n     System.out.println(“X coordinate: ” +getX); \n     int getY = gmail.getLocation().getY(); \n     System.out.println(“Y coordinate: ” +getY); \n \n// Call moveByOffset() method of Actions class to move the mouse cursor from initial position to given Offset. \n// Pass the coordinates of x and y as parameters to moveByOffset() method. \n     actions.moveByOffset(getX+1, getY+1).click(); \n     actions.build().perform(); \n  \n     System.out.println(“Clicked Successfully on Gmail”); \n     driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class ClickOnWebElementDirectly \n{ \n public static void main(String[] args) \n { \n// Create a driver object of Firefox browser. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximize the browser. \n     driver.manage().window().maximize(); \n \n// Create a variable URL to store the URL of Google home page. Since the return type of URL is String, we will declare URL as String type. \n     String URL = \"https://www.google.com\"; \n \n// Call get() method of WebDriver and pass URL as a parameter. \n     driver.get(URL); \n \n// Wait for some time to load. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the element “Gmail” by By.xpath. \n     WebElement gmail = driver.findElement(By.xpath(“//a[text()='Gmail']”)); \n \n// Create an object of Actions class and pass reference variable driver as a parameter to its constructor. \n     Actions actions = new Actions(driver); \n     actions.click(gmail); \n     actions.build().perform(); \n    \n     System.out.println(“Clicked Successfully on Gmail”); \n     driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class DblClickAtCurrentLocation \n{ \npublic static void main(String[] args) \n{ \n// Create a driver object for Firfox browser. \n    WebDriver driver = new FirefoxDriver(); \n \n// Maximize web browser. \n   driver.manage().window().maximize(); \n \n// Store URL in a variable URL of String type. \n   String url = \"https://selenium08.blogspot.com/2019/11/double-click.html\"; \n \n// Call get() method and pass the URL as an input parameter. \n   driver.get(url); \n \n// Wait for loading complete web page. \n    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate WebElement by using By.xpath. \n    WebElement dblclick = driver.findElement(By.xpath(\"//button[text() = 'Double-Click me to see Alert message']\")); \n \n// Create an object of Actions class and pass the driver as an parameter. \n   Actions actions = new Actions(driver); \n \n// Call moveToElement() method to move the mouse to the location of button element and pass element as an input parameter. \n   actions.moveToElement(dblclick); // Line 1. \n \n// Call doubleClick() method to peform the double-click action at current location. \n    actions.doubleClick(); // Line 2. \n \n// Call perform() method to perform a sequence of actions. \n   actions.perform(); //Line 3. \n \n// The Line 1, Line 2, and Line 3 can also be written in a single line like this: \n// actions.moveToElement(dblclick).doubleClick().perform(); \n \n  System.out.println(\"Double click action performed successfully at current location\"); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class DblClickWebElement \n{ \n public static void main(String[] args) \n { \n// Create a driver object for Firfox browser. \n   WebDriver driver = new FirefoxDriver(); \n \n// Maximize web browser. \n   driver.manage().window().maximize(); \n \n// Store URL in a variable URL of String type. \n   String url=\"https://selenium08.blogspot.com/2019/11/double-click.html\"; \n \n// Call get() method and pass the URL as an input parameter. \n   driver.get(url); \n \n// Wait for loading complete web page. \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate WebElement by using By.xpath. \n   WebElement dblclick = driver.findElement(By.xpath(\"//button[text() = 'Double-Click me to see Alert message']\")); \n \n// Create an object of Actions class and pass the driver as an parameter. \n   Actions actions = new Actions(driver); \n \n// Call doubleClick() method to peform the double-click action at current location. \n   actions.doubleClick(dblclick); // Line 2. \n \n// Call perform() method to perform a sequence of actions. \n   actions.perform(); //Line 3. \n \n// The Line 1, Line 2, and Line 3 can also be written in a single line like this: \n// actions.doubleClick(dblclick).perform(); \n    \n    System.out.println(\"Double click action performed successfully on an element\"); \n \n// Switching to Alert from web page. \n   Alert alert = driver.switchTo().alert(); \n \n// Capture the text displayed on pop up and save it in a variable getText of type String. \n   String getText = alert.getText(); \n   System.out.println(\"Alert text: \" +getText); \n \n// Click on OK button. \n   alert.accept(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class RCActionWebElement \n{ \npublic static void main(String[] args) \n{ \n// Create a driver object to launch Firefox browser. \n   WebDriver driver = new FirefoxDriver(); \n \n// Maximize the browser. \n   driver.manage().window().maximize(); \n \n// Create a variable URL of String type to store the URL. \n     String url = \"https://selenium08.blogspot.com/2019/12/right-click.html\"; \n \n// Call get() method of WebDriver and pass URL as a parameter. \n     driver.get(url); \n \n// Wait for some time to load web page. \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the WebElement by By.xpath. \n   WebElement contextMenu = driver.findElement(By.xpath(\"//div[@id = 'div-context']\")); \n \n// Create an object of Actions class and pass reference variable driver as a parameter to its constructor. \n     Actions actions = new Actions(driver); \n      actions.contextClick(contextMenu); \n \n// Locate an element \"Python\" by By.xpath in the context menu. \n     WebElement python = driver.findElement(By.xpath(\"//a[text() = 'Python']\")); \n \n// Call click(WebElement) method and pass element as an input parameter. \n     actions.click( python ); \n     actions.perform(); \n    System.out.println(\"Right-clicked Successfully on Context menu\"); \n \n// Switch to alert pop-up from web page by using below syntax. \n   Alert alert = driver.switchTo().alert(); \n \n// Get text displayed on pop-up. \n   String getText = alert.getText(); \n   System.out.println(\"Displayed Text on pop-up: \" +getText); \n \n// Call accept() method of alert interface to click OK button to accept pop-up. \n     alert.accept(); \n     driver.close(); \n   } \n } \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class RCActionCurrentLocation \n{ \npublic static void main(String[] args) \n{ \n WebDriver driver = new FirefoxDriver(); \n driver.manage().window().maximize(); \n \n// Create a variable URL of String type to store the URL. \n   String url = \"https://selenium08.blogspot.com/2019/12/right-click.html\"; \n \n// Call get() method of WebDriver and pass URL as a parameter. \n   driver.get(url); \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the WebElement by By.xpath. \n   WebElement contextMenu = driver.findElement(By.xpath(\"//div[@id = 'div-context']\")); \n \n// Create an object of Actions class and pass reference variable driver as a parameter to its constructor. \n   Actions actions = new Actions(driver); \n \n// Call moveToElement() method to move the mouse cursor from initial position (0,0) to element contextMenu. \n    actions.moveToElement(contextMenu); // Passing contextMenu as an parameter. \n    actions.contextClick(); // Calling contextClick() method to right click on context menu. \n \n// Locate an element \"Java\" by By.xpath in the context menu. \n    WebElement java = driver.findElement(By.xpath(\"//a[text() = 'Java']\")); \n \n// Call click(WebElement) method and pass element as an input parameter. \n   actions.click( java ); \n   actions.perform(); \n  System.out.println(\"Right-clicked Successfully on Context menu\"); \n \n// Switch to alert pop-up from web page by using below syntax. \n   Alert alert = driver.switchTo().alert(); \n \n// Get text displayed on pop-up. \n   String getText = alert.getText(); \n   System.out.println(\"Displayed Text on pop-up: \" +getText); \n \n// Call accept() method of alert interface to click OK button to accept pop-up. \n   alert.accept(); \n   driver.close(); \n  } \n } \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package clickAndHoldAction; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class ClickAndHold \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n   \n   String url = \"https://selenium08.blogspot.com/2020/01/click-and-hold.html\"; \n   driver.get(url); \n \n// Locate the element C by By.xpath. \n     WebElement titleC = driver.findElement(By.xpath(\"//li[text()= 'C']\")); \n \n// Create an object of actions class and pass reference of WebDriver as a parameter to its constructor. \n     Actions actions = new Actions(driver); \n \n// Move the cursor to the position of element C. \n     actions.moveToElement(titleC); // Call clickAndHold() method to perform click and hold operation. \n     actions.clickAndHold().perform(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package clickAndHoldAction; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class ClickAndHold \n{ \npublic static void main(String[] args) \n{ \n  WebDriver driver = new FirefoxDriver(); \n  driver.manage().window().maximize(); \n \n  String url = \"https://selenium08.blogspot.com/2020/01/click-and-hold.html\"; \n  driver.get(url); \n \n// Locate the element C by By.xpath. \n     WebElement titleC = driver.findElement(By.xpath(\"//li[text()= 'C']\")); \n \n// Create an object of actions class and pass reference of WebDriver as a parameter to its constructor. \n     Actions actions = new Actions(driver); \n \n// Call clickAndHold() method to perform click and hold operation on element C. \n     actions.clickAndHold(titleC).perform(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package moveToElementAction; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class MoveToElement \n{ \npublic static void main(String[] args) \n{ \n WebDriver driver = new FirefoxDriver(); \n driver.manage().window().maximize(); \n \n  String url = \"https://selenium08.blogspot.com/2020/01/click-and-hold.html\"; \n   driver.get(url); \n \n// Locate the element A by By.xpath. \n  WebElement titleA = driver.findElement(By.xpath(\"//li[text()= 'A']\")); \n  WebElement titleC = driver.findElement(By.xpath(\"//li[text()= 'C']\")); \n \n// Create an object of actions class and pass reference of WebDriver as a parameter to its constructor. \n   Actions actions = new Actions(driver); \n \n// Call moveToElement() method of actions class to move mouse cursor to a WebElement A. \n   actions.moveToElement(titleA); \n   actions.clickAndHold(); \n   \n   actions.moveToElement(titleC); \n   actions.release().perform(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package dragAndDropAction; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class DragAndDropByDemo \n{ \npublic static void main(String[] args) \n{ \n  WebDriver driver = new FirefoxDriver(); \n  driver.manage().window().maximize(); \n \n   String URL = \"https://selenium08.blogspot.com/2020/01/drag-me.html\"; \n   driver.get(URL); \n \n// Locate WebElements by By.id. \n   WebElement src = driver.findElement(By.id(\"draggable\")); \n \n// Create an object of Actions class and pass the driver object reference to its constructor. \n   Actions actions = new Actions(driver); \n \n// Call dragAndDropBy() method of actions class. \n     actions.dragAndDropBy(src, 200, 150); \n     actions.build().perform(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package dragAndDropAction; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class DragAndDropAction \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n  driver.manage().window().maximize(); \n  \n  String URL = \"https://selenium08.blogspot.com/2020/01/drag-drop.html\"; \n  driver.get(URL); \n \n// Locate WebElements by By.id. \n   WebElement src = driver.findElement(By.id(\"draggable\")); \n   WebElement trgt = driver.findElement(By.id(\"droppable\")); \n \n// Create an object of Actions class and pass driver object reference to its constructor. \n     Actions actions = new Actions(driver); \n \n// Call dragAndDrop() method of actions class. \n     actions.dragAndDrop(src, trgt); \n     actions.build().perform(); \n  \n     System.out.println(\"Drag and drop action has been performed successfully\"); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class GetTitle \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n \n// Maximize the window. \n   driver.manage().window().maximize(); \n \n// Store the URL of home page in a variable URL of type String. \n    String URL = \"https://www.google.com\"; \n \n// Call get() method and pass URL as a parameter. \n    driver.get(URL); \n    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n    JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Call executeScript() method to get the title of web page. \n     Object title = js.executeScript(\"return document.title\"); // Here, the return type of executeScript() method is object. \n \n// Since the return type of executeScript() method is object, we need to perform type casting to get title in String text. \n     String getTitle = (String)title; \n     System.out.println(\"Title of Home page: \" +getTitle); \n \n// The last three lines of code can also be written in one line like this: \n// String getTitle = (String)js.executeScript(\"return document.title\"); \n   \n   driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ClickExample \n{ \npublic static void main(String[] args) \n{ \n  WebDriver driver = new FirefoxDriver(); \n  driver.manage().window().maximize(); \n \n      String URL = \"https://www.google.com\"; \n// Call get() method and pass URL as a parameter. \n     driver.get(URL); \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the WebElement Searchbox and submit button of Google home page by By.xpath. \n   WebElement search = driver.findElement(By.xpath(\"//input[@name = 'q']\")); \n   WebElement submit = driver.findElement(By.xpath(\"//input[@name = 'btnK']\")); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n   JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Send a text value \"Selenium\" using JavascriptExecutor. \n   js.executeScript(\"arguments[0].value = 'Selenium'\", search); // Line 1 \n \n// Click on submit button using JavascriptExecutor. \n   js.executeScript(\"arguments[0].click()\", submit); // Line 2 \n \n// We can write Line 1 and Line 2 code in a single line like this: \n// js.executeScript(\"arguments[0].value = 'Selenium', arguments[1].click()\", search, submit); \n \n   System.out.println(\"Test successful\"); \n   driver.close(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class SleepTest \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n   \n   driver.get(\"https://selenium08.blogspot.com/\"); \n   driver.manage().timeouts().setScriptTimeout(20, TimeUnit.SECONDS); \n \n    JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Declare and set the start time. \n   long start_time = System.currentTimeMillis(); \n   System.out.println(\"Start_time: \" +start_time); \n \n// Call executeAsyncScript() method of JavascriptExecutor to wait for 5 seconds. \n     js.executeAsyncScript(\"window.setTimeout(arguments[arguments.length - 1], 5000);\"); \n   \n    long current_time = System.currentTimeMillis(); \n    System.out.println(\"Current_time: \" +current_time); \n \n// Get the difference (current time - startTime) of times. \n     System.out.println(\"Passed time: \" + (current_time - start_time)); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package scrollUpandDown; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class VerticalScrollDown \n{ \npublic static void main(String[] args) \n{ \n// Create driver object. \n   WebDriver driver = new FirefoxDriver(); \n \n// Maximizing the window. \n   driver.manage().window().maximize(); \n \n// Launch the application. \n    String url = \"https://www.yahoo.com\"; \n     driver.get(url); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n     JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Call scrollBy() method of Javascript using window object with passing number of pixels as parameter values. \n// Call executeScript() method of JavascriptExecutor interface with passing window.scrollBy() as parameter value. \n      \n      js.executeScript(\"window.scrollBy(0,1000)\"); // It will scroll down the page by 1000 pixel vertical \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package scrollUpandDown; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ScrollByVisibleElement \n{ \npublic static void main(String[] args) \n{ \n// Create driver object. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximizing the window. \n     driver.manage().window().maximize(); \n \n// Launch the application. \n     String URL = \"https://selenium08.blogspot.com/2020/02/vertical-scroll.html\"; \n      driver.get(URL); \n \n// Locate web element \"Health\" by By.xpath. \n     WebElement element = driver.findElement(By.xpath(\"//a[text() = 'Health']\")); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n     JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Call scrollIntoView() method of Javascript using magic variable arguments[0]. \n// Call executeScript() method JavascriptExecutor interface with passing arguments[0].scrollIntoView() as parameter values. \n    \n      js.executeScript(\"arguments[0].scrollIntoView();\", element); // It will scroll down the page by visibility of element \"Health\". \n   } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package scrollUpandDown; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ScrollByPage \n{ \npublic static void main(String[] args) \n{ \n// Create driver object. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximizing the window. \n     driver.manage().window().maximize(); \n \n// Launch the application. \n     String URL = \"https://selenium08.blogspot.com/\"; driver.get(URL); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n     JavascriptExecutor js = (JavascriptExecutor) driver; \n \n// Call scrollTo() method of Javascript using window object. \n      js.executeScript(\"window.scrollTo(0, document.body.scrollHeight)\"); // It will scroll down until the end of the page . \n  } \n } \n ", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package scrollUpandDown; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class ScrollHorizontal { \n public static void main(String[] args) \n{ \n// Create web driver object. \n     WebDriver driver = new FirefoxDriver(); \n \n// Maximizing the window. \n     driver.manage().window().maximize(); \n \n// Launch the application. \n     String url = \"https://selenium08.blogspot.com/2020/02/horizontal-scroll.html\"; \n      driver.get(url); \n     WebElement element = driver.findElement(By.xpath(\"//a[text() = 'Relationship']\")); \n \n// Create the JavascriptExecutor interface object by Type casting of WebDriver instance. \n      JavascriptExecutor js = (JavascriptExecutor)driver; \n \n// Call scrollIntoView() method of Javascript using arguments[0]. \n      js.executeScript(\"arguments[0].scrollIntoView();\", element); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class FrameDemo \n{ \n public static void main(String[] args) \n { \n// Create a driver object for Firefox browser. \n    WebDriver driver = new FirefoxDriver(); \n \n// Maximize the web browser. \n    driver.manage().window().maximize(); \n \n// Store the URL in a variable of type String. \n     String URL = \"https://selenium08.blogspot.com/2019/11/selenium-iframe.html\"; \n \n// Call get() method and pass the URL as a parameter. \n     driver.get(URL); \n \n// Wait for some time to load web page completely. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate the total number of iframes on the web page. \n     int iFrameSize = driver.findElements(By.tagName(\"iframe\")).size(); \n     System.out.println(\"Toal no of iframes: \" +iFrameSize); \n \n// Locate the first iframe and switch driver to first iframe by index value 0. \n     driver.switchTo().frame(0); \n     driver.findElement(By.xpath(\"//input[@itemprop = 'query-input']\")).sendKeys(\"Selenium Jobs\"); \n     driver.findElement(By.xpath(\"//button[@class = 'wpb_button wpb_btn-inverse btn']\")).click(); \n \n// Now, switch to main web page from iframe by using defaultContent() method. \n     driver.switchTo().defaultContent(); \n \n// Closing first frame. \n     String getTitleOfMain = driver.getTitle(); \n     System.out.println(\"Title of main web page: \" +getTitleOfMain); \n   \n     String mainPageURL = driver.getCurrentUrl(); \n     System.out.println(\"URL of main web page: \" +mainPageURL); \n \n// Switch to second iframe by its index value 1. \n     driver.switchTo().frame(1); \n     driver.findElement(By.xpath(\"//input[@value = 'Register with us']\")).click(); \n   \n      driver.quit(); \n  } \n } \n ", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class FrameDemo2 \n{ \npublic static void main(String[] args) \n{ \n// Create a driver object for Firefox browser. \n    WebDriver driver = new FirefoxDriver(); \n \n// Maximize the web browser. \n    driver.manage().window().maximize(); \n \n// Store the URL in a variable of type String. \n     String URL = \"https://selenium08.blogspot.com/2019/11/selenium-iframe.html\"; \n \n// Call get() method and pass the URL as a parameter. \n     driver.get(URL); \n \n// Wait for some time to load web page completely. \n     driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate iframe and switch driver context to first iframe by value of name attribute. \n     System.out.println(\"Switching to first frame from main web page\"); \n     driver.switchTo().frame(\"iframe_a\"); \n   \n     driver.findElement(By.xpath(\"//input[@itemprop = 'query-input']\")).sendKeys(\"Selenium Jobs\"); \n     driver.findElement(By.xpath(\"//button[@class = 'wpb_button wpb_btn-inverse btn']\")).click(); \n \n// Switch to main web page from iframe by using defaultContent() method. \n     System.out.println(\"Switching to main web page from first frame\"); \n     driver.switchTo().defaultContent(); \n \n// Click on link text. \n     driver.findElement(By.xpath(\"//a[text() = 'Freshers Now']\")).click(); \n     System.out.println(\"Clicked on link text successfully.\"); \n   \n     driver.quit(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package seleniumProject; \nimport java.util.concurrent.TimeUnit; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class FrameDemo3 \n{ \n public static void main(String[] args) \n { \n   WebDriver driver = new FirefoxDriver(); \n   driver.manage().window().maximize(); \n  \n   String URL = \"https://selenium08.blogspot.com/2019/11/selenium-iframe.html\"; \n   driver.get(URL); \n   driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n// Locate second frame (Naukri) by WebElement. \n    WebElement frameElement = driver.findElement(By.name(\"iframe_b\")); // Here, frame is located by using name attribute. \n    System.out.println(\"Switching to second frame from main web page\"); \n    driver.switchTo().frame(frameElement); // Passing frameElement as an input parameter to frame(). \n \n// After switching to the frame, locate element CREATE JOB ALERT By.xpath. \n     WebElement jobAlert = driver.findElement(By.xpath(\"//a[text() = 'CREATE JOB ALERT' ]\")); \n      jobAlert.click(); \n \n// Switch to main web page from iframe by using defaultContent() method. \n     System.out.println(\"Switching to main web page from second frame\"); \n     driver.switchTo().defaultContent(); \n   \n     driver.quit(); \n  } \n} \n", "meta": {"set_name": "scientecheasy (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.Alert; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class AlertPopUpHandle { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.get(\"https://mail.rediff.com/cgi-bin/login.cgi\"); \n		 \n		driver.findElement(By.name(\"proceed\")).click(); //click on Go btn \n		 \n		Thread.sleep(5000); \n		 \n		Alert alert = driver.switchTo().alert(); \n		 \n		System.out.println(alert.getText()); \n		 \n		String text = alert.getText(); \n		 \n		if(text.equals(\"Please enter a valid user name\")){ \n			System.out.println(\"correct alert messg\"); \n		} \n		else{ \n			System.out.println(\"in-correct alert messg\"); \n		} \n		 \n		alert.accept(); //click on OK btn \n		 \n		//alert.dismiss(); //click on cancel btn \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.NoSuchElementException; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class CalendarSelectTest { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS); \n \n		driver.get(\"https://www.freecrm.com/\"); // enter URL \n		 \n		driver.findElement(By.name(\"username\")).sendKeys(\"naveenk\"); \n		driver.findElement(By.name(\"password\")).sendKeys(\"test@123\"); \n		Thread.sleep(3000); \n		driver.findElement(By.xpath(\"//input[@type='submit']\")).click(); //login button \n		 \n		driver.switchTo().frame(\"mainpanel\"); \n		 \n		String date = \"32-May-2017\"; \n		String dateArr[] = date.split(\"-\"); // {18,September,2017} \n		String day = dateArr[0]; \n		String month = dateArr[1]; \n		String year = dateArr[2]; \n		 \n		Select select = new Select(driver.findElement(By.name(\"slctMonth\"))); \n		select.selectByVisibleText(month); \n		 \n		Select select1 = new Select(driver.findElement(By.name(\"slctYear\"))); \n		select1.selectByVisibleText(year); \n		 \n		//*[@id='crmcalendar']/table/tbody/tr[2]/td/table/tbody/tr[2]/td[1] \n		//*[@id='crmcalendar']/table/tbody/tr[2]/td/table/tbody/tr[2]/td[2]	 \n		//*[@id='crmcalendar']/table/tbody/tr[2]/td/table/tbody/tr[2]/td[6] \n		 \n		String beforeXpath = \"//*[@id='crmcalendar']/table/tbody/tr[2]/td/table/tbody/tr[\"; \n		String afterXpath = \"]/td[\"; \n		 \n		final int totalWeekDays = 7; \n		 \n		//2-1 2-2 2-3 2-4 2-5 2-6 2-7 \n		//3-2 3-2 3-3 3-4 3-5 3-6 3-7 \n		boolean flag = false; \n		String dayVal = null; \n		for(int rowNum=2; rowNum<=7; rowNum++){ \n			 \n			for(int colNum = 1; colNum<=totalWeekDays; colNum++){ \n				try{ \n			    dayVal =driver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+\"]\")).getText(); \n				}catch (NoSuchElementException e){ \n					System.out.println(\"Please enter a correct date value\"); \n					flag = false; \n					break; \n				} \n				System.out.println(dayVal); \n				if(dayVal.equals(day)){ \n					driver.findElement(By.xpath(beforeXpath+rowNum+afterXpath+colNum+\"]\")).click(); \n					flag = true; \n					break; \n				}				 \n			} \n			if(flag){ \n				break; \n			} \n			 \n		} \n	 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class CheckVisibilityElement { \n	 \n	/** \n	 * \n	 * Learn difference between: \n \nisDisplayed()  v/s  isEnabled()  v/s   isSelected() \n \nNotes: \n•	isDisplayed() is the method used to verify presence of a web element within the webpage. \n The method returns a “true” value if the specified web element is present on the web page and a “false” value if the web element is not present on the web page. \n•	isDisplayed() is capable to check for the presence of all kinds of web elements available. \n•	isEnabled() is the method used to verify if the web element is enabled or disabled within the webpage. \n•	isEnabled() is primarily used with buttons. \n•	isSelected() is the method used to verify if the web element is selected or not. isSelected() \nmethod is pre-dominantly used with radio buttons, dropdowns and checkboxes. \n \n	 * \n	 */ \n	 \n	 \n	 \n \n	public static void main(String[] args) throws InterruptedException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		// dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n		driver.get(\"https://www.freecrm.com/register/\"); // enter URL \n		 \n		//isDiplayed() Method: \n		boolean b1 = driver.findElement(By.id(\"submitButton\")).isDisplayed(); \n		System.out.println(b1); //true \n		 \n		//before selecting checkbox --I agree \n		//isEnabled() method: \n		boolean b2 = driver.findElement(By.id(\"submitButton\")).isEnabled(); \n		System.out.println(b2); //false \n		 \n		//lets make submit button enabled: \n		driver.findElement(By.name(\"agreeTerms\")).click(); //check I Agree checkbox \n		 \n		//after selecting checkbox --I agree \n		//isEnabled() method: \n		boolean b3 = driver.findElement(By.id(\"submitButton\")).isEnabled(); \n		System.out.println(b3); //true \n		 \n		 \n		//isSelected() method: only applicable for checkbox, dropdown, radiobutton \n		boolean flag1 = driver.findElement(By.name(\"agreeTerms\")).isSelected(); \n		System.out.println(flag1); //true \n				 \n		//de-select the checkbox-- I Agree \n		driver.findElement(By.name(\"agreeTerms\")).click(); //check I Agree checkbox \n \n		boolean flag2 = driver.findElement(By.name(\"agreeTerms\")).isSelected(); \n		System.out.println(flag2); //false \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class CustomXpath { \n \n	public static void main(String[] args) { \n \nSystem.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); \n		 \n		driver.get(\"http://www.half.ebay.com\"); //enter URL \n \n		//absolute xpath: not recommended \n		//*[@id='headersearchbar']/div/div[2]/table/tbody/tr/td[2]/input \n		//1. performance issue \n		//2. not reliable \n		//3. can be changed at any time in future \n		 \n		//driver.findElement(By.xpath(\"//input[@class='actextbox']\")).sendKeys(\"Java\"); \n		 \n		//driver.findElement(By.xpath(\"//input[@name='query']\")).sendKeys(\"Java\"); \n		 \n		driver.findElement(By.xpath(\"//input[contains(@class,'actextbox')]\")).sendKeys(\"Java\"); \n		 \n		//dynamic id: input \n		//id = test_123 \n		//By.id(\"test_123\") \n		 \n		//starts-with \n		//id = test_456 \n		//id = test_789 \n		//id = test_test_7890_test \n		 \n		//ends-with \n		//id = 1234_test_t \n		//id = 23456_test_t \n		//id = 6789_test_t \n		 \n//		driver.findElement(By.xpath(\"//input[contains(@id,'test_')]\")).sendKeys(\"Test\"); \n//		driver.findElement(By.xpath(\"//input[starts-with(@id,'test_')]\")).sendKeys(\"Test\"); \n//		driver.findElement(By.xpath(\"//input[ends-with(@id,'_test_t')]\")).sendKeys(\"Test\"); \n		 \n		//for links: custom xpath: \n		//all the links are represented by <a> html tag: \n		driver.findElement(By.xpath(\"//a[contains(text(),'My Account')]\")).click(); \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class DragAndDropConcept { \n \n	public static void main(String[] args) { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		driver.manage().window().maximize(); \n		driver.manage().deleteAllCookies(); \n		 \n		driver.get(\"http://jqueryui.com/droppable/\"); \n		 \n		driver.switchTo().frame(0);//switch to frame if its present \n		 \n		Actions action = new Actions(driver); \n		 \n		action.clickAndHold(driver.findElement(By.xpath(\"//*[@id='draggable']\"))) \n		.moveToElement(driver.findElement(By.xpath(\"//*[@id='droppable']\"))) \n		.release() \n		.build() \n		.perform(); \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class DynamicWebTableHandle { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		// dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n		driver.get(\"https://www.freecrm.com/\"); // enter URL \n		 \n		driver.findElement(By.name(\"username\")).sendKeys(\"naveenk\"); \n		driver.findElement(By.name(\"password\")).sendKeys(\"test@123\"); \n		Thread.sleep(3000); \n \n		driver.findElement(By.xpath(\"//input[@type='submit']\")).click(); \n		 \n		driver.switchTo().frame(\"mainpanel\"); \n		Thread.sleep(2000); \n		 \n		driver.findElement(By.xpath(\"//a[contains(text(),'Contacts')]\")).click(); \n		 \n		//*[@id='vContactsForm']/table/tbody/tr[4]/td[2]/a \n		//*[@id='vContactsForm']/table/tbody/tr[5]/td[2]/a \n		//*[@id='vContactsForm']/table/tbody/tr[6]/td[2]/a		 \n		//*[@id='vContactsForm']/table/tbody/tr[7]/td[2]/a \n		 \n		 \n		//Method-1: \n		String before_xpath = \"//*[@id='vContactsForm']/table/tbody/tr[\"; \n		String after_xpath = \"]/td[2]/a\"; \n		 \n		for(int i=4; i<=7; i++){ \n			String name = driver.findElement(By.xpath(before_xpath + i + after_xpath)).getText(); \n			System.out.println(name); \n			if(name.contains(\"test2 test2\")){ //i=6 \n				//*[@id='vContactsForm']/table/tbody/tr[6]/td[1]/input \n				driver.findElement(By.xpath(\"//*[@id='vContactsForm']/table/tbody/tr[\"+i+\"]/td[1]/input\")).click(); \n			} \n		} \n		 \n		//Method-2: \n		driver.findElement(By.xpath(\"//a[contains(text(),'test2 test2')]/parent::td//preceding-sibling::td//input[@name='contact_id']\")).click(); \n		driver.findElement(By.xpath(\"//a[contains(text(),'ui uiii')]/parent::td//preceding-sibling::td//input[@name='contact_id']\")).click(); \n \n		 \n		 \n		 \n		 \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class ElementVisibilityTest { \n \n	public static void main(String[] args) { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		// dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n		driver.get(\"https://www.freecrm.com/register/\"); // enter URL \n		 \n		//1. isDisplayed() method: applicanle for all the elements \n		boolean b1 = driver.findElement(By.id(\"submitButton\")).isDisplayed(); //for submit button \n		System.out.println(b1); //true \n		 \n		//2. isEnabled() method: \n		boolean b2 = driver.findElement(By.id(\"submitButton\")).isEnabled(); \n		System.out.println(b2);//false \n		 \n		//select I Agree checkbox: \n		driver.findElement(By.name(\"agreeTerms\")).click();  //--submit button is enabled now \n		boolean b3 = driver.findElement(By.id(\"submitButton\")).isEnabled(); \n		System.out.println(b3);//true \n		 \n		 \n		//3. isSelected() method: only applicable for checkbox, dropdown, radiobutton \n		boolean b4 = driver.findElement(By.name(\"agreeTerms\")).isSelected(); \n		System.out.println(b4);//true \n		 \n		 \n		//de-select the checkbox: \n		driver.findElement(By.name(\"agreeTerms\")).click(); \n		boolean b5 = driver.findElement(By.name(\"agreeTerms\")).isSelected(); \n		System.out.println(b5);//false \n		 \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.StaleElementReferenceException; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.support.ui.ExpectedConditions; \nimport org.openqa.selenium.support.ui.WebDriverWait; \n \n \npublic class ExplicitWaitConcept { \n \n	public static void main(String[] args) { \n \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n		WebDriver driver = new ChromeDriver(); // launch chrome \n		driver.manage().window().maximize(); \n		driver.manage().deleteAllCookies(); \n		 \n		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS); \n \n		driver.get(\"http://www.facebook.com\"); \n		 \n		clickOn(driver, driver.findElement(By.xpath(\"//*[@id='u_0_2']\")), 20);//login button \n		 \n		clickOn(driver, driver.findElement(By.xpath(\"//*[@id='reg_pages_msg']/a\")), 10); //create a page link \n		 \n		 \n	} \n	 \n	 \n	 \n	public static void clickOn(WebDriver driver, WebElement locator, int timeout) { \n		new WebDriverWait(driver, timeout).ignoring(StaleElementReferenceException.class).until(ExpectedConditions.elementToBeClickable(locator)); \n		locator.click(); \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.List; \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class FindElementsConcept { \n \n	public static void main(String[] args) { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); \n		 \n		driver.get(\"http://www.facebook.com\"); //enter URL \n		 \n		 \n		//1. get the total count of links on the page \n		//2. get the text of each link on the page \n		 \n		//all the links are represented by <a> html tag: \n \n		List <WebElement> linkList = driver.findElements(By.tagName(\"a\")); \n		 \n		//size of linkList: \n		System.out.println(linkList.size()); \n		 \n		for(int i=0; i<linkList.size(); i++){ \n			String linkText = linkList.get(i).getText(); \n			System.out.println(linkText); \n		} \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class FrameHandling { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); \n		 \n		driver.get(\"https://www.freecrm.com/\"); //enter URL \n		 \n		driver.findElement(By.name(\"username\")).sendKeys(\"naveenk\"); \n		driver.findElement(By.name(\"password\")).sendKeys(\"test@123\"); \n		driver.findElement(By.xpath(\"//input[@type='submit']\")).click(); \n		Thread.sleep(3000); \n		 \n		driver.switchTo().frame(\"mainpanel\"); \n		Thread.sleep(2000); \n		 \n		driver.findElement(By.xpath(\"//a[contains(text(),'Contacts')]\")).click(); \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.List; \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class GoogleSearchTest { \n \n	public static void main(String[] args) { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		// dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \n \n		driver.get(\"http://www.google.com\"); \n		 \n		driver.findElement(By.id(\"lst-ib\")).sendKeys(\"Java\"); \n		 \n		List<WebElement> list = driver.findElements(By.xpath(\"//ul[@role='listbox']//li/descendant::div[@class='sbqs_c']\")); \n		 \n		System.out.println(\"total number of suggestions in search box:::===>\" + list.size()); \n		 \n		for(int i=0; i<list.size(); i++){ \n			System.out.println(list.get(i).getText()); \n			if(list.get(i).getText().contains(\"java tutorial\")){ \n				list.get(i).click(); \n				break; \n			} \n			 \n		} \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.support.ui.Select; \n \npublic class HandleDropBox { \n \n	public static void main(String[] args) { \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.get(\"https://scgi.half.ebay.com/ws/eBayISAPI.dll?RegisterEnterInfo&usage=2943&ru=\");	//enter url \n		 \n		//handle drop box: \n		Select select = new Select(driver.findElement(By.id(\"state\"))); \n		select.selectByVisibleText(\"California\"); \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class HandleFileUploadPopUp { \n \n	public static void main(String[] args) { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.get(\"http://html.com/input-type-file/\"); \n \n		driver.findElement(By.xpath(\"//*[@id='fileupload']\")).sendKeys(\"/Users/naveenkhunteta/Desktop/Extent.html\"); \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.Iterator; \nimport java.util.Set; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class HandleWindowPopUp { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		//1. alerts -- JavaScript Pop UP-- Alert API (accept, dismiss) \n		//2. File Upload pop up -- Browse Button (type = file, sendKeys(path) \n		//3. Browser Window Popup - Advertisement pop up (windowHandler API - getWindowHandles() ) \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.get(\"http://www.popuptest.com/goodpopups.html\"); \n		 \n		driver.findElement(By.xpath(\"html/body/table[2]/tbody/tr/td/font/b/a[3]\")).click(); \n		 \n		Thread.sleep(2000); \n		 \n		Set<String> handler = driver.getWindowHandles(); \n		 \n		Iterator<String> it = handler.iterator(); \n		 \n		String parentWindowId = it.next(); \n		System.out.println(\"parent window id:\"+ parentWindowId); \n		 \n		 \n		String childWindowId = it.next(); \n		System.out.println(\"Child window id:\"+childWindowId); \n		 \n		driver.switchTo().window(childWindowId); \n		 \n		Thread.sleep(2000); \n		 \n		System.out.println(\"child window pop up title\"+driver.getTitle()); \n		 \n		driver.close(); \n		 \n		driver.switchTo().window(parentWindowId); \n		 \n		Thread.sleep(2000); \n		 \n		System.out.println(\"parent window title\"+driver.getTitle()); \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.htmlunit.HtmlUnitDriver; \n \npublic class HtmlUnitDriverConcept { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		 \n		//WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		//htmlunitdriver is not available in Selenium 3.x version. \n		//htmlunitdriver -- to use this concept, we have to download htmlunitdriver JAR file. \n		 \n		//advantages: \n		//1. testing is happening behind the scene -- no browser is launched \n		//2. Very fast -- execution of test cases -- very fast -- performance of the script \n		//3. not suitable for Actions class -- user actions -- mousemovement, doubleClick, drag and drop \n		//4. Ghost Driver -- HeadLess Browser: \n			//--HtmlUnit Driver -- JAva \n			//--PhantomJS -- JavaScript \n		 \n		 \n		WebDriver driver = new HtmlUnitDriver(); \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(20, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS); \n		 \n		driver.get(\"http://www.freecrm.com\"); \n		 \n		System.out.println(\"Before login, title is:===\"+ driver.getTitle()); \n		 \n		driver.findElement(By.name(\"username\")).sendKeys(\"naveenk\"); \n		driver.findElement(By.name(\"password\")).sendKeys(\"test@123\"); \n		 \n		driver.findElement(By.xpath(\"//input[@type='submit']\")).click(); \n		 \n		Thread.sleep(2000); \n		 \n		System.out.println(\"after login, title is:===\"+ driver.getTitle()); \n		 \n		 \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class ImplicitWaitConcept { \n \n	public static void main(String[] args) { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		driver.get(\"http://www.half.ebay.com\"); //enter URL \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.io.File; \nimport java.io.IOException; \nimport java.util.concurrent.TimeUnit; \n \nimport org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.OutputType; \nimport org.openqa.selenium.TakesScreenshot; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class JavaScriptExecutorConcept { \n \n	public static void main(String[] args) throws IOException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.manage().window().maximize(); //maximize window \n		driver.manage().deleteAllCookies(); //delete all the cookies \n		 \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); \n		 \n		driver.get(\"https://www.freecrm.com\"); //enter URL \n		 \n		driver.findElement(By.name(\"username\")).sendKeys(\"naveenk\"); \n		driver.findElement(By.name(\"password\")).sendKeys(\"test@1234\"); \n		//driver.findElement(By.xpath(\"//input[contains(@type,'submit')]\")).click(); \n		 \n		//executeScript -- to execute JavaScript code \n		 \n		WebElement loginBtn = driver.findElement(By.xpath(\"//input[contains(@type,'submit')]\")); //login button \n		 \n		 \n		flash(loginBtn, driver); //highlight the element \n		 \n		drawBorder(loginBtn, driver); //draw a border \n		//take screenshot: \n		// Take screenshot and store as a file format \n		File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE); \n		// now copy the screenshot to desired location using copyFile //method \n		FileUtils.copyFile(src, new File(\"/Users/naveenkhunteta/Documents/workspace/MorningSessions/src/SeleniumSessions/element.png\")); \n		 \n		//generate Alert \n		//generateAlert(driver, \"There is an issue with Login button on Login Page\"); \n		 \n		//click on any element by using JS executor \n		clickElementByJS(loginBtn, driver); \n		 \n		//refresh the page: \n		//1. by using selenium: \n		driver.navigate().refresh(); \n		 \n		//2. by using JS executor: \n		refreshBrowserByJS(driver); \n		 \n		//get the tile of the page by JS: \n		System.out.println(getTitleByJS(driver)); \n		 \n		//get the page text: \n		System.out.println(getPageInnerText(driver)); \n		 \n		//scroll page down: \n		//scrollPageDown(driver); \n		 \n		WebElement forgotPwdLink = driver.findElement(By.xpath(\"//a[contains(text(),'Forgot Password?')]\")); \n		scrollIntoView(forgotPwdLink, driver); \n		 \n	} \n	 \n	 \n	public static void flash(WebElement element, WebDriver driver) { \n        JavascriptExecutor js = ((JavascriptExecutor) driver); \n        String bgcolor  = element.getCssValue(\"backgroundColor\"); \n        for (int i = 0; i <  10; i++) { \n            changeColor(\"rgb(0,200,0)\", element,driver);//1 \n            changeColor(bgcolor, element,driver);//2 \n        } \n    } \n    public static void changeColor(String color, WebElement element, WebDriver driver) { \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n        js.executeScript(\"arguments[0].style.backgroundColor = '\"+color+\"'\",  element); \n \n        try { \n            Thread.sleep(20); \n        }  catch (InterruptedException e) { \n        } \n     } \n	 \n	 \n    public static void drawBorder(WebElement element, WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"arguments[0].style.border='3px solid red'\", element); \n    } \n    \n    public static void generateAlert(WebDriver driver, String message){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"alert('\"+message+\"')\"); \n \n    } \n    \n    public static void clickElementByJS(WebElement element, WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"arguments[0].click();\", element); \n    	 \n    } \n	 \n    public static void refreshBrowserByJS(WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"history.go(0)\"); \n    } \n    \n    public static String getTitleByJS(WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	String title = js.executeScript(\"return document.title;\").toString(); \n    	return title; \n    } \n    \n    public static String getPageInnerText(WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	String pageText = js.executeScript(\"return document.documentElement.innerText;\").toString(); \n    	return pageText; \n    } \n    \n    public static void scrollPageDown(WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"window.scrollTo(0,document.body.scrollHeight)\"); \n    } \n    \n    public static void scrollIntoView(WebElement element, WebDriver driver){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n    	js.executeScript(\"arguments[0].scrollIntoView(true);\", element); \n    } \n    \n    \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class LocatorConcept { \n \n	public static void main(String[] args) { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		 \n		driver.get(\"https://scgi.half.ebay.com/ws/eBayISAPI.dll?RegisterEnterInfo&usage=2943&ru=\");	//enter url \n		 \n		//1. xpath: -- 2 \n		//absolute xath should not be used. -- html/body/div[1]/div[5]/div[2]/a \n		//only relative xpath should be used. -- //*[@id='firstname'] \n		 \n//		driver.findElement(By.xpath(\"//*[@id='firstname']\")).sendKeys(\"Tom\"); \n//		 \n//		driver.findElement(By.xpath(\"//*[@id='lastname']\")).sendKeys(\"Peter\"); \n//		 \n//		driver.findElement(By.xpath(\"//*[@id='address1']\")).sendKeys(\"12, new street\"); \n		 \n		 \n		 \n		//2. id: --1 \n//		driver.findElement(By.id(\"firstname\")).sendKeys(\"Tom\"); \n//		driver.findElement(By.id(\"lastname\")).sendKeys(\"Peter\"); \n		 \n		//3. name: --3 \n		driver.findElement(By.name(\"firstname\")).sendKeys(\"Tom\"); \n		driver.findElement(By.name(\"lastname\")).sendKeys(\"Peter\"); \n		 \n		 \n		//4. linkText : this is only for links \n		//driver.findElement(By.linkText(\"Sign in\")).click(); \n		 \n		//5. partialLinkText: not useful \n		//driver.findElement(By.partialLinkText(\"How to pick\")).click(); \n		 \n		 \n		//6. CSSSelector: ---2 \n		//if id is there--- #{id} \n		//if class is there --- .{class} \n		driver.findElement(By.cssSelector(\"#address1\")).sendKeys(\"12 new strt\"); \n		 \n		//7. class name: not useful  --4 \n		driver.findElement(By.className(\"ancAsb\")).click(); \n		 \n		 \n		 \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.interactions.Actions; \n \npublic class MouseMovementConcept { \n \n	public static void main(String[] args) throws InterruptedException { \n \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		driver.manage().window().maximize(); \n		driver.manage().deleteAllCookies(); \n		 \n		driver.get(\"http://spicejet.com/\"); \n		 \n		Actions action = new Actions(driver); \n		 \n		action.moveToElement(driver.findElement(By.linkText(\"About Us\"))).build().perform(); \n		 \n		Thread.sleep(3000); \n		 \n		driver.findElement(By.linkText(\"Fleet\")).click(); \n		 \n		//a[contains(text(),'Sales')] \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class Navigations { \n \n	public static void main(String[] args) throws InterruptedException { \n \n \n		//get() vs navigate().to() \n		 \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		driver.manage().window().maximize(); \n		driver.manage().deleteAllCookies(); \n		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); \n		 \n		driver.get(\"http://www.google.com\"); \n \n		driver.navigate().to(\"http://www.amazon.com\"); \n		 \n		//back and forward buttons simulation: \n		driver.navigate().back(); \n		 \n		Thread.sleep(2000); \n		 \n		driver.navigate().forward(); \n		 \n		Thread.sleep(2000); \n \n		driver.navigate().back(); \n		 \n		driver.navigate().refresh(); \n		 \n		 \n		 \n		 \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.io.FileInputStream; \nimport java.io.FileNotFoundException; \nimport java.io.IOException; \nimport java.util.Properties; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.ie.InternetExplorerDriver; \n \npublic class ReadPropFile { \n \n	 \n	public static WebDriver driver; \n	 \n	public static void main(String[] args) throws IOException { \n \n		Properties prop = new Properties(); \n \n		FileInputStream ip = new FileInputStream( \n				\"/Users/naveenkhunteta/Documents/workspace/MorningSessions/src/SeleniumSessions/config.properties\"); \n \n		prop.load(ip); \n \n		System.out.println(prop.getProperty(\"name\")); \n \n		System.out.println(prop.getProperty(\"age\")); \n \n		String url = prop.getProperty(\"URL\"); \n \n		System.out.println(url); \n \n		String browserName = prop.getProperty(\"browser\"); \n \n		System.out.println(browserName); \n \n		if (browserName.equals(\"chrome\")) { \n			System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n			driver = new ChromeDriver(); // launch chrome \n		} \n		else if(browserName.equals(\"FF\")){ \n			System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/geckodriver\"); \n			driver = new FirefoxDriver(); \n		} \n		else if(browserName.equals(\"IE\")){ \n			System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/internetexplorerdriver\"); \n			driver = new InternetExplorerDriver(); \n		} \n		 \n		driver.get(url); \n		 \n		driver.findElement(By.xpath(prop.getProperty(\"firstname_xpath\"))).sendKeys(prop.getProperty(\"firstName\")); \n		 \n		driver.findElement(By.xpath(prop.getProperty(\"lastname_xpath\"))).sendKeys(prop.getProperty(\"lastName\")); \n \n		driver.findElement(By.xpath(prop.getProperty(\"city_xpath\"))).sendKeys(prop.getProperty(\"city\")); \n		 \n \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.By; \nimport org.openqa.selenium.JavascriptExecutor; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \nimport com.gargoylesoftware.htmlunit.javascript.background.JavaScriptExecutor; \n \n \npublic class SelectCalendarByJS { \n \n	public static void main(String[] args) { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n \n		WebDriver driver = new ChromeDriver(); // launch chrome \n \n		driver.manage().window().maximize(); // maximize window \n		driver.manage().deleteAllCookies(); // delete all the cookies \n \n		//dynamic wait \n		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS); \n		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS); \n \n		driver.get(\"http://spicejet.com/\"); // enter URL \n		 \n		WebElement date = driver.findElement(By.id(\"ctl00_mainContent_txt_Fromdate\")); \n		String dateVal = \"30-12-2017\"; \n		 \n		selectDateByJS(driver, date, dateVal); \n		 \n	} \n	 \n	 \n	public static void selectDateByJS(WebDriver driver, WebElement element, String dateVal){ \n    	JavascriptExecutor js = ((JavascriptExecutor) driver); \n		js.executeScript(\"arguments[0].setAttribute('value','\"+dateVal+\"');\", element); \n		 \n	} \n	 \n	 \n	 \n	 \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport java.io.File; \nimport java.io.IOException; \nimport java.util.concurrent.TimeUnit; \n \nimport org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.OutputType; \nimport org.openqa.selenium.TakesScreenshot; \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \n \npublic class TakeScreenshotConcept { \n \n	public static void main(String[] args) throws IOException { \n \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\"); \n		WebDriver driver = new ChromeDriver(); // launch chrome \n		driver.manage().window().maximize(); \n		driver.manage().deleteAllCookies(); \n		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); \n \n		driver.get(\"http://www.google.com\"); \n \n		// Take screenshot and store as a file format \n		File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE); \n		// now copy the screenshot to desired location using copyFile //method \n		FileUtils.copyFile(src, new File(\"/Users/naveenkhunteta/Documents/workspace/MorningSessions/src/SeleniumSessions/google.png\")); \n \n	} \n \n} \n", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package SeleniumSessions; \n \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \n \npublic class WebDriverBasics { \n \n	public static void main(String[] args) { \n \n		 \n		//1. FF browser: \n		//geckodriver \n			// C:\\downloads\\geckodriver.exe -- windows \n	//	System.setProperty(\"webdriver.gecko.driver\", \"/Users/naveenkhunteta/Downloads/geckodriver\");	 \n	  //  WebDriver driver = new FirefoxDriver(); //launch FF \n		 \n	    \n	    //2. chrome browser: \n		System.setProperty(\"webdriver.chrome.driver\", \"/Users/naveenkhunteta/Downloads/chromedriver\");	 \n		WebDriver driver = new ChromeDriver(); //launch chrome \n		driver.get(\"http://www.google.com\");	//enter url \n		 \n		String title = driver.getTitle(); //get title \n		 \n		System.out.println(title); \n		 \n		//validation point: \n		if(title.equals(\"Google\")){ \n			System.out.println(\"correct title\"); \n		} \n		else{ \n			System.out.println(\"in-correct title\"); \n		} \n	   \n		 \n		System.out.println(driver.getCurrentUrl()); \n		 \n		//System.out.println(driver.getPageSource()); \n		 \n		driver.quit(); //quit the browser \n		 \n		 \n	} \n \n}", "meta": {"set_name": "naveenanimation20/SeleniumJavaCourse (en)"}}
{"text":"package main.java.util; \n/** \n * The WebDriverClass class is used to generate a single instance of driver to \n * launch the browser \n * \n * @author Shilpashree_V \n * @version 1.0 \n * @since February 2015 \n * \n */ \nimport java.util.concurrent.TimeUnit; \n \nimport org.openqa.selenium.WebDriver; \n \npublic class WebDriverClass { \n	static WebDriver driver; \n \n	private WebDriverClass() { \n		WebDriverClass.getDriver(); \n	} \n \n	public static WebDriver getDriver() { \n		driver.manage().timeouts().pageLoadTimeout(20, TimeUnit.SECONDS); \n		 \n		return driver; \n	} \n \n	public static void setDriver(WebDriver driver) { \n		WebDriverClass.driver = driver; \n	} \n \n	/** \n	 * @return \n	 * Getting the instance of the driver \n	 */ \n	public static WebDriver getInstance() { \n		if (driver == null) { \n \n			driver = (WebDriver) new WebDriverClass(); \n \n			return driver; \n		} else { \n \n			return driver; \n		} \n \n	} \n \n} \n", "meta": {"set_name": "infyData"}}
{"text":"package main.java.util; \n/** \n * The TestListener class is used to help in generating html Report \n * \n * @author Shilpashree_V \n * @version 1.0 \n * @since February 2015 \n * \n */ \nimport java.io.File; \nimport java.io.IOException; \nimport java.text.DateFormat; \nimport java.text.SimpleDateFormat; \nimport java.util.Date; \n \nimport org.apache.commons.io.FileUtils; \nimport org.openqa.selenium.OutputType; \nimport org.openqa.selenium.TakesScreenshot; \nimport org.openqa.selenium.WebDriver; \nimport org.testng.ITestContext; \nimport org.testng.ITestListener; \nimport org.testng.ITestResult; \nimport org.testng.Reporter; \n \nimport main.java.util.WebDriverClass; \n \n/** \n * @author Shilpashree_V \n * \n */ \npublic class TestListener implements ITestListener { \n	WebDriver driver = null; \n \n	/* (non-Javadoc) \n	 * @see org.testng.ITestListener#onTestFailure(org.testng.ITestResult) \n	 * capture the screenshot of a page on failure \n	 */ \n	@Override \n	public void onTestFailure(ITestResult result) { \n		 \n		printTestResults(result); \n		String methodName = result.getName().toString().trim(); \n		takeScreenShot(methodName); \n \n	} \n \n	 \n	/** \n	 * @param methodName \n	 * Capturing the screenshot of a page \n	 */ \n	public void takeScreenShot(String methodName) { \n \n		driver = WebDriverClass.getDriver(); \n		File scrFile = ((TakesScreenshot) driver) \n				.getScreenshotAs(OutputType.FILE); \n \n		try { \n			DateFormat dateFormat = new SimpleDateFormat( \n					\"dd_MMM_yyyy__hh_mm_ssaa\"); \n			Date date = new Date(); \n			 \n			FileUtils.copyFile(scrFile, new File(ReadConfigProperty.configpath \n					+ \"\\SCREENSHOT\\OnFailure\" + \"\\\" + methodName + \"__\" \n					+ dateFormat.format(date) + \".png\")); \n \n		} catch (IOException e) { \n			MainTestNG.LOGGER.severe(\"Io Exception occured\"); \n		} \n	} \n \n	@Override \n	public void onFinish(ITestContext arg0) { \n		Reporter.log(\"About to end executing Test \" + arg0.getName(), true); \n \n	} \n \n	@Override \n	public void onStart(ITestContext arg0) { \n		Reporter.log(\"About to begin executing Test \" + arg0.getName(), true); \n \n	} \n \n	@Override \n	public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) { \n		Reporter.log(\"About to end executing Test \" + arg0.getName(), true); \n	} \n \n	@Override \n	public void onTestSkipped(ITestResult arg0) { \n		Reporter.log(\"About to end executing Test \" + arg0.getName(), true); \n	} \n \n	@Override \n	public void onTestStart(ITestResult arg0) { \n		Reporter.log(\"About to end executing Test \" + arg0.getName(), true); \n	} \n \n	@Override \n	public void onTestSuccess(ITestResult arg0) { \n		printTestResults(arg0); \n \n	} \n \n	private void printTestResults(ITestResult result) { \n \n		if (result.getParameters().length != 0) { \n \n			String params = null; \n \n			for (Object parameter : result.getParameters()) { \n \n				params += parameter.toString() + \",\"; \n \n			} \n \n		} \n \n		String status = null; \n \n		switch (result.getStatus()) { \n \n		case ITestResult.SUCCESS: \n \n			status = \"Pass\"; \n \n			break; \n \n		case ITestResult.FAILURE: \n \n			status = \"Failed\"; \n \n			break; \n \n		case ITestResult.SKIP: \n \n			status = \"Skipped\"; \n \n		} \n \n		Reporter.log(\"Test Status: \" + status, true); \n \n	} \n \n} \n", "meta": {"set_name": "infyData"}}
{"text":"package main.java.util; \n/** \n * The ExecuteTestCases class is used to execute the test cases \n * \n * @author Shilpashree_V \n * @version 1.0 \n * @since February 2015 \n * \n */ \nimport java.awt.event.WindowEvent; \nimport java.lang.reflect.Field; \nimport java.util.ArrayList; \nimport java.util.List; \n \nimport org.openqa.selenium.WebDriver; \nimport org.openqa.selenium.chrome.ChromeDriver; \nimport org.openqa.selenium.firefox.FirefoxDriver; \nimport org.openqa.selenium.firefox.FirefoxProfile; \nimport org.openqa.selenium.ie.InternetExplorerDriver; \nimport org.testng.Assert; \nimport org.testng.ITest; \nimport org.testng.ITestResult; \nimport org.testng.Reporter; \nimport org.testng.annotations.AfterClass; \nimport org.testng.annotations.AfterMethod; \nimport org.testng.annotations.AfterSuite; \nimport org.testng.annotations.BeforeClass; \nimport org.testng.annotations.BeforeMethod; \nimport org.testng.annotations.DataProvider; \nimport org.testng.annotations.Test; \nimport org.testng.internal.BaseTestMethod; \n \n/** \n * @author Shilpashree_V \n * From MainTesnNG, this class will be called \n */ \npublic class ExecuteTestCases implements ITest { \n \n	public static final String FIREFOX = \"firefox\"; \n	public static final String IE = \"IE\"; \n	public static final String CHROME = \"chrome\"; \n	String cbrowserName = \"BROWSER_NAME\"; \n	String curl = \"URL\"; \n	String cdriver = \"IEDRIVER\"; \n	ReadConfigProperty config = new ReadConfigProperty(); \n	ReadElementLocators read = new ReadElementLocators(); \n	static ExcelLibrary lib = new ExcelLibrary(); \n \n	static WebDriver driver = null; \n	static ExcelAction act = new ExcelAction(); \n \n	static List list; \n	protected String mTestCaseName = \"\"; \n	/** \n	 * In this class, this is the first method to be executed. \n	 * Reading testsuite , test case sheet and data sheet and storing the values in Hashmap \n	 **/ \n	@BeforeClass \n	public void setup() { \n		MainTestNG.LOGGER.info(ExecuteTestCases.class.getName() \n				+ \"   setup() method called\"); \n \n \n		act.readTestSuite(); \n		act.readTestCaseInExcel(); \n		act.readTestDataSheet(); \n		act.readCapturedObjectProperties(); \n \n		/** \n		 * Selecting which browser to be executed \n		 **/ \n		String browserName = config.getConfigValues(cbrowserName); \n		selectBrowser(browserName); \n \n		MainTestNG.LOGGER.info(config.getConfigValues(curl)); \n		/** \n		 * launching the url \n		 **/ \n		driver.get(config.getConfigValues(curl)); \n		WebDriverClass.setDriver(driver); \n	} \n	 \n	/** \n	 *Select the browser on which you want to execute tests \n	 **/ \n	private void selectBrowser(String browserName) { \n \n		switch (browserName) { \n \n		case FIREFOX: \n \n			firefoxProfile(); \n			break; \n \n		case IE: \n			ie(); \n			break; \n \n		case CHROME: \n			chrome(); \n			break; \n \n		default: \n			firefoxProfile(); \n			break; \n		} \n \n	} \n \n	private void chrome() { \n \n		System.setProperty(\"webdriver.chrome.driver\", \n				config.getConfigValues(cdriver)); \n \n		driver = new ChromeDriver(); \n		driver.manage().window().maximize(); \n	} \n \n	private void ie() { \n		System.setProperty(\"webdriver.ie.driver\", \n				config.getConfigValues(cdriver)); \n \n		driver = new InternetExplorerDriver(); \n		driver.manage().window().maximize(); \n		MainTestNG.LOGGER.info(\"IE launch\"); \n \n	} \n \n	/** \n	 * Firefox profile will help in automatic download of files \n	 */ \n	private void firefoxProfile() { \n		 \n		FirefoxProfile profile = new FirefoxProfile(); \n		profile.setPreference(\"browser.download.folderList\", 1); \n		profile.setPreference(\"browser.download.manager.showWhenStarting\", \n				false); \n \n		profile.setPreference(\"browser.helperApps.neverAsk.saveToDisk\", \n				\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"); \n \n		driver = new FirefoxDriver(profile); \n		driver.manage().window().maximize(); \n \n	} \n \n	/** \n	 * To override the test case name in the report \n	 */ \n	@BeforeMethod(alwaysRun = true) \n	public void testData(Object[] testData) { \n		String testCase = \"\"; \n		if (testData != null && testData.length > 0) { \n			String testName = null; \n			// Check if test method has actually received required parameters \n			for (Object tstname : testData) { \n				if (tstname instanceof String) { \n					testName = (String) tstname; \n					break; \n				} \n			} \n			testCase = testName; \n		} \n		this.mTestCaseName = testCase; \n \n	} \n \n	public String getTestName() { \n		return this.mTestCaseName; \n	} \n \n	public void setTestName(String name) { \n \n		this.mTestCaseName = name; \n \n	} \n \n	/** \n	 * All the test cases execution will start from here, which will take the input from the data provider \n	 */ \n	@Test(dataProvider = \"dp\") \n	public void testSample1(String testName) { \n		MainTestNG.LOGGER.info(ExecuteTestCases.class.getName() \n				+ \"  @Test method called\" + \"    \" + testName); \n \n		try { \n			this.setTestName(testName); \n			MainTestNG.LOGGER.info(\"testSuiteIterate() calling\"); \n			act.testSuiteIterate(testName); \n			Reporter.log(\"ex\" + getTestName()); \n \n		} catch (Exception ex) { \n			Assert.fail(); \n			stack(ex); \n \n			Reporter.log(\"exception in execute testCase====\" + ex); \n \n		} \n	} \n \n	@AfterMethod \n	public void setResultTestName(ITestResult result) { \n		try { \n			BaseTestMethod bm = (BaseTestMethod) result.getMethod(); \n			Field f = bm.getClass().getSuperclass() \n					.getDeclaredField(\"m_methodName\"); \n			f.setAccessible(true); \n			f.set(bm, mTestCaseName); \n			Reporter.log(bm.getMethodName()); \n			this.mTestCaseName = \" \"; \n \n		} catch (Exception ex) { \n			stack(ex); \n			Reporter.log(\"ex\" + ex.getMessage()); \n		} \n	} \n \n	/** \n	 * Parameterization in testng \n	 */ \n	@DataProvider(name = \"dp\") \n	public Object[][] regression() { \n		List list = (ArrayList) ExcelAction.listOfTestCases; \n		Object[][] data = new Object[list.size()][1]; \n		MainTestNG.LOGGER.info(ExecuteTestCases.class.getName() \n				+ \" TestCases to be executed\" + \"    \" + data); \n		for (int i = 0; i < data.length; i++) { \n			data[i][0] = (String) list.get(i); \n		} \n		return data; \n	} \n \n	@AfterClass \n	public void cleanup() { \n		act.clean(); \n		lib.clean(); \n		SwingTest.frame.dispose(); \n		SwingTest.frame.dispatchEvent(new WindowEvent(SwingTest.frame, \n				WindowEvent.WINDOW_CLOSING)); \n		 \n \n	} \n \n	public static void stack(Exception e) { \n		e.printStackTrace(); \n		MainTestNG.LOGGER.info(ExecuteTestCases.class.getName() \n				+ \" Exception occured\" + \"    \" + e.getCause()); \n	} \n} \n", "meta": {"set_name": "infyData"}}